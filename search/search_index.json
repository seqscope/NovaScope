{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to NovaScope documentation","text":""},{"location":"#introduction","title":"Introduction","text":"<p>NovaScope is a Snakemake-based pipeline that processes spatial transcriptomics data generated from the Seq-Scope. Currently, it is  specifically tailored for spatial arrays generated from the Illumina NovaSeq 6000 platform. </p>"},{"location":"#functionality","title":"Functionality","text":"<p>The main purpose of NovaScope is to process the Seq-Scope sequencing data from scratch to a spatial digital gene expression (SGE) matrix  compatible with variaous single cell and spatial analysis methods.</p> <p>Additionaly, it provides plus functionalities, including histology alignment with SGE matrix, SGE filtering, SGE segment, and SGE reformatting. See more details about the main and plus functionalities in the WorkFlow Structure.</p>"},{"location":"#characteristics","title":"Characteristics","text":"<p>NovaScope features a modular and adaptable design, allowing users to tailor the pipeline according to their particular requirements. The use of Snakemake ensures streamlined workflow management, reproducibility, and scalability.</p> <p>Additionally, NovaScope is designed to operate on Unix-based high-performance computing (HPC) platforms. It provides flexibility in deployment, allowing execution directly on local systems or through the SLURM workload manager.</p>"},{"location":"#an-overview","title":"An Overview","text":"<p>NovaScope primarily consists of two steps as shown in the figure below.</p> <p>Figure 1: Overview of the NovaScope pipeline: Step 1 processes the 1st-seq FASTQ files to generate spatial barcode maps for each \"Chip\", a 10x6 array of tiles. Step 2 processes the 2nd-seq FASTQ files, aligns reads to the reference genome, and produces spatial gene expression at submicron resolution.</p>"},{"location":"#links","title":"Links","text":"<ul> <li> <p>The Preprint for NovaScope: DOI: 10.1101/2024.03.29.587285.</p> </li> <li> <p>An exemplary downstream analysis to analyze the SGE matrix generated by NovaScope is provided at NovaScope-exemplary-downstream-analysis.</p> </li> </ul>"},{"location":"basic_usage/access_data/","title":"Accessing Example Datasets","text":""},{"location":"basic_usage/access_data/#dataset-overview","title":"Dataset Overview","text":"<p>There are three example datasets published with the NovaScope protocol. </p> <p>Each input dataset contains two types of FASTQ files: </p> <ul> <li>1st-seq (single-end) FASTQ file that contains spatial barcodes to construct a barcode map,</li> <li>2nd-seq (paired-end) FASTQ files that contains spatial barcodes in Read 1, and cDNA sequences in Read 2.</li> </ul>"},{"location":"basic_usage/access_data/#minimal-test-run-dataset","title":"Minimal Test Run Dataset","text":"<p>This is a small (1.14GB) test run dataset comprising of a subset of a liver section data described in Shallow Liver Section Dataset. This dataset is meant to be used to test the sanity of the pipeline, without necessarily offering biologically meaningful interpretation of data.</p>"},{"location":"basic_usage/access_data/#shallow-liver-section-dataset","title":"Shallow Liver Section Dataset","text":"<p>This dataset is a typical (23.7GB) example of Seq-Scope dataset that can be initially generated for a tissue section. Typically, the 2nd-seq FASTQ files contain 150-200M paired-end reads. This should be sufficient to examine the spatial distribution of the transcripts across the tissue, assess the quality of dataset, identify major cell types and marker genes, and perform basic pixel-level decoding of the spatial transcriptome. </p>"},{"location":"basic_usage/access_data/#deep-liver-section-dataset","title":"Deep Liver Section Dataset","text":"<p>If the initial examination of the shallow dataset looks promising, one can sequence the library much more deeply to the level of saturating the library, which could maximize the information content. A deeply sequenced dataset typically contains multiple pairs of FASTQ files, possibly across multiple sequencing runs. The deeply sequenced liver section dataset, available at https://doi.org/10.7302/tw62-4f97, has 7 pairs of FASTQ files (250GB) in addition to the shallow dataset.</p>"},{"location":"basic_usage/access_data/#downloading-the-datasets","title":"Downloading the Datasets","text":"<p>Each of the three datasets have their own DOIs, which can be accessed using the URLs below.</p> <ul> <li>Minimal Test Run Dataset (1.14GB) : https://doi.org/10.5281/zenodo.10835761</li> </ul> <pre><code>## To download the tarball from Zenodo, you can use the following command\nwget \"https://zenodo.org/records/10835761/files/B08Csub_20240318_raw.tar.gz\"\n\n## uncompress the tarball using the following command:\nmkdir B08Ctest\ncd B08Ctest\ntar xzvf ../B08Csub_20240318_raw.tar.gz\n</code></pre> <ul> <li>Shallow Liver Section Dataset (23.7GB) : https://doi.org/10.5281/zenodo.10840696 </li> </ul> <pre><code>## To download the tarball from Zenodo, you can use the following command\n\n## create a directory to store the data\nmkdir B08Cshallow\ncd B08Cshallow\n\n## download the 1st-seq FASTQ file\nwget \"https://zenodo.org/records/10840696/files/9203-AP.L3.B08C.R1_001.fastq.gz\"\n\n## download the 2nd-seq FASTQ files (R1 and R2)\nwget \"https://zenodo.org/records/10840696/files/9748-YK-3_CGAGGCTG_S3_R1_001.fastq.gz\"\nwget \"https://zenodo.org/records/10840696/files/9748-YK-3_CGAGGCTG_S3_R2_001.fastq.gz\"\n\n## Additionally, you may want to download md5sum files \n## to verify the integrity of the downloaded files\n</code></pre> <ul> <li>Deep Liver Section Dataset (250GB) : Link to Deep Blue Data <ul> <li>Note that you need to use Globus to download the dataset.</li> <li>Note that this dataset contains only additional 2nd-seq FASTQ files in addition to the Shallow Liver Section Dataset, so you need to download the shallow dataset first. </li> </ul> </li> </ul>"},{"location":"basic_usage/execute/","title":"Executing the NovaScope Pipeline","text":""},{"location":"basic_usage/execute/#preliminary-steps","title":"Preliminary Steps","text":"<p>A Dry Run</p> <p>Before running NovaScope, performing a sanity check by executing a dry run is highly recommended. A dry run verifies that your <code>config_job.yaml</code> is properly configured, your working directory is not locked, and outlines the necessary jobs to be executed.</p> <p>A Rule Graph / A Directed Acyclic Graph (DAG)</p> <p>Additionally, you can create a rule graph that visually represents the structure of the workflow or a Directed Acyclic Graph (DAG) to view all jobs and their actual dependencies.</p> <p>Below provides commands for a dry-run and visualization. <pre><code># paths\nsmk_dir=/path/to/the/novascope/repository\njob_dir=/path/to/the/job/directory              # The job directory should has the `config_job.yaml` file.\n\n## (recommended) start with a dry run\n## - view all information:\nsnakemake -s $smk_dir/NovaScope.smk --rerun-incomplete -d $job_dir --dry-run -p\n\n## - simply summarize the jobs to be executed without other information:\nsnakemake -s $smk_dir/NovaScope.smk --rerun-incomplete -d $job_dir --dry-run --quiet\n\n## (optional) visualization:\n## - (1) rulegraph\nsnakemake --rulegraph  -s $smk_dir/NovaScope.smk --rerun-incomplete -d $job_dir | dot -Tpdf &gt; rulegraph.pdf\n\n## - (2) DAG\nsnakemake --dag  -s $smk_dir/NovaScope.smk --rerun-incomplete -d $job_dir | dot -Tpdf &gt; dag.pdf\n</code></pre></p>"},{"location":"basic_usage/execute/#execution-options","title":"Execution Options","text":"<p>Below we applied: </p> <ul> <li><code>--rerun-incomplete</code> to enable the pipeline to re-run any jobs the output of which is identified as incomplete, </li> <li><code>--latency-wait</code> to request the pipeline pauses for the defined time awaiting an output file if not instantly accessible after a job, compensating for filesystem delay.</li> </ul> <p>Please note those options are OPTIONAL. For more options, please see the A Rule Execution Guide and the official Snakemake documentation.</p>"},{"location":"basic_usage/execute/#option-a-local-execution","title":"Option A: Local Execution","text":"<p>If your computing environment does not require a job scheduler such as SLURM, you can run the pipeline locally. An example script is provided below. Make sure to replace the variables to relevant paths, the number of cores, and the time to wait for latency. </p> <pre><code>## path\nsmk_dir=/path/to/the/novascope/directory        # path to NovaScope repository\njob_dir=/path/to/the/job/directory              # The job directory should has the `config_job.yaml` file.\n\n## parameters\nNcores=&lt;number_of_cores&gt;                        # replace &lt;number_of_cores&gt; by the number of available CPU cores you wish to use\nwait_time=&lt;time_to_wait&gt;                        # Replace &lt;time_to_wait&gt; with a specific duration in seconds, e.g., 120.\n\n## execute the NovaScope pipeline\nsnakemake --latency-wait $wait_time -s ${smk_dir}/NovaScope.smk -d $job_dir --cores $Ncores --rerun-incomplete \n</code></pre> <p>See the following examples to see how to execute the pipeline locally:</p> <ul> <li>Minimal Test Run</li> <li>Shallow Liver Section</li> <li>Deep Liver Section</li> </ul>"},{"location":"basic_usage/execute/#option-b-slurm-using-a-master-job","title":"Option B: SLURM using a Master Job","text":"<p>A Master Job</p> <p>If your computing environment support a job scheduler such SLURM, a recommended approach to submit a 'Master Job' that oversees and manages the status of all jobs.</p> <p>First, make sure you have the SLURM configuration file available. The <code>--latency-wait</code> and <code>--rerun-incomplete</code> are preset in the example SLURM configuration file, eliminating manual specification.</p> <p>Now establish a master job to monitor the progress of all tasks and handle job submissions. Create a file similar to the information below. Note that the settings may vary based on your specific computing environment. </p> <p>Memory and Time Limits</p> <p>The master job requires minimal memory but an extended time limit to ensure all related jobs are submitted and completed. Otherwise, NovaScope will exit and unfinished jobs will not be executed or tracked.</p> <pre><code>#!/bin/bash\n####  Job configuration\n#SBATCH --account=&lt;account_name&gt;               # Replace &lt;account_name&gt; with your account identifier\n#SBATCH --partition=&lt;partition_name&gt;           # Replace &lt;partition_name&gt; with your partition name\n#SBATCH --job-name=&lt;job_name&gt;                  # Replace &lt;job_name&gt; with a name for your job\n#SBATCH --nodes=1                              # Number of nodes, adjust as needed\n#SBATCH --ntasks-per-node=1                    # Number of tasks per node, adjust based on requirement\n#SBATCH --cpus-per-task=1                      # Number of CPUs per task, adjust as needed\n#SBATCH --mem-per-cpu=&lt;memory_allocation&gt;      # Memory per CPU, replace &lt;memory_allocation&gt; with value, e.g., \"2000m\"\n#SBATCH --time=&lt;time_limit&gt;                    # Job time limit, replace &lt;time_limit&gt; with value, e.g., \"72:00:00\"\n#SBATCH --mail-user=&lt;your_email&gt;               # Replace &lt;your_email&gt; with your email address\n#SBATCH --mail-type=END,FAIL,REQUEUE           # Notification types for job status\n#SBATCH --output=./logs/&lt;log_filename&gt;         # Replace &lt;log_filename&gt; with the log file name pattern\n\n## path\nsmk_dir=/path/to/the/novascope/directory                             # path to NovaScope repository\njob_dir=/path/to/the/job/directory                                   # The job directory should has the `config_job.yaml` file.\n\n## SLURM profile\nslurm_params=\"--profile /path/to/the/slurm/configuration/directory\"  # The SLURM configuration directory should have the SLURM configuration file: `config.yaml`. \n                                                                     # For example, if your snakemake is version v7.29.0, use `--profile $smk_dir/info/slurm/v7.29.0`\n\n## execute the NovaScope pipeline\nsnakemake $slurm_params -s ${smk_dir}/NovaScope.smk -d $job_dir \n</code></pre> <p>Specific examples prepared for the three datasets are provided below:</p> <ul> <li>Minimal Test Run</li> <li>Shallow Liver Section</li> <li>Deep Liver Section</li> </ul> <p>Then submit the master job through <code>sbatch</code>:</p> <pre><code>sbatch submit_HPC.job\n</code></pre>"},{"location":"basic_usage/execute/#option-c-slurm-via-command-lines","title":"Option C: SLURM via Command Lines","text":"<p>For a small number of quick jobs, you can execute NovaScope with SLURM using a single command line without a master job. </p> <p>This is similar to the local execution, but you need to specify the SLURM profile. Ensure the SLURM configuration file is ready before proceeding. The <code>--latency-wait</code> and <code>--rerun-incomplete</code> options are pre-configured in the example SLURM file.</p> <p>Potential Disruptions</p> <p>It is important to remember that if you are logged out before all jobs have been submitted to SLURM, any remaining jobs, i.e., those haven't been submitted, will not be submitted.</p> <pre><code>## path\nsmk_dir=/path/to/the/novascope/directory                             # path to NovaScope repository\njob_dir=/path/to/the/job/directory                                   # The job directory should has the `config_job.yaml` file.\n\n## SLURM profile\nslurm_params=\"--profile /path/to/the/slurm/configuration/directory\"  # The SLURM configuration directory should have the SLURM configuration file: `config.yaml`. \n                                                                     # For example, if your snakemake is version v7.29.0, use `--profile $smk_dir/info/slurm/v7.29.0`\n\n## execute the NovaScope pipeline\nsnakemake $slurm_params -s ${smk_dir}/NovaScope.smk -d $job_dir\n</code></pre>"},{"location":"basic_usage/intro/","title":"Introduction","text":"<p>This tutorial provides an instruction of running NovaScope using three example datasets provided with the published protocol.</p> <p>Before downloading the example datasets, you must install NovaScope in your computing environment, and set up your own environment config file.</p> <p>In this tutorial, we will provide guidance on (a) how to access the example datasets, (b) how to set up your input configuration file, and (c) how to execute the NovaScope pipeline based on the prepared input files.</p>"},{"location":"basic_usage/job_config/","title":"Configuring a NovaScope Run","text":"<p>Once you have installed NovaScope and downloaded the input data, the next step is to prepare a job configuration file to specify input, output, and parameters.</p> <p>Job Configuration File Specifications</p> <p>The job configuration file must adhere to the following guidelines:</p> <ul> <li>Naming convention: <code>config_job.yaml</code>.</li> <li>Location: Ensure the <code>config_job.yaml</code> file is placed in the working directory. The working directory should be specified to NovaScope using the <code>-d</code> or <code>--directory</code> option.</li> <li>Fields: The <code>config_job.yaml</code> file must include the following fields: : <code>input</code>, <code>output</code>, <code>request</code>, <code>env_yml</code>. Additional fields can be included as per the user's requirements.</li> </ul>"},{"location":"basic_usage/job_config/#prepare-the-job-configuration-file","title":"Prepare the Job Configuration file","text":"<p>Prepare your job configuration file following the template below:</p> <ul> <li>For parameters in the \"Main Fields\", more details are provided at the Main Fields. Mandatory fields are marked as \"REQUIRED FIELD\".</li> <li>For additional parameters, below only includes minimal descriptions. More details are outlined in the NovaScope Full Documentation, under the specific rule pages to which they apply.</li> </ul> <p>For user's convenience, we provide separate example <code>config_job.yaml</code> files for the Minimal Test Run, Shallow Liver Test Run, and Deep Liver Test Run.</p> <pre><code>## ================================================\n##\n##  Main Fields:\n##\n## ================================================\n## == Input Data ==\ninput:\n  flowcell: &lt;flowcell_id&gt;                       ## REQUIRED FIELD (e.g. N3-HG5MC)\n  chip: &lt;chip_id&gt;                               ## REQUIRED FIELD (e.g. B08C)\n  species: &lt;species_info&gt;                       ## REQUIRED FIELD (e.g. \"mouse\")\n  lane: &lt;lane_id&gt;                               ## Optional. Defaults to auto-assignment from the last character of chip_id (A-&gt;1, B-&gt;2, C-&gt;3, D-&gt;4) if absent.\n  seq1st:                                       ## 1st-seq information\n    id: &lt;seq1st_id&gt;                             ## Optional. Defaults to \"L{lane}\" if absent.\n    fastq: &lt;path_to_seq1st_fastq_file&gt;          ## REQUIRED FIELD\n    layout: &lt;path_to_sbcd_layout&gt;               ## Optional. Default based on chip_id\n  seq2nd:                                       ## 2nd-seq information. See the \"Main Fields\" below.\n    ## specify the first pair of FASTQs.\n    - id: &lt;seq2nd_pair1_id&gt;                     ## Optional. If provided, must be unique among all 2nd-seq pairs. Defaults to automatic assignment based on fastq_R1 if absent (see details below).\n      fastq_R1: &lt;path_to_seq2nd_pair1_fastq_Read1_file&gt; ## REQUIRED FIELD - path to Read 1 FASTQ file,\n      fastq_R2: &lt;path_to_seq2nd_pair1_fastq_Read2_file&gt; ## REQUIRED FIELD - path to Read 2 FASTQ file\n    ## if there is a second pair of FASTQs ...\n    - id: &lt;seq2nd_pair2_id&gt;                     \n      fastq_R1: &lt;path_to_seq2nd_pair2_fastq_Read1_file&gt;\n      fastq_R2: &lt;path_to_seq2nd_pair2_fastq_Read2_file&gt;\n    ## ... (if there are more 2nd-seq FASTQ files)\n  run_id: &lt;run_id&gt;                              ## Optional. See the \"Main Fields\" below.\n  unit_id: &lt;unit_id&gt;                            ## Optional. See the \"Main Fields\" below.\n  histology:                                    ## Optional. Histology information. Only required if histology alignment is needed. See the \"Main Fields\" below.\n    ## specify the first input histology file\n    - path: &lt;path_to_1st_histology_file&gt;        ## REQUIRED FIELD - path to the input histology file\n      magnification: &lt;magnification&gt;            ## Optional - specify the magnification of the input histology file, default is \"10X\"\n      figtype: &lt;type&gt;                           ## Optional - specify the type of the histology file. Options: \"hne\", \"dapi\", and \"fl\". \n    ## if there is a second input histology file ...\n    - path: &lt;path_to_2nd_histology_file&gt;       \n      magnification: &lt;magnification&gt;                         \n      figtype: &lt;type&gt;   \n    ## ...  \n\n## == Output == \noutput: &lt;output_directory&gt;                      ## REQUIRED FIELD (e.g. /path/to/output/directory)\nrequest:                                        ## See the \"Main Fields\" below.\n  - &lt;required_output1&gt;                          ## REQUIRED FIELD (e.g. sge-per-run)\n  - &lt;required_output2&gt;                          ## Optionally, you can request multiple outputs\n  # ...\n\n## == Environment YAML == \nenv_yml: &lt;path_to_config_env.yaml_file&gt;         ## If absent, NovaScope use the \"config_env.yaml\" file in the `info` subdirectory in the Novascope repository.\n\n## ================================================\n##\n##  Additional Fields:\n## \n##    The \"upstream\", \"histology\", and \"downstream\" parameters are included below, along side the default values.\n##    Revise and enable the following parameters ONLY IF you wish to utilize values different than the default.\n##\n## ================================================\n## == Upstream Parameters (from fastq files to SGE) == \n#upstream:                    \n#  fastq2sbcd:                                  ## Specify the HDMI-oligo seed library. The example data uses DraI31, but DraI32 is a typical format.\n#    format: DraI32             \n#\n#  sbcd2chip:                                   ## Specify gaps among tiles and the duplicate setting for spatial barcodes. \n#    gap_row: 0.0517\n#    gap_col: 0.0048\n#    dup_maxnum: 1\n#    dup_maxdist: 1\n#\n#  smatch:                                      ## \n#    skip_sbcd: 0                               ## The number of initial bases to omit from the read.\n#    match_len: 27                              ## Length of spatial barcode considered to be a perfect match.\n#\n#  align:                       \n#    min_match_len: 30                          ## A minimum number of matching bases.\n#    min_match_frac: 0.66                       ## A minimum fraction of matching bases.\n#    len_sbcd: 30                               ## Length of spatial barcode (in Read 1) to be copied to output FASTQ file (Read 1).\n#    len_umi: 9                                 ## Length of UMI barcode (in Read 2) to be copied to output FASTQ file (Read 1).\n#    len_r2: 101                                ## Length of read 2 after trimming (including randomers).\n#    exist_action: overwrite                    ## Actions when an intermediate or output file exists. Options: \"skip\", and \"overwrite\".\n#    resource:                                  ## Specify the computing resources for alignment. Only applicable for HPC users. \n#      assign_type: stdin\n#      stdin:\n#        partition: standard\n#        threads: 10\n#        memory: 70000m\n#\n#  visualization:            \n#    drawxy:                                    ## specify the parameters for visualization for sbcd and smatch images\n#      coord_per_pixel: 1000\n#      intensity_per_obs: 50\n#      icol_x: 3\n#      icol_y: 4\n#    drawsge:                                   ## specify the parameters for sdge visualization \n#      genes:                                   ## specify sets of genes to be colored\n#        - red: nonMT                           ## the first set of genes\n#          green: Unspliced\n#          blue: MT\n#      # - ...                                  ## if more 1 set of genes are required\n#      coord_per_pixel: 1000\n#      auto_adjust: true\n#      adjust_quantile: 0.99\n#\n## == Histology Alignment Parameters == \n#histology:                  \n#    min_buffer_size: 1000                      ## min_buffer_size, max_buffer_size, and step_buffer_size to create a list of buffer size for the alignment\n#    max_buffer_size: 2000\n#    step_buffer_size: 100\n#    raster_channel: 1                          ## roaster channel used for historef alignment\n#\n## == Downstream Parameters (SGE filtering, reformatting, and segmentation) ==\n#downstream:                 \n#  mu_scale: 1000                               ## specify coordinate to um conversion\n#\n#  gene_filter:                                 ## specify the criteria for gene filtering in a manner compatible with regular expressions \n#    keep_gene_type: \"protein_coding|lncRNA\"    \n#    rm_gene_regex: \"^Gm\\\\d+|^mt-|^MT-\"         \n#    min_ct_per_feature: 50                     \n#\n#  polygon_density_filter:                      ## specify parameters for polygon filtering by density if applicable              \n#    radius: 15               \n#    hex_n_move: 1            \n#    polygon_min_size: 500    \n#    quartile: 2\n#\n#  segment:\n#    hex_n_move: 1                              ## specify the sliding step in segmentation\n#    precision: 2                               ## specify the precision for spatial location in segmentation\n#    10x:                                       ## specify the parameters for hexagon in 10x genomics format   \n#      min_pixel_per_unit: 10                   \n#      char:                                    ## specify the characteristics for hexagon segmentation\n#        - solo_feature: gn                     \n#          hexagon_width: 18                   \n#          quality_control: FALSE               \n#      # - ...                                  ## if more than 1 set of hexagon is needed \n#    ficture:                                   ## specify the characteristics for hexagon in FICTURE-compatible format    \n#      min_density: 0.3                         \n#      char:\n#        - solo_feature: gn\n#          hexagon_width: 18\n#          quality_control: TRUE                \n#      # - ...                                  ## if more than 1 set of hexagon is needed \n</code></pre>"},{"location":"basic_usage/job_config/#main-fields","title":"Main Fields","text":""},{"location":"basic_usage/job_config/#input","title":"Input","text":"<p>Relative Path</p> <p>NovaScope supports using relative paths in the job configuration file, which should be relative to the working directory. If a relative path is found, NovaScope automatically obtains its real path and uses it in the process.</p> <ul> <li> <p><code>seq1st</code>:</p> <ul> <li> <p><code>id</code>: The <code>id</code> will be used to organize the 1st-seq FASTQ files. Make sure the <code>id</code> field for 1st-seq in the corresponding flowcell is unique.  </p> </li> <li> <p><code>layout</code>: A spatial barcode (sbcd) layout file to provide the layout of tiles in a chip with the following format. If absent, NovaScope will automatically look for the sbcd layout within the NovaScope repository at info/assets/layout_per_tile_basis, using the section chip ID for reference.     <pre><code>lane  tile  row  col  rowshift  colshift\n3     2556  1    1    0         0\n3     2456  2    1    0         0.1715\n</code></pre></p> <ul> <li><code>lane</code>: Lane IDs;</li> <li><code>tile</code>: Tile IDs;</li> <li><code>row</code> &amp; <code>col</code>: The layout position;</li> <li><code>rowshift</code> &amp; <code>colshift</code>: The gap information</li> </ul> </li> </ul> </li> <li> <p><code>seq2nd</code>: This field requires all FASTQ pairs associated with the input section chip to be provided under <code>seq2nd</code>. </p> How to generate <code>seq2nd_pair_id</code>? <p>If an ID is not specified, NovaScope will automatically generate one using the format <code>&lt;flowcell_id&gt;.&lt;chip_id&gt;.&lt;randomer&gt;</code>, where <code>randomer</code> is the last 5 digits of the md5 hash of the real path of the read 1 FASTQ file from the 2nd-seq.</p> </li> <li> <p><code>run_id</code>: Only needed if alignment is required to generate the requested output. It is used as an identifier for alignment and Spatial Digital Gene Expression matrices (SGEs) to differentiate between input 2nd-seq FASTQ files. This is particularly useful when generating SGEs using the same 1st-seq files but different 2nd-seq files. If not provided, NovaScope will generate it based on the flowcell ID, chip ID, and all input 2nd-seq read 1 FASTQ files.</p> How to generate <code>run_id</code>? <p>NovaScope automatically generates <code>run_id</code> in the format <code>&lt;flowcell_id&gt;-&lt;chip_id&gt;-&lt;species&gt;-&lt;randomer&gt;</code>. The <code>randomer</code> is created by sorting all input seq2nd_pair_id, concatenating these seq2nd_pair_id into a single long string, and then computing the md5 hash of this string. The last 5 digits of this hash are used as the <code>randomer</code>.</p> </li> <li> <p><code>unit_id</code>: Only needed if reformat feature is required to generate the requested output. It acts as an identifier for SGEs that are prepared for reformatting. This identifier is especially useful when users wish to manually modify SGE outside of NovaScope and then proceed to reformat both the original and modified SGEs. The <code>unit_id</code> ensures clear distinction between the original and modified datasets.</p> How to generate <code>unit_id</code> <p>If <code>unit_id</code> is not specified and reformatting is requested, it will default to <code>&lt;run_id&gt;-default</code>, indicating that no manual preprocessing has occurred. </p> <p>Users who prefer to reformat manually modified SGEs should define their own <code>unit_id</code>. We recommend incorporating <code>run_id</code> into the <code>unit_id</code> to maintain a clear trace of the dataset lineage.</p> </li> <li> <p><code>histology</code>: NovaScope allows multiple input histology files for alignment. However, it is important to note that the magnification and type of each histology file serve as identifiers. Ensure that no two input histology files share the same magnification and type. Currently, historef supports the following types:</p> <ul> <li><code>\"hne\"</code>: Hematoxylin and Eosin (H&amp;E) stained histology images;</li> <li><code>\"dapi\"</code>: DAPI or 4',6-diamidino-2-phenylindole stained histology images;</li> <li><code>\"fl\"</code>: Fluorescence stained histology images.</li> </ul> </li> </ul>"},{"location":"basic_usage/job_config/#output","title":"Output","text":"<p>The output directory will be used to organize the input files and store output files. Please see the structure directory here.</p>"},{"location":"basic_usage/job_config/#request","title":"Request","text":"<p>The pipeline interprets the requested output files via the <code>request</code> field and determines the execution flow. The <code>request</code> field allows multiple desired output.</p> <p>Info</p> <p>The <code>request</code> field should indicate the final output required, and all intermediary files contributing to the final output will be automatically generated (i.e., the dependencies between rules). </p>"},{"location":"basic_usage/job_config/#main-request","title":"Main Request","text":"<p>Below are request options for NovaScope's main functionalities, alongside their final output and links to detailed output information. </p> <p>For more insights into the excution flow, please consult the execution flow by request alongside the rulegraph. </p> Option Final Output Files Details <code>sbcd-per-flowcell</code> Spatial barcode maps for a flowcell at per-tile basis, and a manifest file of summary statistics for each tile. fastq2sbcd <code>sbcd-per-chip</code> A spatial barcode map for a chip, and an image of spatial barcode distribution. sbcd2chip <code>smatch-per-chip</code> A TSV file of spatial barcodes matched to the 2nd-Seq reads, and an image of matched spatial barcode distribution. smatch <code>align-per-run</code> A Binary Alignment Map file with summary metrics, and  a digital gene expression matrix for genomic features. align <code>sge-per-run</code> An SGE matrix with a coordinate metadata file, an image showing distributions of all, matched, and aligned spatial barcodes, and images of specific gene expressions. dge2sdge and sdge_visual"},{"location":"basic_usage/job_config/#plus-request","title":"Plus Request","text":"<p>The options below are only for executing the additional functionalities. Please make sure you have installed the additional requirements properly.</p> Option Final Output Files Details <code>histology-per-run</code> Geotiff files for coordinate transformation between SGE matrix and histology image. historef <code>transcript-per-unit</code> An SGE matrix in the TSV format that is compatible to FICTURE. sdgeAR_reformat <code>filterftr-per-unit</code> A feature file for genes that pass gene-based filtering, formatted as a TSV file that contains detailed information about each gene. sdgeAR_featurefilter <code>filterpoly-per-unit</code> An SGE matrix, a coordinate metadata file, a feature file, and a boundary JSON file, all reflecting the SGE matrix that passed the polygon-based density filtering. sdgeAR_polygonfilter <code>segment-10x-per-unit</code> A hexagon-indexed SGE matrix in the 10x genomics format. sdgeAR_segment_10x <code>segment-ficture-per-unit</code> A hexagon-indexed SGE matrix in the FICTURE-compatible TSV format. sdgeAR_segment_ficture"},{"location":"basic_usage/output/","title":"Expected Output from NovaScope","text":""},{"location":"basic_usage/output/#output-directory-structure","title":"Output Directory Structure","text":"<p>The directory passed through <code>output</code> paramter in the <code>config_job.yaml</code> will be organized as follows, </p> <pre><code>\u251c\u2500\u2500 align\n\u251c\u2500\u2500 histology\n\u251c\u2500\u2500 match\n\u251c\u2500\u2500 seq1st\n\u2514\u2500\u2500 seq2nd\n</code></pre>"},{"location":"basic_usage/output/#seq1st","title":"seq1st","text":"<p>The <code>seq1st</code> directory is structured for organizing 1st sequencing FASTQ files and spatial barcode maps. It includes:</p> <ul> <li>A <code>fastqs</code> subdirectory for all input 1st sequencing FASTQ files via symlink.</li> <li>Two subdirectories for spatial barcode maps:<ul> <li><code>sbcds</code> for maps of individual tiles from the 1st sequencing,</li> <li><code>nbcds</code> for a map organized on a per-chip basis, used in later processing.</li> </ul> </li> </ul> <pre><code>\u2514\u2500\u2500 seq1st\n    \u2514\u2500\u2500 &lt;flowcell_id&gt;\n        \u251c\u2500\u2500 fastqs\n        |   \u2514\u2500\u2500 &lt;seq1st_id&gt;.fastq.gz\n        \u251c\u2500\u2500 nbcds\n        |   \u2514\u2500\u2500 &lt;chip_id&gt;\n        |       \u251c\u2500\u2500 1_1.sbcds.sorted.tsv.gz\n        |       \u251c\u2500\u2500 1_1.sbcds.sorted.png\n        |       \u251c\u2500\u2500 dupstats.tsv.gz\n        |       \u2514\u2500\u2500 manifest.tsv\n        \u2514\u2500\u2500 sbcds\n           \u2514\u2500\u2500 &lt;chip_id&gt;\n                \u2514\u2500\u2500 ...    # spatial maps of individual tile, and a manifest file \n</code></pre>"},{"location":"basic_usage/output/#seq2nd","title":"seq2nd","text":"<p>The <code>seq2nd</code> directory is dedicated to managing all input 2nd sequencing FASTQ files via symlinks. Each pair will be organized in one folder named by the 2nd sequencing ID provided via the job configuration file.</p> <p>The following example demonstrates the directory structure using two pairs of input 2nd sequencing FASTQ files:</p> <pre><code>\u2514\u2500\u2500 seq2nd\n    \u251c\u2500\u2500 &lt;seq2nd_id1&gt;\n    |   \u251c\u2500\u2500 &lt;seq2nd_id1&gt;.R1.fastq.gz\n    |   \u2514\u2500\u2500 &lt;seq2nd_id1&gt;.R2.fastq.gz\n    \u2514\u2500\u2500 &lt;seq2nd_id2&gt;\n        \u251c\u2500\u2500 &lt;seq2nd_id2&gt;.R1.fastq.gz\n        \u2514\u2500\u2500 &lt;seq2nd_id2&gt;.R2.fastq.gz\n</code></pre>"},{"location":"basic_usage/output/#match","title":"match","text":"<p>The <code>match</code> directory houses the outcomes of aligning second sequencing reads with spatial barcodes for the corresponding chip section.</p> <pre><code>\u2514\u2500\u2500 match\n    \u2514\u2500\u2500 &lt;flowcell_id&gt;\n        \u2514\u2500\u2500 &lt;chip_id&gt;\n            \u2514\u2500\u2500 &lt;seq2nd_id1&gt;\n                \u251c\u2500\u2500 &lt;seq2nd_id1&gt;.R1.counts.tsv\n                \u251c\u2500\u2500 &lt;seq2nd_id1&gt;.R1.match.png\n                \u251c\u2500\u2500 &lt;seq2nd_id1&gt;.match.sorted.uniq.tsv.gz\n                \u2514\u2500\u2500 &lt;seq2nd_id1&gt;.summary.tsv\n</code></pre>"},{"location":"basic_usage/output/#histology","title":"histology","text":"<p>The <code>histology</code> directory is designated for holding both the input histology file and the histology images aligned with the spatial coordinates of the SGE.</p> <pre><code>\u2514\u2500\u2500 histology\n    \u2514\u2500\u2500 &lt;flowcell_id&gt;\n        \u2514\u2500\u2500 &lt;chip_id&gt;\n            \u251c\u2500\u2500 raw\n            |   \u2514\u2500\u2500 ...     # a raw histology file\n            \u2514\u2500\u2500 aligned\n                \u2514\u2500\u2500 ...     # aligned histology files\n</code></pre>"},{"location":"basic_usage/output/#align","title":"align","text":"<p>The <code>align</code> directory encompasses several subdirectories, including: </p> <ul> <li><code>bam</code> for alignment outcomes such as the BAM file, summary metrics, and visualizations;</li> <li><code>sge</code> for a spatial gene expression (SGE) matrix and visualizations; </li> </ul> <pre><code>\u2514\u2500\u2500 align\n    \u2514\u2500\u2500 &lt;flowcell_id&gt;\n        \u2514\u2500\u2500 &lt;chip_id&gt;\n        \u00a0\u00a0 \u2514\u2500\u2500 &lt;run_id&gt;\n                \u251c\u2500\u2500 bam\n                |   \u2514\u2500\u2500 ...     \n        \u00a0\u00a0     \u2514\u2500\u2500 sge\n                    \u2514\u2500\u2500 ...     \n</code></pre>"},{"location":"basic_usage/output/#analysis","title":"analysis","text":"<p>The <code>analysis</code> directory includes three subdirectory mainly for the reformatting SGE matrix:</p> <ul> <li><code>sgeAR</code> for the SGE matrix before reformatting, where the \"AR\" stands for analysis-ready,</li> <li><code>preprocess</code> for the reformatted and filtered SGE matrices, filtered feature file, and meta files for coordinates,</li> <li><code>segment</code> for the hexagon-indexed SGE.</li> </ul> <pre><code>\u2514\u2500\u2500 analysis\n    \u2514\u2500\u2500 &lt;run_id&gt;\n        \u2514\u2500\u2500 &lt;unit_id&gt;\n            \u251c\u2500\u2500 preprocess\n            |   \u2514\u2500\u2500 ...  \n            \u251c\u2500\u2500 segment\n            |   \u2514\u2500\u2500 ...  \n            \u2514\u2500\u2500 sgeAR\n                \u2514\u2500\u2500 ...  \n</code></pre> The <code>sgeAR</code> Subfolder and Manual Preprocess <p>The <code>sgeAR</code> subfolder is specifically designed to host input SGE matrix that require reformatting. This subfolder is particularly useful when users wish to manually preprocess SGE, such as applying boundary filtering, before they undergo reformatting.</p> <p>To manually preprocess an SGE matrix:</p> <ul> <li>Preprocess the SGE matrix: Users must manually preprocess the SGE matrix according to their specific requirements.</li> <li>Name the dataset: After preprocessing, the dataset should be named and referred to as <code>unit_id</code>.</li> <li>Save the preprocessed SGE matrix: Place the manually preprocessed SGE matrix in the <code>sgeAR</code> subfolder.</li> <li>Preprare a coordinate meta file Prepare a <code>barcodes.minmax.tsv</code> with the minimum and maximum of X and Y coordinates in the <code>sgeAR</code> subfolder.</li> <li>Update the job configuration file: Provide the <code>unit_id</code> in the job configuration file to ensure it is recognized in subsequent processing steps.</li> </ul> <p>Automatic Handling: If reformatting features are requested without manually preparing the SGE matrix in the <code>sgeAR</code> as outlined, NovaScope will automatically generate a <code>unit_id</code>. It will then link the original SGE matrix from the <code>sge</code> subdirectory to the <code>sgeAR</code>, facilitating seamless processing.</p>"},{"location":"basic_usage/output/#downstream-analysis","title":"Downstream Analysis","text":"<p>The aligned sequenced reads can be directly used for tasks that require read-level information, such as allele-specific expression or somatic variant analysis. The SGE can also be analyzed with many software tools, such as Latent Dirichlet Allocation (LDA) and Seurat. </p> <p>An exemplary downstream analysis is provided at NovaScope-exemplary-downstream-analysis.</p>"},{"location":"fulldoc/intro/","title":"Introduction","text":"<p>This Full Documentation section serves as a comprehensive overview of NovaScope's functionality, featuring both a rule execution guide and specific rule instructions.</p> <p>The rule execution guide outlines essential concepts for operating NovaScope and offers a glimpse of the execution flows for various <code>request</code> options.</p> <p>The specific rule instructions provide detailed information for each rule, including its purpose, inputs and outputs, tips for reviewing output, parameters, dependencies, and relevant code snippets. The output completes with descriptions, naming conventions, file formats, and visualisation for images.</p> <p>Info</p> <p>The Full Documentation showcases the file format and visualization techniques applied to the results from the Shallow Liver Section Dataset.</p>"},{"location":"fulldoc/execution_guide/core_concepts/","title":"Core Concepts","text":"<p>Before the execution flow by <code>request</code>, below outlines essential concepts for working with NovaScope.</p>"},{"location":"fulldoc/execution_guide/core_concepts/#rule-dependencies","title":"Rule Dependencies","text":"<p>The rule dependencies are determined based on the input and output files specified in the rules. For example, if Rule <code>sbcd2chip</code> requires the output of Rule <code>fastq2sbcd</code> as input, the Rule <code>fastq2sbcd</code> serves as a prerequisite rule to Rule <code>sbcd2chip</code>. </p>"},{"location":"fulldoc/execution_guide/core_concepts/#execution-dynamics","title":"Execution Dynamics","text":"<p>The execution of rules within NovaScope is governed by several key factors, outlined as follows:</p> <ul> <li> <p>Specified Final Output Files: The execution of rules is directly influenced by the final output files requested by the user, as defined by the <code>Request</code> field in the job configuration file. For instance, if the output of a rule (referred to as <code>Rule X</code>) is indicated as the final output file, then <code>Rule X</code> will be executed.</p> </li> <li> <p>Rule Dependencies and Availability of Intermediate Files: NovaScope initiates a systematic evaluation, starting with <code>Rule X</code>, to ascertain the presence of its required input files. If any inputs are missing, NovaScope iteratively identifies and executes the necessary precursor rules to generate these missing inputs, thus ensuring <code>Rule X</code> has everything it needs to proceed.</p> </li> <li> <p>User-Defined Execution Options: Snakemake provides a suite of command-line arguments that allow users to tailor the execution process of the pipeline. Below includes a selection of frequently utilized execution options. For all available execution options and their functionalities, please consult the official Snakemake documentation.</p> <ul> <li><code>--rerun-incomplete</code> and <code>--ignore-incomplete</code>: These options dictate whether to rerun or ignore jobs that started but did not complete successfully in previous attempts.</li> <li><code>--restart-times</code>: This option sets the maximum number of attempts to restart a failing job before it is considered unsuccessful.</li> <li><code>--forceall</code>, <code>-F</code>: This option compels the execution of all rules, irrespective of their current completion status.</li> </ul> </li> </ul>"},{"location":"fulldoc/execution_guide/core_concepts/#rulegraph","title":"Rulegraph","text":"<p>A rulegraph visually maps the rules to be executed alongside their dependencies. </p> <ul> <li>Components: A rulegraph represents each rule as a node, with directed edges showing how the output of one rule serves as the input for another, establishing a clear path of data flow and execution order. </li> <li>Rule Status: Solid lines depict rules set to be executed, while dotted lines indicate rules that will be skipped, as their outputs are already up to date. </li> </ul> <p>By demonstrating the workflow's structure, highlighting the sequence in which tasks are performed and how they interconnect, a rulegraph help understand the entire process from start to finish.</p>"},{"location":"fulldoc/execution_guide/rule_execution/","title":"Execution Flow by Request","text":"<p>This page provides an overview of the rule execution flow tailored to different <code>request</code> specified in the job configuration file of NovaScope. </p> <p>Each <code>request</code> option triggers a specific set of rules. Thus, below provides a rulegraph for each <code>request</code> option to outline the triggered rules and their interdependencies, detailing distinct processing paths.</p> <p>Info</p> <p>The visual guides below are constructed from a baseline scenario where only the initial input 1st-seq and 2nd-seq FASTQ files are present, with no prior processing or intermediate files generated.</p>"},{"location":"fulldoc/execution_guide/rule_execution/#sbcd-per-flowcell","title":"<code>\"sbcd-per-flowcell\"</code>","text":""},{"location":"fulldoc/execution_guide/rule_execution/#sbcd-per-chip","title":"<code>\"sbcd-per-chip\"</code>","text":""},{"location":"fulldoc/execution_guide/rule_execution/#smatch-per-chip","title":"<code>\"smatch-per-chip\"</code>","text":""},{"location":"fulldoc/execution_guide/rule_execution/#align-per-run","title":"<code>\"align-per-run\"</code>","text":""},{"location":"fulldoc/execution_guide/rule_execution/#sge-per-run","title":"<code>\"sge-per-run\"</code>","text":""},{"location":"fulldoc/execution_guide/rule_execution/#histology-per-run","title":"<code>\"histology-per-run\"</code>","text":""},{"location":"fulldoc/execution_guide/rule_execution/#transcript-per-unit","title":"<code>\"transcript-per-unit\"</code>","text":""},{"location":"fulldoc/execution_guide/rule_execution/#filterftr-per-unit","title":"<code>\"filterftr-per-unit\"</code>","text":""},{"location":"fulldoc/execution_guide/rule_execution/#filterpoly-per-unit","title":"<code>\"filterpoly-per-unit\"</code>","text":""},{"location":"fulldoc/execution_guide/rule_execution/#segment-10x-per-unit","title":"<code>\"segment-10x-per-unit\"</code>","text":""},{"location":"fulldoc/execution_guide/rule_execution/#without-sge-filtering","title":"Without SGE filtering","text":"<ul> <li>When requesting hexagon-indexed SGE without gene-filtering and polygon-filtering:      </li> </ul>"},{"location":"fulldoc/execution_guide/rule_execution/#with-sge-filtering","title":"With SGE filtering","text":"<ul> <li>When requesting hexagon-indexed SGE with gene-filtering and polygon-filtering:      </li> </ul>"},{"location":"fulldoc/execution_guide/rule_execution/#segment-ficture-per-unit","title":"<code>\"segment-ficture-per-unit\"</code>","text":""},{"location":"fulldoc/execution_guide/rule_execution/#without-sge-filtering_1","title":"Without SGE filtering","text":""},{"location":"fulldoc/execution_guide/rule_execution/#with-sge-filtering_1","title":"With SGE filtering","text":""},{"location":"fulldoc/rules/align/","title":"Rule <code>align</code>","text":""},{"location":"fulldoc/rules/align/#purpose","title":"Purpose","text":"<p>The purpose of the <code>align</code> rule is to map the reads from 2nd-seq FASTQ files to the reference genome, focusing on a per-chip approach. For a chip associated with multiple pairs of 2nd-seq FASTQ files, NovaScope executes the <code>align</code> rule once utilizing all file pairs.</p> <p>Specifically, the process involves 1) combining all FASTQ files from 2nd-seq that are related to this chip, 2) discarding any 2nd-seq reads from that do not possess a spatial barcode sequence (HDMI) identified in 1st-seq, 3) mapping 2nd-seq reads to the reference genome utilizing STARsolo.</p>"},{"location":"fulldoc/rules/align/#input-files","title":"Input Files","text":"<ul> <li> <p>2nd-seq FASTQ file All pairs of 2nd-seq FASTQ files that are associated to the given chip are designed as input.</p> </li> <li> <p>Matched Spatial Barcode Files Matched Spatial barcode files for all pairs of 2nd-seq FASTQ files, which are produced by Rule <code>smatch</code>.</p> </li> </ul>"},{"location":"fulldoc/rules/align/#output-files","title":"Output Files","text":"<p>The rule generates the following output in the specified directory path: <pre><code>&lt;output_directory&gt;/align/&lt;flowcell_id&gt;/&lt;chip_id&gt;/&lt;run_id&gt;/bam\n</code></pre></p>"},{"location":"fulldoc/rules/align/#1-a-binary-alignment-map-bam-file","title":"(1) A Binary Alignment Map (BAM) File","text":"<p>Description: A Binary Alignment Map (BAM) file contains the aligned reads, sorted by genomic coordinates. The BAM file is accompanied by a BAM index (BAI) file.</p> <p>File Naming Convention:</p> <ul> <li>The BAM file: <code>sttoolsAligned.sortedByCoord.out.bam</code></li> <li>The BAI file: <code>sttoolsAligned.sortedByCoord.out.bam.bai</code></li> </ul> <p>File Format: For detailed information on the file formats for BAM and BAI files, please refer to the Format Specification provided by Samtools.</p>"},{"location":"fulldoc/rules/align/#2-alignment-summary-metrics","title":"(2) Alignment summary metrics","text":"<p>Description: A table file containing metrics such as the total number of input reads, average length of input reads, and summary statistics for unique, multi-mapping, unmapped, and chimeric reads.</p> <p>File Naming Convention: <code>sttoolsLog.final.out</code></p> <p>File Format: <pre><code>                                 Started job on |       Apr 01 18:32:36\n                             Started mapping on |       Apr 01 18:33:47\n                                    Finished on |       Apr 01 18:51:55\n       Mapping speed, Million of reads per hour |       275.83\n\n                          Number of input reads |       83363295\n                      Average input read length |       68\n                                    UNIQUE READS:\n                   Uniquely mapped reads number |       44728786\n                        Uniquely mapped reads % |       53.66%\n                          Average mapped length |       86.51\n                       Number of splices: Total |       4221113\n            Number of splices: Annotated (sjdb) |       4108506\n                       Number of splices: GT/AG |       4174922\n                       Number of splices: GC/AG |       13282\n                       Number of splices: AT/AC |       581\n               Number of splices: Non-canonical |       32328\n                      Mismatch rate per base, % |       0.92%\n                         Deletion rate per base |       0.03%\n                        Deletion average length |       1.56\n                        Insertion rate per base |       0.01%\n                       Insertion average length |       1.20\n                             MULTI-MAPPING READS:\n        Number of reads mapped to multiple loci |       9853625\n             % of reads mapped to multiple loci |       11.82%\n        Number of reads mapped to too many loci |       1330676\n             % of reads mapped to too many loci |       1.60%\n                                  UNMAPPED READS:\n  Number of reads unmapped: too many mismatches |       0\n       % of reads unmapped: too many mismatches |       0.00%\n            Number of reads unmapped: too short |       4764703\n                 % of reads unmapped: too short |       5.72%\n                Number of reads unmapped: other |       22685505\n                     % of reads unmapped: other |       27.21%\n                                  CHIMERIC READS:\n                       Number of chimeric reads |       0\n                            % of chimeric reads |       0.00%\n</code></pre></p>"},{"location":"fulldoc/rules/align/#3-digital-gene-expression-matrices-dges","title":"(3) Digital Gene Expression Matrices (DGEs)","text":"<p>Description: A digital gene expression matrix (DGE) is generated for each genomic feature, including Gene, GeneFull, splice junctions (SJ), and Velocyto. The DGE for Gene counts reads match the gene transcript while the DGE for GeneFull counts all reads overlapping the exons and introns of the gene.</p> <p>File Naming Convention: For each genomic feature, a DGE, which is composed of <code>barcodes.tsv.gz</code>, <code>features.tsv.gz</code>, and <code>matrix.mtx.gz</code>, is stored in a directory named after the genomic feature.</p> <p>File Format:</p> <ul> <li> <p><code>barcodes.tsv.gz</code>: A single-column file with Unix line endings and no header, where each row lists a barcode. <pre><code>AAAAAAAATAGTTCTGCTAGCTGGTAAGCT\nAAAAAAAGTGATCAGAGGTGATATTATGCT\nAAAAAAAGTTCGCACTATACGAACAGGGAT\n</code></pre></p> </li> <li> <p><code>features.tsv.gz</code>: Each row includes the following three columns without header: feature ID (column 1), feature name (column 2), and type of feature (column 3). <pre><code>ENSMUSG00000100764  Gm29155 Gene Expression\nENSMUSG00000100635  Gm29157 Gene Expression\nENSMUSG00000100480  Gm29156 Gene Expression\n</code></pre></p> </li> <li> <p><code>matrix.tsv.gz</code>: A compressed sparse matrix file format storing non-zero gene expression values across spatial locations or barcodes in spatial transcriptomics data. <pre><code>%%MatrixMarket matrix coordinate integer general\n%\n33989 17641021 17801209\n9677 1 1\n20305 2 1\n23800 2 1\n</code></pre></p> <ul> <li><code>Header</code>: Initial lines form the header, declaring the matrix's adherence to the Market Matrix (MTX) format, outlining its traits. This section may include comments (lines beginning with <code>%</code>) for extra metadata, all marked by a \u201c%\u201d.</li> <li><code>Dimensions</code>: Following the header, the first line details the matrix dimensions: the count of rows (features), columns (barcodes), and non-zero entries.</li> <li><code>Data Entries</code>: Post-dimensions, subsequent lines enumerate non-zero entries in triplet form: row index (feature index), column index (barcode index), and value (expression level).</li> </ul> </li> </ul>"},{"location":"fulldoc/rules/align/#output-guidelines","title":"Output Guidelines","text":"<p>It is suggested to review the summary metrics to confirm the total read count, the percentage of reads aligned to genomes and genes, library saturation, the count of aligned spatial barcodes, and the count of unique transcripts.</p>"},{"location":"fulldoc/rules/align/#parameters","title":"Parameters","text":"<p>The following parameter in the job configuration file will be applied in this rule.</p> <pre><code>upstream:\n  smatch:                   \n    skip_sbcd: 1            \n    match_len: 27           \n  align:                    \n     min_match_len: 30      \n     min_match_frac: 0.66   \n     len_sbcd: 30            \n     len_umi: 9              \n     len_r2: 101             \n     exist_action: overwrite\n     resource:               \n       assign_type: stdin\n       stdin:\n         partition: standard\n         threads: 10\n         memory: 70000m\n</code></pre> <ul> <li> <p>Reformat FASTQ Paramaters</p> <p>Parameters in <code>smatch</code> and three parameters in <code>align</code> (including <code>len_sbcd</code>, <code>len_umi</code>, and <code>len_r2</code>) are used to pass values to the <code>reformat-fastqs</code> function in spatula. Below, for each parameter, the corresponding parameter in spatula, description, and the default value in NovaScope are provided.</p> Parameter <code>spatula</code> parameter Description Default Value <code>skip_sbcd</code> <code>--skip-sbcd</code> The number of initial bases to omit from the read. 1 <code>match_len</code> <code>--match-len</code> The length of the spatial barcode to be considered as a perfectmatch. 27 <code>len_sbcd</code> <code>--len_sbcd</code> The length of the spatial barcode sequence to be copied in Read 1 30 <code>len_umi</code> <code>--len_umi</code> The length of the UMI sequence (randomer) to be copied from Read 2 (beginning) to Read 1 (after spatial barcode) 9 <code>len_r2</code> <code>--len_r2</code> The length of Read 2 sequences to be trimmed 101 <ul> <li><code>skip_sbcd</code>: This is useful if the 1st-seq spatial barcode lacks sufficient bases. When absent in the job configuration file, NovaScope determines <code>skip_sbcd</code> following the <code>format</code> in <code>fastq2sbcd</code>: 1 for DraI31 and 0 for DraI32.</li> </ul> </li> <li> <p>Alignment Paramaters</p> <p>Four parameters in <code>align</code> (including <code>len_sbcd</code>, <code>len_umi</code>, <code>min_match_len</code>, and <code>min_match_frac</code>) are used to pass values to STARsolo. Below, for each parameter, the corresponding parameter in STARsolo, description, and the default value in NovaScope are provided.</p> Parameter <code>STARsolo</code> parameter Description Default Value <code>len_sbcd</code> <code>--soloCBlen</code> The cell barcode length 30 <code>--soloUMIstart</code> Defined as <code>len_sbcd + 1</code>, this indicates UMI sequence (randomer) start base. 31 <code>len_umi</code> <code>--soloUMIlen</code> The length of UMI sequence (randomer) start base. 9 <code>min_match_len</code> <code>--outFilterMatchNmin</code> An alignment is only output if the count of matched bases &gt;= this value. 30 <code>min_match_frac</code> <code>--outFilterMatchNminOverLread</code> Similar to <code>min_match_len</code>, normalized to the read length 0.66 </li> <li> <p>The <code>exist_action</code> Parameter</p> <p>The <code>exist_action</code> parameter within <code>align</code> provides two choices for handling existing intermediate or output files: \"<code>skip</code>\" tells NovaScope to bypass these files, whereas \"<code>overwrite</code>\" instructs NovaScope to replace them.</p> </li> <li> <p>The <code>resource</code> Parameter</p> <p>The <code>resource</code> parameters, specific to HPC users, determine the partitions, CPU count, and memory allocation for the alignment process. Details for the <code>resource</code> parameters in <code>align</code> are provided in the <code>upstream</code> parameters in Job Configuration.</p> <ul> <li><code>assign_type</code>: two available options for how NovaScope allocates resources for alignment. The options include <code>\"stdin\"</code> (recommended) and <code>\"filesize\"</code>. Details for each option are provided in the blocks below. </li> <li> Option <code>stdin</code> Advantages:<ul> <li>Directly allocates resources as specified in the <code>stdin</code> field, bypassing calculations for precision in resource management.</li> <li>Enables customization of resources for different datasets in the job configuration file, allowing for optimization of costs based on file size.   Disadvantages:</li> <li>Requires users to specify resources for each job unless default settings (partition name, threads, memory) fit the computing environment. An example is provided in the template.</li> </ul> </li> <li> Option <code>filesize</code> <p>Advantages:</p> <ul> <li>Automatically allocates resources based on the total size of input 2nd-seq FASTQ files and specified computing resources in the environment configuration file.</li> <li>Once computing resources are specified in the environment file, they automatically apply to all jobs, simplifying the setup.   Disadvantages:</li> <li>Requires computing time to calculate the total size of input files, potentially delaying the start of data processing.</li> </ul> <p>The resource allocation strategy is as follows:</p> Total File Size (GB) Memory Allocated for Alignment (GB) Under 200 70 200 to 400 140 Over 400 330 </li> </ul> </li> </ul>"},{"location":"fulldoc/rules/align/#dependencies","title":"Dependencies","text":"<p>Rule <code>align</code> requires the matched spatial barcode files from Rule <code>smatch</code> generates. Hence, if the input files are not available, <code>align</code> relies on the successful completion of <code>smatch</code> for proper operation. See an overview of the rule dependencies in the Workflow Structure.</p>"},{"location":"fulldoc/rules/align/#code-snippet","title":"Code Snippet","text":"<p>The code for this rule is provided in a04_align.smk</p>"},{"location":"fulldoc/rules/dge2sdge/","title":"Rule <code>dge2sdge</code>:","text":""},{"location":"fulldoc/rules/dge2sdge/#purpose","title":"Purpose","text":"<p>The <code>dge2sdge</code> generates a spatial digital gene expression (SGE) matrix using the digital gene expression matrix (DGE) from alignment and spatial maps.</p>"},{"location":"fulldoc/rules/dge2sdge/#input-files","title":"Input Files","text":"<ul> <li>Per-Chip Spatial Barcode Map and Manifest File Required input files include the spatial barcode map and manifest file for the chip of interest, which are created by the <code>sbcd2chip</code> rule.</li> <li>Per-Chip Matched Spatial Barcode Files It also requires matched spatial barcode files that contains spatial barcodes matched to the 2nd-seq reads. Those files are generated by the <code>smatch</code> rule.</li> <li>DGEs DGEs for each genomic feature, including Gene, GeneFull, splice junctions (SJ), and Velocyto, are produced by the <code>align</code> rule.</li> </ul>"},{"location":"fulldoc/rules/dge2sdge/#output-files","title":"Output Files","text":"<p>The rule generates the following output in the specified directory path: <pre><code>&lt;output_directory&gt;/align/&lt;flowcell_id&gt;/&lt;chip_id&gt;/&lt;run_id&gt;/sge\n</code></pre></p>"},{"location":"fulldoc/rules/dge2sdge/#1-a-spatial-digital-gene-expression-sge-matrix","title":"(1) A Spatial Digital Gene Expression (SGE) Matrix","text":"<p>Description: A transcript-indexed SGE in 10x Genomics format is generated, which contains all available genomic feature. </p> <p>File Naming Convention: The SGE is composed of <code>barcodes.tsv.gz</code>, <code>features.tsv.gz</code>, and <code>matrix.mtx.gz</code>. </p> <p>File Format:</p> <ul> <li> <p><code>barcodes.tsv.gz</code>: <pre><code>AAAAAAGGTACCCGCAGTGCGGACAAACGA  1   1   1   1   1214343 1498113 1,1,1,0,0\nAAAACAGGAGATTCAGAATGCAAAAATGAA  2   2   1   1   1029766 1669474 0,1,0,1,0\nAAAACTTGTCGAGCTCAGTGACGCGGGCTT  3   3   1   1   1366819 1170486 2,2,1,0,1\n</code></pre></p> <ul> <li>Column 1: sorted spatial barcodes</li> <li>Column 2: 1-based integer index of the spatial barcode</li> <li>Column 3: 1-based integer index from the full barcode that is in the STARsolo output</li> <li>Column 4: Lane ID, which is defined as <code>1</code>.</li> <li>Column 5: Tile ID, which is defined as <code>1</code>.</li> <li>Column 6: X-coordinate within the chip (global X-coordinate).</li> <li>Column 7: Y-coordinate within the chip (global Y-coordinate).</li> <li>Column 8: Five comma-separated numbers denote the count per spatial barcode for each genomic feature, in the order of Gene, GeneFull, Spliced, Unspliced, and Ambiguous.</li> </ul> </li> <li> <p><code>features.tsv.gz</code>: <pre><code>ENSMUSG00000100764  Gm29155 1   2,2,1,0,1\nENSMUSG00000100635  Gm29157 2   0,0,0,0,0\nENSMUSG00000100480  Gm29156 3   0,0,0,0,0\n</code></pre></p> <ul> <li>Column 1: Gene Ensemble ID</li> <li>Column 2: Gene symbol</li> <li>Column 3: 1-based integer index which will be used in matrix.mtx.gz</li> <li>Column 4: Five comma-separated numbers denote the count per gene for each genomic feature, in the order of Gene, GeneFull, Spliced, Unspliced, and Ambiguous.</li> </ul> </li> <li> <p><code>matrix.mtx.gz</code>: <pre><code>%%MatrixMarket matrix coordinate integer general\n%\n33989 1197304 2488321\n5743 1 1 1 1 0 0\n6002 2 0 1 0 1 0\n7279 3 1 1 1 0 0\n</code></pre></p> <ul> <li><code>Header</code>: Initial lines form the header, declaring the matrix's adherence to the Market Matrix (MTX) format, outlining its traits. This may include comments (lines beginning with <code>%</code>) for extra metadata, all marked by a \u201c%\u201d.</li> <li><code>Dimensions</code>: Following the header, the first line details the matrix dimensions: the count of rows (features), columns (barcodes), and non-zero entries.</li> <li><code>Data Entries</code>: Post-dimensions, subsequent lines enumerate non-zero entries in seven columns: row index (feature index), column index (barcode index), and five values (expression levels) corresponds to Gene, GeneFull, Spliced, Unspliced, and Ambiguous.</li> </ul> </li> </ul>"},{"location":"fulldoc/rules/dge2sdge/#2-a-comprehensive-view-of-spatial-barcodes-distribution","title":"(2) A Comprehensive View of Spatial Barcodes Distribution","text":"<p>Description: A side-by-side presentation of three sets of barcodes, including: all spatial barcodes from the spatial map (see Rule <code>sbcd2chip</code>), matched spatial barcodes (see Rule <code>smatch</code>), and aligned spatial barcodes.</p> <p>File Naming Convention: <pre><code>&lt;run_id&gt;.sge_match_sbcd.png\n</code></pre></p> <p>File Visualization:</p>"},{"location":"fulldoc/rules/dge2sdge/#3-a-metadata-file-for-x-y-coordinates","title":"(3) A Metadata File for X Y Coordinates","text":"<p>Description: This file contains the minimum and maximum X Y coordinates, which are essential for the reformatting features.</p> <p>File Naming Convention: <pre><code>barcodes.minmax.tsv\n</code></pre></p> <p>File Format: <pre><code>xmin  xmax      ymin  ymax\n0     12810899  0     6950609\n</code></pre></p> <ul> <li><code>xmin</code>: The minimum x-coordinate across all barcodes in the SGE.</li> <li><code>xmax</code>: The maximum x-coordinate across all barcodes in the SGE.</li> <li><code>ymin</code>: The minimum y-coordinate across all barcodes in the SGE.</li> <li><code>ymax</code>: The maximum y-coordinate across all barcodes in the SGE.</li> </ul>"},{"location":"fulldoc/rules/dge2sdge/#output-guidelines","title":"Output Guidelines","text":"<p>It is suggested to review the composite image displaying \"sbcd\", \"smatch\", and \"sge\" images together, to confirm there is coherence among the three images.</p>"},{"location":"fulldoc/rules/dge2sdge/#parameters","title":"Parameters","text":"<pre><code>upstream:\n  dge2sdge:\n    layout: null\n</code></pre> <ul> <li>The <code>layout</code> Parameter The applies as the layout for the RGB plots. When absent, NovaScope use the predefined layout file.</li> </ul>"},{"location":"fulldoc/rules/dge2sdge/#dependencies","title":"Dependencies","text":"<p>Given the input from Rule <code>sbcd2chip</code>, <code>smatch</code>, and <code>align</code> serve as the necessary input for <code>dge2sdge</code>. This linkage ensures Rule <code>dge2sdge</code> can only execute after <code>sbcd2chip</code>, <code>smatch</code>, and <code>align</code> have successfully completed their operations. See an overview of the rule dependencies in the Workflow Structure.</p>"},{"location":"fulldoc/rules/dge2sdge/#code-snippet","title":"Code Snippet","text":"<p>The code for this rule is provided in <code>a05_dge2sdge.smk</code>.</p>"},{"location":"fulldoc/rules/fastq2sbcd/","title":"Rule <code>fastq2sbcd</code>","text":""},{"location":"fulldoc/rules/fastq2sbcd/#purpose","title":"Purpose","text":"<p>The <code>fastq2sbcd</code> rule aims to generate a spatial barcode map per-tile basis for an input 1st-seq FASTQ file.</p>"},{"location":"fulldoc/rules/fastq2sbcd/#input-files","title":"Input Files","text":"<p>The only input file required by <code>fastq2sbcd</code> is the 1st-seq FASTQ file. Ensure the raw FASTQ files are correctly formatted and listed in the job configuration file.</p>"},{"location":"fulldoc/rules/fastq2sbcd/#output-files","title":"Output Files","text":"<p>The rule generates the following output in the specified directory path:  <pre><code>&lt;output_directory&gt;/seq1st/&lt;flowcell_id&gt;/sbcds/&lt;seq1st_id&gt;\n</code></pre></p>"},{"location":"fulldoc/rules/fastq2sbcd/#1-per-tile-spatial-barcode-maps","title":"(1) Per-Tile Spatial Barcode Maps","text":"<p>Description: The spatial barcode map for each tile is stored in a zipped, tab-separated file. These files map the barcodes to their coordinates within the tile, facilitating easier matching with 2nd-Seq sequences through reverse-complemented barcodes.</p> <p>File Naming Convention:  <code>&lt;lane_id&gt;_&lt;tile_id&gt;.sbcds.sorted.tsv.gz</code></p> <p>File Format: The format of the spatial barcode map is outlined below with an example:</p> <pre><code>AAAAAAAAAAAAGCGACCGGGTAATATATGT 3   2456    1036    35446   1\nAAAAAAGGTACCCGCAGTGCGGACAAACGAA 3   2456    23448   29731   1\nAAAAAGACGAGTAAAAGTGACTGTTAATTAC 3   2456    29794   1799    1\n</code></pre> <ul> <li>Column 1: Spatial barcode sequence (HDMI, typically 32 base pairs).</li> <li>Column 2: Lane ID.</li> <li>Column 3: Tile ID.</li> <li>Column 4: X-coordinate within the tile (local X-coordinate).</li> <li>Column 5: Y-coordinate within the tile (local Y-coordinate).</li> <li>Column 6: Number of mismatching bases from expected pattern</li> </ul>"},{"location":"fulldoc/rules/fastq2sbcd/#2-flow-cell-manifest","title":"(2) Flow Cell Manifest","text":"<p>Description: The manifest file provides summary statistics for each tile within the input FASTQ file, with each tile's statistics presented in a separate row.</p> <p>File Naming Convention: <code>manifest.tsv</code> </p> <p>File Format:</p> <pre><code>id      filepath                        barcodes    matches mismatches  xmin    xmax    ymin    ymax\n3_2456  3_2456.sbcds.sorted.tsv.gz      3460541     3377518 83023       1027    32949   1000    37059\n3_2556  3_2556.sbcds.sorted.tsv.gz      3416413     3334054 82359       1036    32958   1000    37059\n</code></pre> <ul> <li><code>id</code>: The <code>id</code> is composed of <code>&lt;lane_id&gt;_&lt;tile_id&gt;</code>.</li> <li><code>filepath</code>: The file name is the corresponding spatial barcode map.</li> <li><code>barcodes</code>: The number of barcodes in the tile.</li> <li><code>matches</code>: The number of barcodes match to the expected pattern.</li> <li><code>mismatches</code>: The number of barcodes don't match to the expected pattern.</li> <li><code>xmin</code>: The minimum X-coordinate across all barcodes within the tile (i.e., mimimum local X-coordinate).</li> <li><code>xmax</code>: The maximum X-coordinate across all barcodes within the tile (i.e., maximum local X-coordinate).</li> <li><code>ymin</code>: The minimum Y-coordinate across all barcodes within the tile (i.e., mimimum local Y-coordinate).</li> <li><code>ymax</code>: The maximum Y-coordinate across all barcodes within the tile (i.e., maximum local Y-coordinate).</li> </ul>"},{"location":"fulldoc/rules/fastq2sbcd/#output-guidelines","title":"Output Guidelines","text":"<p>For accuracy purposes, it's recommended to examine the <code>manifest.tsv</code> file to verify:</p> <ol> <li>A full lane typically comprises 936 tiles, with each tile having 3 million or more reads;</li> <li>The majority of reads are expected to align with the anticipated HDMI patterns.</li> </ol>"},{"location":"fulldoc/rules/fastq2sbcd/#parameters","title":"Parameters","text":"<p>The following parameter in the job configuration file will be applied in this rule. </p> <pre><code>upstream:\n  fastq2sbcd:\n    format: DraI32 \n</code></pre> <ul> <li>The <code>format</code> Parameter This parameter specifies the HDMI-oligo seed library used. The default setting is DraI32, which corresponds to HDMI32-DraI. Please see details for the seed HDMI-oligo library in the original publication of SeqScope.</li> </ul>"},{"location":"fulldoc/rules/fastq2sbcd/#dependencies","title":"Dependencies","text":"<p>Rule <code>fastq2sbcd</code> operates independently without dependencies on preceding rules. An overview of the rule dependencies are provided in the Workflow Structure.</p>"},{"location":"fulldoc/rules/fastq2sbcd/#code-snippet","title":"Code Snippet","text":"<p>The code for this rule is provided in <code>a01_fastq2sbcd.smk</code>.</p>"},{"location":"fulldoc/rules/historef/","title":"Rule <code>historef</code>","text":""},{"location":"fulldoc/rules/historef/#purpose","title":"Purpose","text":"<p>The goal of <code>historef</code> rule is to match the histology image with the spatial coordinates of the spatial digital gene expression (SGE) matrix. This is achieved by aligning fiducial markers observable in both the histology image and the composite image of \"sbcd\", \"smatch\", and \"sge\" images. The current pipeline allows multiple input histology files.</p>"},{"location":"fulldoc/rules/historef/#input-files","title":"Input Files","text":"<ul> <li> <p>A histology image Th histology image with fiducial markers is required. The <code>historef</code> identifies fiducial marks by detecting the brightness in the input histology image, so it is crucial that fiducial markers are the brightest area in the histology image.</p> </li> <li> <p>The composite image The composite image, which shows \"sbcd\", \"smatch\", and \"sge\" images side-by-side, will also be applied to <code>historef</code>.</p> </li> </ul>"},{"location":"fulldoc/rules/historef/#output-files","title":"Output Files","text":"<p>The rule generates the following output in the specified directory path: <pre><code>&lt;output_directory&gt;/histology/&lt;flowcell_id&gt;/&lt;chip_id&gt;/aligned/&lt;run_id&gt;\n</code></pre></p>"},{"location":"fulldoc/rules/historef/#1-a-referenced-histology-file","title":"(1) A referenced Histology File","text":"<p>Description: The referenced histology file, which is in GeoTIFFformat, allows the coordinate transformation between the SGE matrix and the input histology image.</p> <p>File Naming Convention:</p> <pre><code>&lt;magnification&gt;&lt;flowcell_abbreviation&gt;-&lt;chip_id&gt;-&lt;species&gt;-&lt;figtype&gt;.tif\"\n</code></pre> <ul> <li>The <code>magnification</code> and <code>figtype</code> are derived from the <code>magnification</code> and <code>figtype</code> fields within the <code>histology</code> in the <code>input</code> section of the job configuration file.</li> <li>The <code>flowcell_abbreviation</code> is derived by splitting the <code>flowcell_id</code>, which is sourced from the <code>flowcell</code> field in <code>input</code> section of the job configuration file, by \"-\" and taking the first part.</li> </ul> <p>File Visualization:</p> <p>The image displayed above only serves an initial glimpse into the results but has been substantially reduced in size and is presented in PNG format.</p> <p>For an in-depth examination, access the full-size referenced histology file within the <code>B08Cshallow_20240319_SGE_withHE.tar.gz</code> tarball.</p>"},{"location":"fulldoc/rules/historef/#2-a-re-sized-referenced-histology-file","title":"(2) A Re-sized Referenced Histology File","text":"<p>Description: A TIFF file shares the identical dimensions with both the \"smatch\" image and the \"sge\" image, acilitating the comparison of consistency between the histology file and these images.</p> <p>File Naming Convention:</p> <pre><code>&lt;magnification&gt;&lt;flowcell_abbreviation&gt;-&lt;chip_id&gt;-&lt;species&gt;-&lt;figtype&gt;-fit.tif\"\n</code></pre> <ul> <li>The <code>magnification</code> and <code>figtype</code> are derived from the <code>magnification</code> and <code>figtype</code> fields within the <code>histology</code> section of the job configuration file.</li> <li>The <code>flowcell_abbreviation</code> is derived by splitting the <code>flowcell_id</code>, which is sourced from the <code>flowcell</code> field in <code>input</code> section of the job configuration file, by \"-\" and taking the first part.</li> </ul> <p>File Visualization:</p> <p>The full-size TIFF is provided in the <code>B08Cshallow_20240319_SGE_withHE.tar.gz</code>.</p>"},{"location":"fulldoc/rules/historef/#output-guidelines","title":"Output Guidelines","text":"<p>To verify the accuracy of the alignment, it is recommended to compare the re-sized referenced histology file against the \"smatch\" image and the \"sge\" image, ensuring a precise match with the histology images. A clear visibility of fiducial marks in both images indicates an accurate match with submicrometer resolution upon overlay. If the fiducial marks are insufficiently visible or aligned incorrectly, manual adjustment of the histology images is required.</p>"},{"location":"fulldoc/rules/historef/#parameters","title":"Parameters","text":"<p>The following parameter in the job configuration file will be applied in this rule.</p> <pre><code>histology:\n    min_buffer_size: 1000   \n    max_buffer_size: 2000\n    step_buffer_size: 100\n    raster_channel: 1      \n</code></pre> <ul> <li>The <code>histology</code> Parameters<ul> <li><code>min_buffer_size</code>, <code>max_buffer_size</code> and <code>step_buffer_size</code> will create a list of buffer size help historef to do the alignment. For example, the default <code>min_buffer_size</code>, <code>max_buffer_size</code> and <code>step_buffer_size</code> are 1000, 2000, and 100, respectively, and this will return a buffer size list of 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000.</li> <li><code>raster_channel</code> specifies which channel from the \"sge\" image will used for historef alignment</li> </ul> </li> </ul>"},{"location":"fulldoc/rules/historef/#dependencies","title":"Dependencies","text":"<p>Rule <code>historef</code> commences only after Rule <code>dge2sdge</code> has successfully executed. An overview of the rule dependencies are provided in the Workflow Structure.</p>"},{"location":"fulldoc/rules/historef/#code-snippet","title":"Code Snippet","text":"<p>The code for this rule is provided in b02_historef.smk</p>"},{"location":"fulldoc/rules/sbcd2chip/","title":"Rule <code>sbcd2chip</code>","text":""},{"location":"fulldoc/rules/sbcd2chip/#purpose","title":"Purpose","text":"<p>The <code>sbcd2chip</code> rule is designed to create a spatial barcode map for a chip section of interest. It achieves this by merging the spatial maps of all tiles corresponding to the chip, guided by a spatial barcode layout file.</p>"},{"location":"fulldoc/rules/sbcd2chip/#input-files","title":"Input Files","text":"<ul> <li> <p>Per-Tile Spatial Barcode Maps &amp; Flow Cell Manifest Required inputs are the spatial barcode maps for each tile associated with the chip of interest and the manifest file for the corresponding flow cell. Both inputs are generated by the <code>fastq2sbcd</code> rule.</p> </li> <li> <p>A Spatial Barcode Layout file It is optional to provide a specific spatial barcode layout file for the chip via the job configuration file. If absent, NovaScope will use the spatial barcode layout provided by the NovaScope repository. </p> </li> </ul>"},{"location":"fulldoc/rules/sbcd2chip/#output-files","title":"Output Files","text":"<p>The rule generates the following output in the specified directory path:  <pre><code>&lt;output_directory&gt;/seq1st/&lt;flowcell_id&gt;/nbcds/&lt;seq1st_id&gt;\n</code></pre></p>"},{"location":"fulldoc/rules/sbcd2chip/#1-per-chip-spatial-barcode-map","title":"(1) Per-Chip Spatial Barcode Map","text":"<p>Description: This is a compressed, tab-delimited file mapping barcodes to global spatial coordinates on the chip, with duplicate barcodes removed. Note that only one spatial barcode map is produced for a chip, both lane ID and tile ID are set to <code>1</code>.</p> <p>File Naming Convention: <code>1_1.sbcds.sorted.tsv.gz</code></p> <p>File Format: </p> <pre><code>AAAAAAAAAAAAGCGACCGGGTAATATATGT 1   1   1413111 2277603 1\nAAAAAACATAAGAAAGATCCAAATGACGGTC 1   1   871865  383588  1\nAAAAAAGGTACCCGCAGTGCGGACAAACGAA 1   1   1214343 1498113 1\n</code></pre> <ul> <li>Column 1: Spatial barcode sequence (HDMI, typically 32 base pairs).</li> <li>Column 2: Lane ID, which is defined as <code>1</code>.</li> <li>Column 3: Tile ID, which is defined as <code>1</code>.</li> <li>Column 4: X-coordinate within the chip (global X-coordinate).</li> <li>Column 5: Y-coordinate within the chip (global Y-coordinate).</li> <li>Column 6: Count of occurrences for each spatial barcode.</li> </ul>"},{"location":"fulldoc/rules/sbcd2chip/#2-per-chip-manifest-file","title":"(2) Per-Chip Manifest File","text":"<p>Description: The manifest file offers summary statistics for the chip of interest. </p> <p>File Naming Convention: <code>manifest.tsv</code> </p> <p>File Format:  <pre><code>id   filepath                 barcodes  matches  mismatches  xmin  xmax     ymin  ymax\n1_1  1_1.sbcds.sorted.tsv.gz  5962994   5962994  0           0     1469211  0     2277916\n</code></pre></p> <ul> <li><code>id</code>: The <code>id</code> is composed of <code>&lt;lane_id&gt;_&lt;tile_id&gt;</code>. Given only one spatial barcode map is created for a chip, the ID is designed as <code>1_1</code>.</li> <li><code>filepath</code>: The file name is the corresponding spatial barcode map.</li> <li><code>barcodes</code>: The number of barcodes in the chip.</li> <li><code>matches</code>: The number of barcodes that match to the expected pattern.</li> <li><code>mismatches</code>: The number of barcodes that do not match to the expected pattern.</li> <li><code>xmin</code>: The minimum x-coordinate across all barcodes in the chip (i.e., minimum global X-coordinate).</li> <li><code>xmax</code>: The maximum x-coordinate across all barcodes in the chip (i.e., maximum global X-coordinate).</li> <li><code>ymin</code>: The minimum y-coordinate across all barcodes in the chip (i.e., minimum global Y-coordinate).</li> <li><code>ymax</code>: The maximum y-coordinate across all barcodes in the chip (i.e., maximum global Y-coordinate).</li> </ul>"},{"location":"fulldoc/rules/sbcd2chip/#3-an-sbcd-image","title":"(3) An \"sbcd\" Image","text":"<p>Description: An image to show the distribution of the spatial coordinates of the barcodes, alongside the fiducial marks.</p> <p>File Naming Convention: <code>1_1.sbcds.sorted.png</code> </p> <p>File Visualization:</p>"},{"location":"fulldoc/rules/sbcd2chip/#4-a-summary-for-duplicate-barcodes","title":"(4) A Summary for Duplicate Barcodes","text":"<p>Description:  Each duplicate barcode reports its count and the maximum distance between duplicates, provided it falls within the <code>dup_maxdist</code> threshold.</p> <p>File Naming Convention: <code>dupstats.tsv.gz</code></p>"},{"location":"fulldoc/rules/sbcd2chip/#output-guidelines","title":"Output Guidelines","text":"<p>Recommended review steps: 1. Examine <code>manifest.tsv</code> to ensure there are a sufficient number of matched barcodes, and all mismatched barcodes are removed. 2. Inspect <code>1_1.sbcds.sorted.png</code> to verify that fiducial marks appear empty and align with other fiducial marks both horizontally and vertically.</p>"},{"location":"fulldoc/rules/sbcd2chip/#parameters","title":"Parameters","text":"<p>The following parameter in the job configuration file will be applied in this rule. </p> <pre><code>upstream:\n  sbcd2chip:\n    gap_row: 0.0517\n    gap_col: 0.0048\n    dup_maxnum: 1\n    dup_maxdist: 1\n  visualization:\n    drawxy:\n      coord_per_pixel: 1000\n      intensity_per_obs: 50\n      icol_x: 3\n      icol_y: 4\n</code></pre> <ul> <li> <p>The <code>sbcd2chip</code> Parameters     Those parameters are used to pass values to the <code>combine_sbcds</code> function in spatula. Below, for each parameter, the corresponding parameters in spatula, description, and the default value in NovaScope are provided.</p> Parameter <code>spatula</code> parameter Description Default Value <code>gap_row</code> <code>--rowgap</code> Extra gap between rows, based on tile height, for spatial adjustment. 0.0517 <code>gap_col</code> <code>--colgap</code> Additional gap between columns, based on tile width, for spatial adjustment. 0.0048 <code>dup_maxnum</code> <code>--max-dup</code> Allowable duplicate count for each barcode, within <code>dup_maxdist</code>. 1 <code>dup_maxdist</code> <code>--max-dup-dist-nm</code> Max distance for duplicates, in nanometers. 1000 </li> <li> <p>The <code>visualization</code> Parameters     Those are parameters for the <code>draw-xy</code> function in spatula.</p> Parameter <code>spatula</code> parameter Description Default Value <code>coord_per_pixel</code> <code>--coord-per-pixel</code> Coordinates per pixel, as a divisor of input coordinate. 1000 <code>intensity_per_obs</code> <code>--intensity-per-obs</code> Intensity of points per pixel, max 255. 50 <code>icol_x</code> <code>--icol-x</code> (0-based) index of X coordinate in input TSV. 3 <code>icol_y</code> <code>--icol-y</code> (0-based) index of Y coordinate in input TSV. 4 </li> </ul>"},{"location":"fulldoc/rules/sbcd2chip/#dependencies","title":"Dependencies","text":"<p>Rule <code>sbcd2chip</code> is designed to process data that Rule <code>fastq2sbcd</code> generates. Therefore, if the input files are not available, <code>sbcd2chip</code> depends on the successful execution of <code>fastq2sbcd</code> to function correctly. An overview of the rule dependencies are provided in the Workflow Structure.</p>"},{"location":"fulldoc/rules/sbcd2chip/#code-snippet","title":"Code Snippet","text":"<p>The code for this rule is provided in a02_sbcd2chip.smk</p>"},{"location":"fulldoc/rules/sdge2sdgeAR/","title":"Rule <code>sdge2sdgeAR</code>:","text":""},{"location":"fulldoc/rules/sdge2sdgeAR/#purpose","title":"Purpose","text":"<p>The <code>dge2sdgeAR</code> rule is designed to facilitate the utilization of the transcript-indexed spatial digital gene expression (SGE) matrix in NovaScope's reformatting features. The main function of Rule <code>dge2sdgeAR</code> is creating a link from the original SGE located at <code>&lt;output_directory&gt;/align/&lt;flowcell_id&gt;/&lt;chip_id&gt;/&lt;run_id&gt;/sge</code> to the directory <code>&lt;output_directory&gt;/analysis/&lt;run_id&gt;/&lt;unit_id&gt;/sgeAR</code>. </p> <p>The use of the <code>sgeAR</code> subfolder instead of the direct <code>sge</code> directory allows for any necessary manual preprocessing of the SGE before reformatting. For more details, see The <code>sgeAR</code> Subfolder and Manual Preprocess.</p>"},{"location":"fulldoc/rules/sdge2sdgeAR/#input-files","title":"Input Files","text":"<ul> <li>Spatial Digital Gene Expression (SGE) Matrix and relevant files Required input files include a SGE, its related visualizations, and the meta file for X Y coordinates, which are created by Rule <code>dge2sdge</code>.</li> </ul>"},{"location":"fulldoc/rules/sdge2sdgeAR/#output-files","title":"Output Files","text":"<p>The rule generates the following output in the specified directory path: <pre><code>&lt;output_directory&gt;/analysis/&lt;run_id&gt;/&lt;unit_id&gt;/sgeAR\n</code></pre></p> <p>These output files are identical to those produced by the <code>dge2sdge</code> rule, as <code>dge2sdgeAR</code> does not modify the files but merely relocates them for easier access and further processing.</p>"},{"location":"fulldoc/rules/sdge2sdgeAR/#output-guidelines","title":"Output Guidelines","text":"<p>No action is required.</p>"},{"location":"fulldoc/rules/sdge2sdgeAR/#parameters","title":"Parameters","text":"<p>No additional parameter is applied in this rule.</p>"},{"location":"fulldoc/rules/sdge2sdgeAR/#dependencies","title":"Dependencies","text":"<p>Given the input from Rule <code>dge2sdge</code> serve as the input for <code>sdge2sdgeAR</code>, Rule <code>sdge2sdgeAR</code> can only execute if the input SGE is available or the dependent rules have successfully completed their operations. See an overview of the rule dependencies in the Workflow Structure.</p>"},{"location":"fulldoc/rules/sdge2sdgeAR/#code-snippet","title":"Code Snippet","text":"<p>The code for this rule is provided in <code>c01_sdge2sdgeAR.smk</code>.</p>"},{"location":"fulldoc/rules/sdgeAR_featurefilter/","title":"Rule <code>sdgeAR_featurefilter</code>:","text":""},{"location":"fulldoc/rules/sdgeAR_featurefilter/#purpose","title":"Purpose","text":"<p>The <code>sdgeAR_featurefilter</code> filters the spatial digital gene expression (SGE) matrix by gene types, gene names, or the number of UMIs per gene.</p>"},{"location":"fulldoc/rules/sdgeAR_featurefilter/#input-files","title":"Input Files","text":"<ul> <li>A Tab-delimited Feature File Required the feature file from Rule <code>sdgeAR_reformat</code>.</li> </ul>"},{"location":"fulldoc/rules/sdgeAR_featurefilter/#output-files","title":"Output Files","text":"<p>The rule generates the following output in the specified directory path: <pre><code>&lt;output_directory&gt;/analysis/&lt;run_id&gt;/&lt;unit_id&gt;/preprocess\n</code></pre></p>"},{"location":"fulldoc/rules/sdgeAR_featurefilter/#1-a-tab-delimited-clean-feature-file","title":"(1) A Tab-delimited Clean Feature File","text":"<p>Description: A clean feature file (<code>*.feature.clean.tsv.gz</code>) that counts UMIs for features aftering gene-filtering.</p> <p>File Naming Convention: <pre><code>&lt;unit_id&gt;.feature.clean.tsv.gz\n</code></pre></p> <p>File Format: Those two feature files share the same format:</p> <pre><code>gene_id             gene           gn    gt    spl  unspl  ambig\nENSMUSG00000051285  Pcmtd1         1396  321   284  21     2\nENSMUSG00000057363  Uxs1           144   147   143  2      0\nENSMUSG00000097648  9330185C12Rik  1     55    1    8      0\n</code></pre> <ul> <li><code>gene_id</code>: Gene Ensemble ID</li> <li><code>gene</code>: Gene symbol</li> <li><code>gn</code>: the count per gene per barcode for Gene</li> <li><code>gt</code>: the count per gene per barcode for GeneFull</li> <li><code>spl</code>: the count per gene per barcode for Spliced</li> <li><code>unspl</code>: the count per gene per barcode for Unspliced</li> <li><code>ambig</code>: the count per gene per barcode for Ambiguous</li> </ul>"},{"location":"fulldoc/rules/sdgeAR_featurefilter/#output-guidelines","title":"Output Guidelines","text":"<p>No action is required.</p>"},{"location":"fulldoc/rules/sdgeAR_featurefilter/#parameters","title":"Parameters","text":"<pre><code>downstream:               \n gene_filter:                                 \n   keep_gene_type: \"protein_coding|lncRNA\"    \n   rm_gene_regex: \"^Gm\\\\d+|^mt-|^MT-\"         \n   min_ct_per_feature: 50                     \n</code></pre> <ul> <li> <p>The <code>keep_gene_type</code> Parameter Specifies the types of genes to retain during gene filtering. </p> </li> <li> <p>The <code>rm_gene_regex</code> Parameter Defines the types of genes to be excluded during gene filtering. </p> </li> <li> <p>The <code>min_ct_per_feature</code> Parameter Defines the minimal UMI count for genes. Genes of which number of UMI is smaller than this cutoff will be removed.</p> </li> </ul> <p>Info</p> <p>It is important to note that both <code>keep_gene_type</code> and <code>rm_gene_regex</code> parameters utilizes regular expressions.</p>"},{"location":"fulldoc/rules/sdgeAR_featurefilter/#dependencies","title":"Dependencies","text":"<p>Given <code>sdgeAR_featurefilter</code> requires input from Rule <code>sdgeAR_reformat</code>, Rule <code>sdgeAR_featurefilter</code> can only execute after <code>sdgeAR_reformat</code> and its prerequisite rules have successfully completed their operations. See an overview of the rule dependencies in the Workflow Structure.</p>"},{"location":"fulldoc/rules/sdgeAR_featurefilter/#code-snippet","title":"Code Snippet","text":"<p>The code for this rule is provided in <code>c03_sdgeAR_featurefilter.smk</code>.</p>"},{"location":"fulldoc/rules/sdgeAR_minmax/","title":"Rule <code>sdgeAR_minmax</code>:","text":""},{"location":"fulldoc/rules/sdgeAR_minmax/#purpose","title":"Purpose","text":"<p>Create a meta file containing the X and Y coordinates for a raw SGE matrix generated by Rule <code>sdgeAR_reformat</code>. For a filtered SGE matrix, this meta file will be produced by Rule <code>sdgeAR_polygonfilter</code> and is likely to be used in downstream analysis. Therefore, this rule ensures that a coordinate meta file is available for the raw SGE matrix.</p>"},{"location":"fulldoc/rules/sdgeAR_minmax/#input-files","title":"Input Files","text":"<ul> <li>A SGE in FICTURE-compatible Format A transcript-indexed SGE in the FICTURE format, which is generated by Rule <code>sdgeAR_reformat</code>.</li> </ul>"},{"location":"fulldoc/rules/sdgeAR_minmax/#output-files","title":"Output Files","text":"<p>The rule generates the following output in the specified directory path: <pre><code>&lt;output_directory&gt;/analysis/&lt;run_id&gt;/&lt;unit_id&gt;/preprocess\n</code></pre></p>"},{"location":"fulldoc/rules/sdgeAR_minmax/#1-a-metadata-file-for-x-y-coordinates","title":"(1) A Metadata File for X Y Coordinates","text":"<p>Description: This file contains the minimum and maximum X Y coordinates for the raw SGE matrix.</p> <p>File Naming Convention: <pre><code>&lt;unit_id&gt;.&lt;solo_feature&gt;.raw.coordinate_minmax.tsv\n</code></pre> * <code>&lt;solo_feature&gt;</code>: Genomic feature.</p> <p>File Format: <pre><code>xmin    -27.973391144511698\nxmax    8699.068916753664\nymin    -26.25\nymax    5144.932078838597\n</code></pre> - <code>xmin</code>: The minimum x-coordinate in micrometers across all barcodes in the raw SGE matrix. - <code>xmax</code>: The maximum x-coordinate in micrometers across all barcodes in the raw SGE matrix. - <code>ymin</code>: The minimum y-coordinate in micrometers across all barcodes in the raw SGE matrix. - <code>ymax</code>: The maximum y-coordinate in micrometers across all barcodes in the raw SGE matrix.</p>"},{"location":"fulldoc/rules/sdgeAR_minmax/#output-guidelines","title":"Output Guidelines","text":"<p>The output file could be used as the input for FICTURE.</p>"},{"location":"fulldoc/rules/sdgeAR_minmax/#parameters","title":"Parameters","text":"<p>No additional parameter is applied in this rule.</p>"},{"location":"fulldoc/rules/sdgeAR_minmax/#dependencies","title":"Dependencies","text":"<p>Rule <code>sdgeAR_minmax</code> executes only after <code>sdge2sdgeAR</code> and its prerequisites are completed. See the Workflow Structure for dependencies.</p>"},{"location":"fulldoc/rules/sdgeAR_minmax/#code-snippet","title":"Code Snippet","text":"<p>The code for this rule is provided in <code>c03_sdgeAR_minmax.smk</code>.</p>"},{"location":"fulldoc/rules/sdgeAR_polygonfilter/","title":"Rule <code>sdgeAR_polygonfilter</code>:","text":""},{"location":"fulldoc/rules/sdgeAR_polygonfilter/#purpose","title":"Purpose","text":"<p>The <code>sdgeAR_polygonfilter</code> filters the transcript-indexed spatial digital gene expression (SGE) matrix by UMI density in polygons.</p>"},{"location":"fulldoc/rules/sdgeAR_polygonfilter/#input-files","title":"Input Files","text":"<ul> <li> <p>A SGE in FICTURE-compatible Format A transcript-indexed SGE in the FICTURE format, which is generated by Rule <code>sdgeAR_reformat</code>.</p> </li> <li> <p>A Tab-delimited Clean Feature File Required the clean feature file from Rule <code>sdgeAR_featurefilter</code>.</p> </li> <li> <p>A Metadata File for X Y Coordinates A meta file for the minimum and maximum X Y coordinates to determine the major axis. This will be generated by Rule <code>dge2sdgeAR</code> or by the user manually.</p> </li> </ul>"},{"location":"fulldoc/rules/sdgeAR_polygonfilter/#output-files","title":"Output Files","text":"<p>The rule generates the following output in the specified directory path: <pre><code>&lt;output_directory&gt;/analysis/&lt;run_id&gt;/&lt;unit_id&gt;/preprocess\n</code></pre></p>"},{"location":"fulldoc/rules/sdgeAR_polygonfilter/#1-a-filtered-sge-matrix-in-ficture-compatible-format","title":"(1) A Filtered SGE Matrix in FICTURE-compatible Format","text":"<p>Description: A filtered SGE matrix in FICTURE-compatible TSV format.</p> <p>File Naming Convention:  <pre><code>&lt;unit_id&gt;.&lt;solo_feature&gt;.filtered.transcripts.tsv.gz\n</code></pre> * <code>&lt;solo_feature&gt;</code>: Genomic feature.</p> <p>File Format: <pre><code>#lane  tile  X        Y        gene_id             gene      gn  gt  spl  unspl  ambig\n1      1     3786011  3653012  ENSMUSG00000107002  Ncbp2as2  1   1   1    0      0\n1      1     3786011  3660560  ENSMUSG00000020743  Mif4gd    1   1   1    0      0\n1      1     3786533  3650195  ENSMUSG00000039323  Igfbp2    1   1   1    0      0\n</code></pre></p> <ul> <li><code>#lane</code>: lane ID</li> <li><code>tile</code>: tile ID</li> <li><code>X</code>: X-coordinate</li> <li><code>Y</code>: Y-coordinate</li> <li><code>gene_id</code>: Gene Ensemble ID</li> <li><code>gene</code>: Gene symbol</li> <li><code>gn</code>: the count per gene per barcode for Gene</li> <li><code>gt</code>: the count per gene per barcode for GeneFull</li> <li><code>spl</code>: the count per gene per barcode for Spliced</li> <li><code>unspl</code>: the count per gene per barcode for Unspliced</li> <li><code>ambig</code>: the count per gene per barcode for Ambiguous</li> </ul>"},{"location":"fulldoc/rules/sdgeAR_polygonfilter/#2-two-filtered-tab-delimited-feature-files","title":"(2) Two Filtered Tab-delimited Feature Files","text":"<p>Description: Two feature files representing genes filtered by the strict boundary and by the lenient boundary, respectively.</p> <p>File Naming Convention: <pre><code>&lt;unit_id&gt;.&lt;solo_feature&gt;.filtered.feature.lenient.tsv.gz \n&lt;unit_id&gt;.&lt;solo_feature&gt;.filtered.feature.strict.tsv.gz \n</code></pre> * <code>&lt;solo_feature&gt;</code>: Genomic feature.</p> <p>File Format: Those two feature files share the same format:</p> <pre><code>gene            gene_id             gn      gt      spl     unspl  ambig\n0610005C13Rik   ENSMUSG00000109644  3967    3979    3530    8      432\n0610009B22Rik   ENSMUSG00000007777  208     262     208     0      0\n0610030E20Rik   ENSMUSG00000058706  342     371     339     0      2\n</code></pre> <ul> <li><code>gene_id</code>: Gene Ensemble ID</li> <li><code>gene</code>: Gene symbol</li> <li><code>gn</code>: the count per gene per barcode for Gene</li> <li><code>gt</code>: the count per gene per barcode for GeneFull</li> <li><code>spl</code>: the count per gene per barcode for Spliced</li> <li><code>unspl</code>: the count per gene per barcode for Unspliced</li> <li><code>ambig</code>: the count per gene per barcode for Ambiguous</li> </ul>"},{"location":"fulldoc/rules/sdgeAR_polygonfilter/#3-two-boundary-json-files","title":"(3) Two Boundary JSON Files","text":"<p>Description: One strict boundary file and one lenient boundary file. Both are demonstrated by coordinates in JSON files.</p> <p>File Naming Convention: <pre><code>&lt;unit_id&gt;.&lt;solo_feature&gt;.filtered.boundary.lenient.geojson \n&lt;unit_id&gt;.&lt;solo_feature&gt;.filtered.boundary.strict.geojson\n</code></pre> * <code>&lt;solo_feature&gt;</code>: Genomic feature.</p> <p>File Format: See details for JSON files at: https://en.wikipedia.org/wiki/JSON.</p>"},{"location":"fulldoc/rules/sdgeAR_polygonfilter/#4-a-metadata-file-for-x-y-coordinates","title":"(4) A Metadata File for X Y Coordinates","text":"<p>Description: This file contains the minimum and maximum X Y coordinates for the filtered SGE matrix.</p> <p>File Naming Convention: <pre><code>&lt;unit_id&gt;.&lt;solo_feature&gt;.filtered.coordinate_minmax.tsv\n</code></pre> * <code>&lt;solo_feature&gt;</code>: Genomic feature.</p> <p>File Format: <pre><code>xmin    -27.973391144511698\nxmax    8699.068916753664\nymin    -26.25\nymax    5144.932078838597\n</code></pre> - <code>xmin</code>: The minimum x-coordinate in micrometers across all barcodes in the filtered SGE matrix. - <code>xmax</code>: The maximum x-coordinate in micrometers across all barcodes in the filtered SGE matrix. - <code>ymin</code>: The minimum y-coordinate in micrometers across all barcodes in the filtered SGE matrix. - <code>ymax</code>: The maximum y-coordinate in micrometers across all barcodes in the filtered SGE matrix.</p>"},{"location":"fulldoc/rules/sdgeAR_polygonfilter/#output-guidelines","title":"Output Guidelines","text":"<p>The output file could be used as the input for FICTURE.</p>"},{"location":"fulldoc/rules/sdgeAR_polygonfilter/#parameters","title":"Parameters","text":"<pre><code>downstream:               \n polygon_density_filter:          \n   radius: 15               \n   hex_n_move: 1            \n   polygon_min_size: 500    \n   quartile: 2\n</code></pre> <ul> <li> <p>The <code>radius</code> Parameter The radius refers to the circumradius (the radius of the circumscribed circle around the polygon). The radius will be used to calcualte the polygon diameter as well as the polygon area.</p> </li> <li> <p>The <code>hex_n_move</code> Parameter Define n moves when collapse to polygon. When <code>hex_n_move</code> is 1, non-overlapping polygons will be applied. Otherwise, use overlapping polygons.</p> </li> <li> <p>The <code>polygon_min_size</code> Parameter If provided, remove small and isolated polygons (squared um)</p> </li> <li> <p>The <code>quartile</code> Parameter Specify which quartiles of the data should be considered for polygon-filtering. The <code>quartile</code> will be used to define the strict density cutoff. The <code>quartile</code> have four options: 0, 1, 2, 3, which corresponds to minimal, first quartile, median, and third quartile.</p> </li> </ul>"},{"location":"fulldoc/rules/sdgeAR_polygonfilter/#dependencies","title":"Dependencies","text":"<p>Rule <code>sdgeAR_polygonfilter</code> executes only after <code>sdge2sdgeAR</code>, <code>sdgeAR_reformat</code>, <code>sdgeAR_featurefilter</code>, and their prerequisites are completed. See the Workflow Structure for dependencies.</p>"},{"location":"fulldoc/rules/sdgeAR_polygonfilter/#code-snippet","title":"Code Snippet","text":"<p>The code for this rule is provided in <code>c03_sdgeAR_polygonfilter.smk</code>.</p>"},{"location":"fulldoc/rules/sdgeAR_reformat/","title":"Rule <code>sdgeAR_reformat</code>:","text":""},{"location":"fulldoc/rules/sdgeAR_reformat/#purpose","title":"Purpose","text":"<p>Reformat the spatial digital gene expression (SGE) matrix from the 10x Genomics format to a FICTURE-compatible TSV format.</p>"},{"location":"fulldoc/rules/sdgeAR_reformat/#input-files","title":"Input Files","text":"<ul> <li>Spatial Digital Gene Expression (SGE) Matrix and its Metadata File for Coordinates Required input files include a SGE matrix and its meta file for X Y coordinates. Those files are required to be stored in the <code>sgeAR</code> subfolder in the <code>analysis</code> directory. This could be generated by Rule <code>sdge2sdgeAR</code> or manually prepared by the users.</li> </ul>"},{"location":"fulldoc/rules/sdgeAR_reformat/#output-files","title":"Output Files","text":"<p>The rule generates the following output in the specified directory path: <pre><code>&lt;output_directory&gt;/analysis/&lt;run_id&gt;/&lt;unit_id&gt;/preprocess\n</code></pre></p>"},{"location":"fulldoc/rules/sdgeAR_reformat/#1-an-sge-in-a-ficture-compatible-format","title":"(1) An SGE in a FICTURE-compatible Format","text":"<p>Description: A transcript-indexed SGE in the FICTURE format is generated, which contains all informations including the barcode information, features information, and count for each genomic feature. </p> <p>File Naming Convention:  <pre><code>&lt;unit_id&gt;.transcripts.tsv.gz\n</code></pre></p> <p>File Format: <pre><code>#lane  tile  X     Y        gene_id             gene   gn  gt  spl  unspl  ambig\n1      1     5982  1441004  ENSMUSG00000029368  Alb    1   1   1    0      0\n1      1     8173  6873084  ENSMUSG00000053907  Mat2a  1   1   0    0      0\n1      1     8729  6840669  ENSMUSG00000037071  Scd1   1   1   1    0      0\n</code></pre></p> <ul> <li><code>#lane</code>: lane ID</li> <li><code>tile</code>: tile ID</li> <li><code>X</code>: X-coordinate</li> <li><code>Y</code>: Y-coordinate</li> <li><code>gene_id</code>: Gene Ensemble ID</li> <li><code>gene</code>: Gene symbol</li> <li><code>gn</code>: the count per gene per barcode for Gene</li> <li><code>gt</code>: the count per gene per barcode for GeneFull</li> <li><code>spl</code>: the count per gene per barcode for Spliced</li> <li><code>unspl</code>: the count per gene per barcode for Unspliced</li> <li><code>ambig</code>: the count per gene per barcode for Ambiguous</li> </ul>"},{"location":"fulldoc/rules/sdgeAR_reformat/#2-a-tab-delimited-feature-file","title":"(2) A Tab-delimited Feature File","text":"<p>Description: This include a feature file (<code>*.feature.tsv.gz</code>) that counts UMIs for each gene.</p> <p>File Naming Convention: <pre><code>&lt;unit_id&gt;.feature.tsv.gz \n</code></pre></p> <p>File Format:</p> <pre><code>gene_id             gene     gn    gt   spl  unspl  ambig\nENSMUSG00000100764  Gm29155  3     3    1    0      2\nENSMUSG00000100635  Gm29157  0     0    0    0      0\nENSMUSG00000100480  Gm29156  0     0    0    0      0\n</code></pre> <ul> <li><code>gene_id</code>: Gene Ensemble ID</li> <li><code>gene</code>: Gene symbol</li> <li><code>gn</code>: the count per gene per barcode for Gene</li> <li><code>gt</code>: the count per gene per barcode for GeneFull</li> <li><code>spl</code>: the count per gene per barcode for Spliced</li> <li><code>unspl</code>: the count per gene per barcode for Unspliced</li> <li><code>ambig</code>: the count per gene per barcode for Ambiguous</li> </ul>"},{"location":"fulldoc/rules/sdgeAR_reformat/#output-guidelines","title":"Output Guidelines","text":"<p>The output file could be used as the input for FICTURE.</p>"},{"location":"fulldoc/rules/sdgeAR_reformat/#parameters","title":"Parameters","text":"<p>No additional parameter is applied in this rule.</p>"},{"location":"fulldoc/rules/sdgeAR_reformat/#dependencies","title":"Dependencies","text":"<p>Rule <code>sdgeAR_reformat</code> executes only after <code>sdge2sdgeAR</code> and its prerequisites are completed. See the Workflow Structure for dependencies.</p>"},{"location":"fulldoc/rules/sdgeAR_reformat/#code-snippet","title":"Code Snippet","text":"<p>The code for this rule is provided in <code>c02_sdgeAR_reformat.smk</code>.</p>"},{"location":"fulldoc/rules/sdgeAR_segment_10x/","title":"Rule <code>sdgeAR_segment_10x</code>:","text":""},{"location":"fulldoc/rules/sdgeAR_segment_10x/#purpose","title":"Purpose","text":"<p>The <code>sdgeAR_segment_10x</code> transforms transcript-indexed spatial digitial gene expression (SGE) matrix into hexagon-indexed SGE matrix by aggregating pixels into hexagonal grids, the size of which is determined by the user. This hexagon-indexed SGE matrix will be in 10x genomics format.</p>"},{"location":"fulldoc/rules/sdgeAR_segment_10x/#input-files","title":"Input Files","text":"<ul> <li> <p>A SGE matrix in a FICTURE-compatible Format and Correspondings Files The necessary input files include a FICTURE-compatible SGE matrix and its corresponding meta file for X and Y coordinates. If the user requests  filtered hexagon-indexed SGE matrix (i.e., <code>quality_control</code> field in the job configuration file is <code>TRUE</code>), this rule uses the filtered SGE matrix and its meta file for coordinates from Rule <code>sdgeAR_polygonfilter</code>. Otherwise, it uses the raw SGE matrix created by Rule <code>sdgeAR_reformat</code> and its meta file for coordinates from Rule <code>sdgeAR_minmax</code>. </p> </li> <li> <p>(Optional) A Strict Boundary GEOJSON File When segmenting a filtered SGE matrix, the strict boundary GEOJSON file from Rule <code>sdgeAR_polygonfilter</code> will be applied.</p> </li> </ul>"},{"location":"fulldoc/rules/sdgeAR_segment_10x/#output-files","title":"Output Files","text":"<p>The rule generates the following output in the specified directory path: <pre><code>&lt;output_directory&gt;/analysis/&lt;run_id&gt;/&lt;unit_id&gt;/segment/gn.&lt;sge_qc&gt;.d_&lt;hexagon_width&gt;/10x\n</code></pre> * <code>&lt;sge_qc&gt;</code> stands for whether gene-filtering and polygon-filtering have been applied to the SGE matrix. For filtered SGE, <code>&lt;sge_qc&gt;</code> is set to <code>filtered</code>. Otherwise, <code>&lt;sge_qc&gt;</code> is <code>raw</code>. * <code>&lt;hexagon_width&gt;</code> represents the hexagon size.</p>"},{"location":"fulldoc/rules/sdgeAR_segment_10x/#1-hexagon-indexed-sge-in-10x-genomics-format","title":"(1) hexagon-indexed SGE in 10x Genomics Format","text":"<p>Description: This output consists of an SGE formatted by segmenting pixels into hexagonal units. The size of the hexagons is defined by the user. The format of this SGE conforms to the 10x Genomics standard.</p> <p>File Naming Convention:  <pre><code>barcodes.tsv.gz\nfeatures.tsv.gz\nmatrix.mtx.gz\n</code></pre></p> <p>File Format:</p> <p>Warning</p> <p>The <code>barcodes.tsv.gz</code> and <code>features.tsv.gz</code> in the hexagon-indexed SGE is a bit different from those in the transcript-indexed SGE illustrated in Rule <code>dge2sdge</code>.</p> <ul> <li> <p><code>barcodes.tsv.gz</code>: <pre><code>1_0.0_3059096.64_1620124.64_11\n2_0.0_3727394.36_3208789.64_11\n3_0.0_4140308.56_2215259.44_17\n</code></pre></p> <ul> <li>Column 1: hexagon IDs</li> </ul> </li> <li> <p><code>features.tsv.gz</code>: <pre><code>ENSMUSG00000029368  Alb     Gene Expression\nENSMUSG00000002985  Apoe      Gene Expression\nENSMUSG00000078672  Mup20   Gene Expression\n</code></pre></p> <ul> <li>Column 1: Gene Ensemble ID</li> <li>Column 2: Gene symbol</li> <li>Column 3: Gene info</li> </ul> </li> <li> <p><code>matrix.mtx.gz</code>: <pre><code>%%MatrixMarket matrix coordinate integer general\n%\n33951 79179 11120678\n826 1 1\n13 1 1\n3935 1 1\n</code></pre></p> <ul> <li><code>Header</code>: Initial lines form the header, declaring the matrix's adherence to the Market Matrix (MTX) format, outlining its traits. This may include comments (lines beginning with <code>%</code>) for extra metadata, all marked by a \u201c%\u201d.</li> <li><code>Dimensions</code>: Following the header, the first line details the matrix dimensions: the count of rows (features), columns (barcodes), and non-zero entries.</li> <li><code>Data Entries</code>: Post-dimensions, subsequent lines enumerate non-zero entries in seven columns: row index (feature index), column index (barcode index), and five values (expression levels) corresponds to Gene, GeneFull, Spliced, Unspliced, and Ambiguous.</li> </ul> </li> </ul>"},{"location":"fulldoc/rules/sdgeAR_segment_10x/#output-guidelines","title":"Output Guidelines","text":"<p>The output file can serve as input for tools that require hexagon-indexed SGE in the 10x genomics format, such as Seurat.</p>"},{"location":"fulldoc/rules/sdgeAR_segment_10x/#parameters","title":"Parameters","text":"<pre><code>downstream:\n  mu_scale: 1000        \n segment:\n   hex_n_move: 1                              ## specify the sliding step in segmentation\n   precision: 2                               ## specify the precision parameter for segmentation                   \n   10x:                                       ## specify the parameters for creating hexagon-indexed SGE in 10x genomics format    \n     min_pixel_per_unit: 10                   ## specify a minimum UMI count of hexagons\n     char:                                    ## specify the characteristics for hexagon segmentation, including genomic feature, hexagon size and SGE filtering\n       - solo_feature: gn                     ## genomic feature\n         hexagon_width: 18                    ## hexagonal grid width\n         quality_control: FALSE               ## if both gene-filtering and polygon-filtering should be applied\n     # - ...                                  ## if more than 1 set of hexagon is needed ```\n</code></pre> <ul> <li> <p>The <code>mu_scale</code> Parameter   Specify the coordinate-to-micron translation for hexagons. By default, the spatial digital gene expression (SGE) matrix is considered to be in nanometers.</p> </li> <li> <p>The <code>segment</code> Field</p> </li> <li>The <code>hex_n_move</code> Parameter     Specify the sliding steps. When <code>hex_n_move</code> is set to 1, non-overlapping hexagon-indexed SGE will be created.</li> <li>The <code>precision</code> Parameter     Define the number of digits to store spatial location (in microns, 0 for integer).</li> <li>The <code>10x</code> Parameter<ul> <li>The <code>min_pixel_per_unit</code> Parameter   Set a minimum UMI count for output hexagons.</li> <li>The <code>char</code> Parameter   Specify the characteristics for the hexagons, including the genomic feature to create hexagons (<code>solo_feature</code>), the size of the hexagonal grid (<code>hexagon_width</code>), and whether gene-filtering and polygon-filtering should be applied (<code>quality_control</code>). This allows for multiple sets of parameters.</li> </ul> </li> </ul>"},{"location":"fulldoc/rules/sdgeAR_segment_10x/#dependencies","title":"Dependencies","text":"<p>When <code>quality_control</code> is enabled, Rule <code>sdgeAR_segment_10x</code> can only be executed after the completion of Rule <code>sdge2sdgeAR</code> and <code>sdgeAR_polygonfilter</code> along with their prerequisite rules. Otherwise, Rule <code>sdgeAR_segment_10x</code> can only be executed after the completion of <code>sdge2sdgeAR</code>, <code>sdgeAR_polygonfilter</code>, <code>sdgeAR_minmax</code>, and their prerequisite rules.</p> <p>See an overview of the rule dependencies in the Workflow Structure.</p>"},{"location":"fulldoc/rules/sdgeAR_segment_10x/#code-snippet","title":"Code Snippet","text":"<p>The code for this rule is provided in <code>c04_sdgeAR_segment_10x.smk</code>.</p>"},{"location":"fulldoc/rules/sdgeAR_segment_ficture/","title":"Rule <code>sdgeAR_segment_ficture</code>:","text":""},{"location":"fulldoc/rules/sdgeAR_segment_ficture/#purpose","title":"Purpose","text":"<p>The <code>sdgeAR_segment_ficture</code> transforms transcript-indexed SGEs into hexagon-indexed SGEs by aggregating pixels into hexagonal grids, the size of which is determined by the user. This hexagon-indexed SGEs will be in a TSV format that is compatible for FICTURE.</p>"},{"location":"fulldoc/rules/sdgeAR_segment_ficture/#input-files","title":"Input Files","text":"<ul> <li> <p>A SGE matrix in a FICTURE-compatible Format and Correspondings Files The necessary input files include a FICTURE-compatible SGE matrix and its corresponding meta file for X and Y coordinates. If the user requests  filtered hexagon-indexed SGE matrix (i.e., <code>quality_control</code> field in the job configuration file is <code>TRUE</code>), this rule uses the filtered SGE matrix and its meta file for coordinates from Rule <code>sdgeAR_polygonfilter</code>. Otherwise, it uses the raw SGE matrix created by Rule <code>sdgeAR_reformat</code> and its meta file for coordinates from Rule <code>sdgeAR_minmax</code>. </p> </li> <li> <p>(Optional) A Strict Boundary GEOJSON File When segmenting a filtered SGE matrix, the strict boundary GEOJSON file from Rule <code>sdgeAR_polygonfilter</code> will be applied.</p> </li> </ul>"},{"location":"fulldoc/rules/sdgeAR_segment_ficture/#output-files","title":"Output Files","text":"<p>The rule generates the following output in the specified directory path: <pre><code>&lt;output_directory&gt;/analysis/&lt;run_id&gt;/&lt;unit_id&gt;/segment/gn.&lt;sge_qc&gt;.d_&lt;hexagon_width&gt;/10x\n</code></pre> * <code>&lt;sge_qc&gt;</code> stands for whether gene-filtering and polygon-filtering have been applied to the SGE matrix. For filtered SGE, <code>&lt;sge_qc&gt;</code> is set to <code>filtered</code>. Otherwise, <code>&lt;sge_qc&gt;</code> is <code>raw</code>. * <code>&lt;hexagon_width&gt;</code> represents the hexagon size.</p>"},{"location":"fulldoc/rules/sdgeAR_segment_ficture/#1-hexagon-indexed-sge","title":"(1) hexagon-indexed SGE","text":"<p>Description: This output consists of an SGE formatted by segmenting pixels into hexagonal units. The size of the hexagons is defined by the user. The format of this SGE is compatible to FICTURE.</p> <p>File Naming Convention:  <pre><code>&lt;unit_id&gt;.&lt;solo_feature&gt;.&lt;sge_qc&gt;.d_&lt;hexagon_width&gt;.hexagon.tsv.gz\n</code></pre></p> <p>File Format: <pre><code>random_index        X        Y        gene           gn  gt  spl  unspl  ambig\n000000883847207954  6066.00  3180.05  1600014C10Rik  1   1   1    0      0\n000000883847207954  6066.00  3180.05  Abcb11         1   1   1    0      0\n000000883847207954  6066.00  3180.05  Acaa2          1   1   1    0      0\n</code></pre></p> <ul> <li><code>random_index</code>: Hexagon IDs.</li> <li><code>X</code>: X-coordinates.</li> <li><code>Y</code>: Y-coordinates.</li> <li><code>gene</code>: Gene names.</li> <li><code>gn</code>:  The number of UMI counts for Gene per hexagon.</li> <li><code>gt</code>:  The number of UMI counts for GeneFull per hexagon.</li> <li><code>spl</code>:  The number of UMI counts for Spliced per hexagon.</li> <li><code>unspl</code>:  The number of UMI counts for Unspliced per hexagon.</li> <li><code>ambig</code>:  The number of UMI counts for Ambiguous per hexagon.</li> </ul>"},{"location":"fulldoc/rules/sdgeAR_segment_ficture/#output-guidelines","title":"Output Guidelines","text":"<p>The output file can serve as input for Latent Dirichlet Allocation in FICTURE.</p>"},{"location":"fulldoc/rules/sdgeAR_segment_ficture/#parameters","title":"Parameters","text":"<pre><code>downstream:\n  mu_scale: 1000        \n segment:\n   hex_n_move: 1                              ## specify the sliding step in segmentation\n   precision: 2                               ## specify the precision parameter for segmentation                   \n   ficture:                                   ## specify the parameters for creating hexagon-indexed SGE in FICTURE-compatible format    \n     min_density: 0.3                         ## specify a minimum density of UMIs for hexagon\n     char:                                    ## specify the characteristics for hexagon segmentation, including genomic feature, hexagon size and SGE filtering\n       - solo_feature: gn                     ## genomic feature\n         hexagon_width: 18                    ## hexagonal grid width\n         quality_control: TRUE                ## if both gene-filtering and polygon-filtering should be applied\n     # - ...                                  ## if more than 1 set of hexagon is needed ```\n</code></pre> <ul> <li> <p>The <code>mu_scale</code> Parameter   Specify the coordinate-to-micron translation for hexagons. By default, the spatial digital gene expression (SGE) matrix is considered to be in nanometers.</p> </li> <li> <p>The <code>segment</code> Field</p> </li> <li>The <code>hex_n_move</code> Parameter     Specify the sliding steps. When <code>hex_n_move</code> is set to 1, non-overlapping hexagon-indexed SGE will be created.</li> <li>The <code>precision</code> Parameter     Define the number of digits to store spatial location (in microns, 0 for integer).</li> <li>The <code>ficture</code> Parameter<ul> <li>The <code>min_density</code> Parameter   Set a minimum density of UMI counts when creating hexagon</li> <li>The <code>char</code> Parameter   Specify the characteristics for the hexagons, including the genomic feature to create hexagons (<code>solo_feature</code>), the size of the hexagonal grid (<code>hexagon_width</code>), and whether gene-filtering and polygon-filtering should be applied (<code>quality_control</code>). This allows for multiple sets of parameters.</li> </ul> </li> </ul>"},{"location":"fulldoc/rules/sdgeAR_segment_ficture/#dependencies","title":"Dependencies","text":"<p>When <code>quality_control</code> is enabled, Rule <code>sdgeAR_segment_ficture</code> can only be executed after the completion of Rule <code>sdge2sdgeAR</code> and <code>sdgeAR_polygonfilter</code> along with their prerequisite rules. Otherwise, Rule <code>sdgeAR_segment_ficture</code> can only be executed after the completion of <code>sdge2sdgeAR</code>, <code>sdgeAR_polygonfilter</code>, <code>sdgeAR_minmax</code>, and their prerequisite rules. </p> <p>See an overview of the rule dependencies in the Workflow Structure.</p>"},{"location":"fulldoc/rules/sdgeAR_segment_ficture/#code-snippet","title":"Code Snippet","text":"<p>The code for this rule is provided in <code>c04_sdgeAR_segment_ficture.smk</code>.</p>"},{"location":"fulldoc/rules/sdge_visual/","title":"Rule <code>sdge_visual</code>","text":""},{"location":"fulldoc/rules/sdge_visual/#purpose","title":"Purpose","text":"<p>Rule <code>sdge_visual</code> is designed to display the spatial expression of specific gene categories in colors red, green, and blue via <code>spatula</code>. NovaScope enables the visualization of &gt;=1 gene sets. The gene categories for visualization can be defined in the <code>config_job.yaml</code> file (refer to Parameters).</p>"},{"location":"fulldoc/rules/sdge_visual/#input-files","title":"Input Files","text":"<ul> <li>Spatial Digital Gene Expression (SGE) Matrix and Associated Files The necessary inputs include a spatial digital gene expression (SGE) matrix, generated by Rule <code>dge2sdge</code>.</li> </ul>"},{"location":"fulldoc/rules/sdge_visual/#output-files","title":"Output Files","text":"<p>The rule generates the following output in the specified directory path: <pre><code>&lt;output_directory&gt;/align/&lt;flowcell_id&gt;/&lt;chip_id&gt;/&lt;run_id&gt;/sge/&lt;run_id&gt;.sge_visual\n</code></pre></p> <p>Description: A PNG file is created for each set of genes specified. By default, the spatial expression of non-mitochondrial genes, unspliced genes, and mitochondrial genes are depicted in red, green, and blue, respectively.</p> <p>File Naming Convention: <pre><code>&lt;run_id&gt;.&lt;gene_type_in_red&gt;_&lt;gene_type_in_green&gt;_&lt;gene_type_in_blue&gt;.png\n</code></pre></p> <p>The default visualization of non-mitochondrial gene, unspliced genes, and mitochondrial genes will be named as <code>nonMT_Unspliced_MT.png</code>.</p> <p>File Visualization:</p>"},{"location":"fulldoc/rules/sdge_visual/#output-guidelines","title":"Output Guidelines","text":"<p>It is recommended to review the spatial distribution of specified gene sets corresponds with the tissue area.</p>"},{"location":"fulldoc/rules/sdge_visual/#parameters","title":"Parameters","text":"<pre><code>upstream:\n  visualization:            ## specify the parameters for visualization\n    drawsge:                ## specify the parameters for sdge visualization \n      genes:                ## specify what sets of genes to be colored\n        - red: nonMT        ## the first set of genes\n          green: Unspliced\n          blue: MT\n    #   - ...               ## if more set of genes are required\n      coord_per_pixel: 1000\n      auto_adjust: true\n      adjust_quantile: 0.99\n</code></pre> <ul> <li> <p>The <code>genes</code> Parameter in <code>drawsge</code> NovaScope includes a selection of predefined gene lists with the following options: all (all genes); nonMT (non-mitochondrial genes); ribosomal (ribosomal genes); MT (mitochondrial genes); and nuclear (nuclear genes). To visualize additional specific gene groups, users can create gene list files (<code>&lt;prefix&gt;.genes.tsv</code>) in the directory specified in their <code>config_env.yaml</code>. Additionally, it is possible to visualize individual genes or groups of genes using specific names or regular expressions with <code>spatula</code> directly.</p> </li> <li> <p>Other <code>drawsge</code> Parameters</p> <ul> <li><code>coord_per_pixel</code> specifies how many coordinates should be merged into one pixel. The default setting is 1000.0.</li> <li><code>auto_adjust</code> controls whether to automatically adjust the color intensity based on the maximum count. It is set to True by default.</li> <li><code>adjust_quantile</code> defines the quantile among non-zero pixels to use for auto-adjustment. The default value is 0.99.</li> </ul> </li> </ul>"},{"location":"fulldoc/rules/sdge_visual/#dependencies","title":"Dependencies","text":"<p>Given the input from Rule <code>dge2sdge</code> serve as the input for <code>sdge_visual</code>, Rule <code>sdge_visual</code> can only execute if the input SGE is available or the dependent rules have successfully completed their operations. See an overview of the rule dependencies in the Workflow Structure.</p>"},{"location":"fulldoc/rules/sdge_visual/#code-snippet","title":"Code Snippet","text":"<p>The code for this rule is provided in <code>a06_sdge2sdgeAR.smk</code>.</p>"},{"location":"fulldoc/rules/smatch/","title":"Rule <code>smatch</code>","text":""},{"location":"fulldoc/rules/smatch/#purpose","title":"Purpose","text":"<p>The <code>smatch</code> rule examines that for a pair of 2nd-seq FASTQ files, if spatial barcode sequence (HDMI) in read 1 are found in the spatial barcodes map for this chip section. The <code>smatch</code> functions on a per-pair basis for 2nd-seq FASTQ files. This means that for a given chip of interest, which is associated with multiple pairs of 2nd-seq FASTQ files, NovaScope executes <code>smatch</code> for each pair in parallel.</p>"},{"location":"fulldoc/rules/smatch/#input-files","title":"Input Files","text":"<ul> <li> <p>Per-Chip Spatial Barcode Maps &amp; Manifest File Required input files include the spatial barcode map and manifest file for the chip of interest, which are created by the <code>sbcd2chip</code> rule.</p> </li> <li> <p>The 2nd-seq FASTQ files Required input files also include the read 1 file for a pair of 2nd-seq FASTQ files.</p> </li> </ul>"},{"location":"fulldoc/rules/smatch/#output-files","title":"Output Files","text":"<p>The following files are generated for each pair of 2nd-seq FASTQ files in the specified directory path below:</p> <pre><code>&lt;output_directory&gt;/match/&lt;flowcell_id&gt;/&lt;chip_id&gt;/&lt;seq2nd_id&gt;\n</code></pre>"},{"location":"fulldoc/rules/smatch/#1-a-matched-spatial-barcode-file","title":"(1) A Matched Spatial Barcode File","text":"<p>Description: A compressed, tab-delimited file containing spatial barcodes matched to the 2nd-seq reads.</p> <p>File Naming Convention: <code>&lt;seq2st_pair_id&gt;.R1.match.sorted.uniq.tsv.gz</code></p> <p>File Format:</p> <pre><code>AAAAAAAATAGTTCTGCTAGCTGGTAAGCTA  1  1  7124822  2910007  1  6\nAAAAAAAGTGATCAGAGGTGATATTATGCTT  1  1  7382402  2721048  1  6\nAAAAAAAGTTCGCACTATACGAACAGGGATC  1  1  8634969  2843056  1  1\n</code></pre> <ul> <li>Column 1: Spatial barcode sequence</li> <li>Column 2: Lane ID, which is defined as <code>1</code>.</li> <li>Column 3: Tile ID, which is defined as <code>1</code>.</li> <li>Column 4: X-coordinate within the chip (global X-coordinate).</li> <li>Column 5: Y-coordinate within the chip (global Y-coordinate).</li> <li>Column 6: Number of bases that do not match the expected pattern defined by the format (0 is a perfect match).</li> <li>Column 7: Number of occurrences in the 2nd-seq FASTQ read 1 file.</li> </ul>"},{"location":"fulldoc/rules/smatch/#2-a-smatch-image","title":"(2) A \"smatch\" Image","text":"<p>Description: An image depicting the spatial coordinate distribution of the matched barcodes.</p> <p>File Naming Convention: <code>&lt;seq2st_pair_id&gt;.R1.match.png</code></p> <p>File Visualization:</p>"},{"location":"fulldoc/rules/smatch/#3-an-overall-summary-of-matching-results","title":"(3) An Overall Summary of Matching Results","text":"<p>Description: A summary of the count and fraction of 2nd-seq reads based on the matching results.</p> <p>File Naming Convention: <code>&lt;seq2st_pair_id&gt;.R1.summary.tsv</code></p> <p>File Format:</p> <pre><code>Type        Reads      Fraction\nTotal       163383382  1.00000\nMiss        80020087   0.48977\nMatch       83363295   0.51023\nUnique      17641021   0.10797\nDup(Exact)  65722274   0.40226\n</code></pre> <ul> <li><code>Type</code> : The type of statistics, including the following values:<ul> <li><code>Total</code> : All reads in the 2nd-seq FASTQ file.</li> <li><code>Miss</code> : Reads that do not contain matching spatial barcodes.</li> <li><code>Match</code> : Reads that match with a spatial barcode.</li> <li><code>Unique</code> : Unique spatial barcodes that has matches.</li> <li><code>Dup(Exact)</code> : Duplicate barcodes calculated as Match - Unique.</li> </ul> </li> <li><code>Reads</code> : The number of reads or barcodes that match the type.</li> <li><code>Fraction</code> : The fraction of the reads (among all reads) that match the type.</li> </ul>"},{"location":"fulldoc/rules/smatch/#4-a-summary-of-matched-and-unique-barcodes","title":"(4) A Summary of Matched and Unique Barcodes","text":"<p>Description: A tab-delimited file containing the number of matched and unique spatial barcodes.</p> <p>File Naming Convention: <code>&lt;seq2st_pair_id&gt;.R1.counts.tsv</code></p> <p>File Format:</p> <pre><code>id   filepath                 barcodes   matches   unique\n1_1  1_1.sbcds.sorted.tsv.gz  175135683  83363295  17641021\n</code></pre> <ul> <li><code>id</code>: The <code>id</code> is composed of <code>&lt;lane_id&gt;_&lt;tile_id&gt;</code>. Given only one spatial barcode map is created for a chip, the ID is designed as <code>1_1</code>.</li> <li><code>filepath</code>: The file name is the corresponding spatial barcode map.</li> <li><code>barcodes</code>: The number of spatial barcodes in the chip.</li> <li><code>matches</code>: The number of barcodes match to the expected pattern.</li> <li><code>unique</code>: The number of unique barcodes match to the expected pattern.</li> </ul>"},{"location":"fulldoc/rules/smatch/#output-guidelines","title":"Output Guidelines","text":"<p>Suggested review steps:</p> <ol> <li>Examine summary files to verify that the matched barcode rate isn't low rate, such as &lt; 5%. A low matching rate might indicate a possible sample swap.</li> <li>Inspect the \"smatch\" image for an even distribution of matched barcodes across the tissue area. An unexpected pattern may suggest issues with experimental procedures, like unsuccessful tissue permeabilization.</li> </ol>"},{"location":"fulldoc/rules/smatch/#parameters","title":"Parameters","text":"<p>The following parameter in the job configuration file will be applied in this rule.</p> <pre><code>upstream:\n  smatch:                  \n    skip_sbcd: 1            \n    match_len: 27           \n  visualization:\n    drawxy:\n      coord_per_pixel: 1000\n      intensity_per_obs: 50\n      icol_x: 3\n      icol_y:\n</code></pre> <ul> <li> <p>The <code>smatch</code> Parameters</p> <p>Parameters for <code>smatch</code>, used to pass values to the <code>match-sbcds</code> function in spatula. Below, for each parameter, the corresponding parameter in spatula, description, and the default value in NovaScope are provided.</p> Parameter <code>spatula</code> parameter Description Default Value <code>skip_sbcd</code> <code>--skip-sbcd</code> The number of initial bases to omit from the read.* 1 <code>match_len</code> <code>--match-len</code> The length of the spatial barcode to be considered as a perfectmatch. 27 <ul> <li><code>skip_sbcd</code>: This is useful if the 1st-seq spatial barcode lacks sufficient bases. When it is absent, NovaScope determines <code>skip_sbcd</code> following the <code>format</code> of <code>fastq2sbcd</code>: 1 for DraI31 and 0 for DraI32.</li> </ul> </li> <li> <p>The <code>visualization</code> Parameters</p> <p>Parameters for the <code>visualization</code> step, provided to the <code>draw-xy</code> function in spatula.</p> Parameter <code>spatula</code> parameter Description Default Value <code>coord_per_pixel</code> <code>--coord-per-pixel</code> Coordinates per pixel, as a divisor of input coordinate. 1000 <code>intensity_per_obs</code> <code>--intensity-per-obs</code> Intensity of points per pixel, max 255. 50 <code>icol_x</code> <code>--icol-x</code> (0-based) index of X coordinate in input TSV. 3 <code>icol_y</code> <code>--icol-y</code> (0-based) index of Y coordinate in input TSV. 4 </li> </ul>"},{"location":"fulldoc/rules/smatch/#dependencies","title":"Dependencies","text":"<p>The <code>sbcd2chip</code> requires the successful execution of <code>sbcd2chip</code> to operate as intended. An overview of the rule dependencies are provided in the Workflow Structure.</p>"},{"location":"fulldoc/rules/smatch/#code-snippet","title":"Code Snippet","text":"<p>The code for this rule is provided in a03_smatch.smk</p>"},{"location":"home/documentation_overview/","title":"Documentation Overview","text":"<p>The current documentation of NovaScope includes the following sections:</p> <p>Home:</p> <ul> <li>Documentation Overview: Summarizes the contents and structure of the NovaScope documentation.</li> <li>Workflow Structure: Describes NovaScope's workflow, including rules and their dependencies.</li> </ul> <p>Installation:</p> <ul> <li>Installing NovaScope: Details the installation of required software and the acquisition of reference databases.</li> <li>Additional Installations: (Optional) Instructions for installing tools for NovaScope's additional functionalities.</li> <li>Environment Setup: Outlines how to prepare an environment configuration file for the computing environment.</li> <li>SLURM: (Optional) Guidance on setting up a configuration for the SLURM job scheduler.</li> </ul> <p>Basic Usage:</p> <ul> <li>Introduction: A quick introduction to using NovaScope with example datasets.</li> <li>Accessing Input Data: Information on accessing three provided example datasets.</li> <li>Job Configuration: Instructions for preparing a job configuration file.</li> <li>Execute NovaScope: Describes three ways to run NovaScope.</li> <li>Output: Explains the output directory structure and how to utilize the generated data.</li> </ul> <p>Full Documentation:</p> <ul> <li>A Rule Execution Guide: Essential concepts and rule execution flows by <code>request</code>.</li> <li>Main Rules: Detailed instructions for rules serving the main functionalities.</li> <li>Plus Rules: Detailed instructions for rules serving the additional functionalities.</li> </ul>"},{"location":"home/workflow_structure/","title":"Workflow Structure","text":"<p>Below is the description of the main and plus workflows of NovaScope using rule graphs. </p> <p>For further details on the rules, their execution, and the workflow's structure, please refer to the NovaScope Full Documentation.</p> What is a \"workflow\" and a \"rule\"? <p>In Snakemake, a workflow is a series of steps designed to process data, defined by rules. Each rule specifies a particular task, such as aligning sequences, filtering data, or converting file formats. Rules are interdependent tasks within a workflow, ensuring tasks are executed in the correct sequence. Below, rule graphs show the dependencies in the main and plus workflows.</p>"},{"location":"home/workflow_structure/#main-workflow","title":"Main Workflow","text":"<p>For the main function of NovaScope, the mapping of each step to its specific rule is as follows:</p> <ol> <li>Generate spatial maps from the 1st sequencing data (Rules <code>a01_fastq2sbcd</code>, <code>a02_sbcd2chip</code>)</li> <li>Map the 2nd sequencing data with the spatial map from the 1st step (Rule <code>a03_smatch</code>)</li> <li>Align the 2nd sequencing reads to the reference genome (Rule <code>a04_align</code>)</li> <li>Generate a spatial digital gene expression (SGE) matrix, indexed by transcripts, at submicron resolution (Rule <code>a05_dge2sdge</code>)</li> <li>Visualize the spatial expression of specific genes (Rule <code>b01_sdge_visual</code>)</li> </ol> <p>The rule graph illustrates the relationships between rules:</p> <p>Figure 1: Main workflow rule graph. Each node represents a specific rule in the Snakemake workflow, and arrows indicate dependencies, pointing from prerequisite to dependent rules. Prerequisite rules must be completed before the dependent rule can commence.</p>"},{"location":"home/workflow_structure/#plus-workflow","title":"Plus Workflow","text":"<p>In addition to the main functions, NovaScope offers additional capabilities as below:</p> <ol> <li>Histology alignment (Rule <code>b02_historef</code>)</li> <li>SGE matrix filtering by gene type, gene name, UMI count, or UMI density (Rules <code>c03_sdgeAR_featurefilter</code> and <code>c03_sdge_polygonfilter</code>)</li> <li>SGE matrix reformatting from 10x genomics format to a TSV format compatible with FICTURE (Rule <code>c02_sdgeAR_reformat</code>)</li> <li>SGE matrix segmentation from transcript-indexed SGE to hexagon-indexed SGE in 10x genomics or FICTURE-compatible TSV format (Rules <code>c04_sdgeAR_segment_10x</code> and <code>c04_sdgeAR_segment_ficture</code>)</li> </ol> <p>The plus workflow, detailing both main and additional rules and their interdependencies, is depicted below. </p> <p>Figure 2: Plus workflow rule graph. The prerequisite rules for <code>sdgeAR_segment_10x</code> and <code>sdgeAR_segment_ficture</code> vary based on the need for SGE matrix filtering. This example workflow shows a job requests a filtered hexagon-indexed SGE in FICTURE-compatible format, but a raw hexagon-indexed SGE in 10x Genomics format. See more details in the Execution Flow by Request.</p>"},{"location":"installation/env_setup/","title":"Setting Up a Environment YAML File","text":"<p>NovaScope requires a YAML file to configure the environment. This environment configuration file (e.g., <code>config_env.yaml</code>) is used to specify the paths to the required tools, reference databases, and Python environment. </p> <p>Below is a brief description of all the items in the YAML file.</p> <p>Tip</p> <p>To create your own <code>config_env.yaml</code> file for the environment setup, you may copy from our example available in our GitHub repository. Remember to replace the placeholders with your specific input variables to customize it according to your needs.</p>"},{"location":"installation/env_setup/#tools","title":"Tools","text":"<p>The pipeline automatically detects and includes undefined tools in the system path, allowing for their use without manual configuration. </p> <pre><code>tools:\n  spatula: /path/to/spatula/bin/spatula                     ## Default: \"spatula\"\n  samtools: /path/to/samtools/samtools                      ## Default: \"samtools\"\n  star: /path/to/STAR_2_7_11b/bin/Linux_x86_64_static/STAR  ## Default: \"STAR\"\n</code></pre> <code>samtools</code> <p>For users in High-Performance Computing (HPC) environments with <code>samtools</code> installed, it's feasible to use <code>envmodules</code> (see Environment Modules) to load <code>samtools</code> rather than defining its path here.</p>"},{"location":"installation/env_setup/#optional-environment-modules","title":"(Optional) Environment Modules","text":"<p>Info</p> <p>Only applicable to HPC environments. For local executions, remove this section from <code>config_env.yaml</code>.</p> <p>For HPC users, it is feasible to use the <code>envmodules</code> section to load the required software tools as modules. If a tool is not listed in the <code>envmodules</code> section, the pipeline will assume it's installed system-wide. </p> <p>Tip</p> <p>The version information is required.</p> <pre><code>envmodules:\n  python: \"python/&lt;version_information&gt;\"\n  gcc: \"gcc/&lt;version_information&gt;\"\n  gdal: \"gdal/&lt;version_information&gt;\"\n  imagemagick: \"imagemagick/&lt;version_information&gt;\"\n  # snakemake: \"snakemake/&lt;version_information&gt;\"\n  # samtools: \"Bioinformatics &amp;&amp; samtools\"\n</code></pre> <code>python</code> <p>If your Python environment was set up using a Python accessed through a module, specify the same Python module in the envmodules section to maintain the environment. If using a local Python installation (not through <code>module load</code>), DO NOT INCLUDE any Python module here.</p> <code>samtools</code> <p>Using <code>envmodules</code> to load <code>samtools</code> can be an alternative to specifying its path in <code>tools</code>. The given example is designed for instances where <code>samtools</code> is integrated into the <code>Bioinformatics</code> module system, which necessitates loading the <code>Bioinformatics</code> module prior to loading <code>samtools</code>. In this case, provide all modules that required to be loaded in the correct order, joint by <code>&amp;&amp;</code>.</p>"},{"location":"installation/env_setup/#reference-databases","title":"Reference Databases","text":"<p>Define all necessary reference databases for the input species in the <code>ref</code> field.</p>"},{"location":"installation/env_setup/#1-reference-genome-index-for-alignment","title":"(1) Reference Genome Index for Alignment","text":"<p>Specify the reference genome index for alignment with the <code>align</code> parameter. Reference genome indices can be accessed via the cellranger download page. Users can also generate their own reference genome index; detailed instructions for building the STAR index from a reference file are provided in the Requirements section.</p>"},{"location":"installation/env_setup/#2-reference-gene-list-directories-for-visualizing-spatial-expression-patterns","title":"(2) Reference Gene List Directories for Visualizing Spatial Expression Patterns","text":"<p>The <code>genelists</code> parameter should point to the directory containing species-specific gene lists, which are crucial for visualizing spatial expression patterns in Rule sdge_visual. This directory must include files named <code>&lt;gene_group&gt;.genes.tsv</code> (e.g., <code>MT.genes.tsv</code>), with each file listing gene names line-by-line.</p> <p>NovaScope provides precompiled gene lists for mouse (version: mm39) and human (version: hg38). If the <code>genelists</code> parameter is not specified in the <code>config_env.yaml</code>, NovaScope defaults to using these files. Alternatively, users may provide their own custom gene list files.</p>"},{"location":"installation/env_setup/#3-optional-reference-gene-information-for-gene-filtering","title":"(3) (Optional) Reference Gene Information for Gene Filtering","text":"<p>Info</p> <p>Gene information files are necessary only if additional functionalities of NovaScope are utilized.</p> <p>The <code>geneinfo</code> parameter specifies the path of gene information files needed for gene filtering. NovaScope provides ready-to-use gene information files for mouse (version: mm39), human (version: hg38), and chick (version: g6a). If <code>geneinfo</code> is absent, NovaScope uses these files from FICTURE. </p> <p>Only under the following conditions, users need to prepare and specify a gene information file in the geneinfo: a. the input datasets are from species other than human or mouse; b. the version of the dataset is different from that of the precompiled files (human: hg38; mouse: mm39, chick: g6a).</p> <p>Tip</p> <p>Ensure that the reference files match the species of your input data.</p> <pre><code>ref:\n  align:\n    mouse: \"/path/to/refdata-gex-GRCm39-2024-A/star_2.7_11b\"\n    human: \"/path/to/refdata-gex-GRCh39-2024-A/star_2.7_11b\"\n    #...\n  genelists:\n    mouse: \"/path/to/ref_gene_list_directory_for_mouse\"\n    human: \"/path/to/ref_gene_list_directory_for_human\"\n    #...\n  #geneinfo:                                        ## (optional) no need to define the geneinfo if the users prefer to use the precompiled files from FICTURE\n    #mouse: \"/path/to/ref_gene_info_file_for_mouse\"\n    #human: \"/path/to/ref_gene_info_file_for_human\"\n    #...\n</code></pre>"},{"location":"installation/env_setup/#python-environment","title":"Python Environment","text":"<p>Specify the path of Python virtual environment by modifying the following line:</p> <pre><code>pyenv: \"/path/to/python/virtual/env\"\n</code></pre>"},{"location":"installation/env_setup/#optional-computing-capabilities","title":"(Optional) Computing Capabilities","text":"<p>Info</p> <p>Only applicable to HPC environments.</p> <p>NovaScope provides two methods for specifying resources for the alignment process:</p> <ul> <li>Option <code>stdin</code> allows users to define resources manually in the job configuration file.</li> <li>Option <code>filesize</code> allows NovaScope to automatically allocate resources based on the size of the input files and the available computational resources defined in this environment configuration file. ONLY when using Option <code>filesize</code> must users specify the computing resources available. </li> </ul> <p>For more information on activating Option <code>stdin</code> or <code>filesize</code> and the resource allocation strategy for Option <code>filesize</code>, visit the Job Configuration page.</p> <p>An example of how to configure these settings.</p> <pre><code>available_nodes:\n  - partition: standard     # partition name\n    max_n_cpus: 20          # the maximum number of CPUs per node\n    mem_per_cpu: 7g         # the memory allocation per CPU \n  - partition: largemem\n    max_n_cpus: 10\n    mem_per_cpu: 25g\n</code></pre>"},{"location":"installation/requirement/","title":"Installing NovaScope","text":"<p>This document provides instructions on how to install the necessary software tools and obtain reference datasets.</p>"},{"location":"installation/requirement/#installing-snakemake","title":"Installing Snakemake","text":"<p>Snakemake orchestrates the workflow of NovaScope pipeline.</p> <p>Info</p> <p>NovaScope has been tested for compatibility with Snakemake v7.29.0 and v8.6.0.</p>"},{"location":"installation/requirement/#checking-snakemake-installation","title":"Checking Snakemake Installation","text":"<p>If you are unsure whether Snakemake is installed in your system, you can check by running the following command:</p> <pre><code>snakemake --version\n</code></pre> <p>On systems that support the <code>module</code> command, you can load the <code>snakemake</code> module using the following command:</p> <pre><code>## check if snakemake is available as a module\nmodule avail snakemake\n\n## load the available module (specify the version if necessary)\nmodule load snakemake\n</code></pre>"},{"location":"installation/requirement/#installing-snakemake-using-conda-and-mamba","title":"Installing Snakemake Using Conda and Mamba","text":"<p>If you need to install Snakemake, below is a simplified sequence of instruction. Please refer to official Snakemake documentation for more detailed instructions.</p> <p>Tip</p> <p>It is recommended to install Snakemake using conda and/or mamba. </p> <p>Info</p> <p>If you do not have Python, it will be installed as part of setting up Miniconda.</p> <pre><code>## download miniconda\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\n\n## install miniconda\nbash Miniconda3-latest-Linux-x86_64.sh\n## Follow the on-screen instructions to complete the installation. \n\n## Activate the Miniconda installation:\n## IMPORTANT: change /path/to/miniconda to the path you installed miniconda\neval \"$(/path/to/miniconda3/bin/conda shell.bash hook)\"\n\n## If you included conda initialization in .bashrc the above line can be replaced with\n## source ~/.bashrc\n\n## create a new conda environment\n## this step ensures that this version of Python is installed within the environment if it isn't already available\npython_version=3.9      # replace 3.9 by your desired version\nconda create -n snakemake-env python=$python_version\n\n## activate the new environment\nconda activate snakemake-env\n\n## install mamba in the conda environment\nconda install mamba -n snakemake-env\n\n## activate the environment to ensure mamba is correctly set up\nconda activate snakemake-env\n\n## install snakemake using mamba\nmamba install snakemake\n\n## verify the installation of snakemake\nsnakemake --version\n</code></pre>"},{"location":"installation/requirement/#configuring-python-virtual-environment","title":"Configuring Python Virtual Environment","text":""},{"location":"installation/requirement/#python","title":"Python","text":"<p>Info</p> <p>NovaScope has been tested for compatibility with Python v3.9.12, v3.10, and v3.12.2.</p> <p>If you don't have Python installed on your system and you follow the above Snakemake installation instructions, Python of the specified version should be installed during the process.</p> <p>To verify the installation or the version of Python on your system, run the following command:</p> <pre><code>python --version\n</code></pre>"},{"location":"installation/requirement/#python-environment","title":"Python Environment","text":"<p>We recommend creating a new Python environment for NovaScope with all required packages. Below is an example:</p> <pre><code>## First, we recommend activating conda/mamba environment before setting up venv, using:\n# eval \"$(/path/to/miniconda3/bin/conda shell.bash hook)\"\n# conda activate snakemake-env\n\n## set the path to the python virtual environment directory\npyenv_dir=/path/to/python/virtual/environment/directory  ## provide the path of venv\npyenv_name=novascope_venv                                ## define the name of python environment \nsmk_dir=/path/to/the/novascope/directory                 ## specify the path to novascope repository\n\n## create the python virtual environment (need to be done only once)\nmkdir -p ${pyenv_dir}\ncd ${pyenv_dir}\npython -m venv ${pyenv_name}\n\n## activate the python environment (every time you want to use the environment)\nsource ${pyenv_name}/bin/activate\n\n## install the required packages (need to be done only once)\npip install -r ${smk_dir}/installation/pyenv_req.txt\n</code></pre>"},{"location":"installation/requirement/#installing-other-dependent-tools","title":"Installing Other Dependent Tools","text":"<p>NovaScope depends on a number of software tools, detailed below. The versions specified for each software tool have been verified for compatibility with our pipeline, though other versions may also be compatible.</p> <ul> <li>STARsolo (v2.7.11b)</li> <li>samtools (v1.13; v1.14; v1.19)</li> <li>spatula (v0.1.0)</li> <li>ImageMagick (7.1.0-25.lua and 7.1.1-30)</li> <li>GDAL (v3.5.1): Optional. Only required for histology alignment.</li> </ul> <p>We provide an example work log documenting the installation of the aforementioned software tools.</p>"},{"location":"installation/requirement/#installing-novascope_1","title":"Installing NovaScope","text":"<p>To install NovaScope, clone the repository from GitHub using the following command. Use <code>--recursive</code> to initializes and updates each submodule in NovaScope.</p> <pre><code>git clone --recursive https://github.com/seqscope/NovaScope.git \n</code></pre> <p>If you've already cloned NovaScope without its submodules (by forgetting to use the <code>--recursive</code> option), you can initialize and update the submodules afterwards with the following commands:</p> <pre><code>smk_dir=/path/to/the/novascope/directory\ncd $smk_dir\ngit submodule update --init\n</code></pre>"},{"location":"installation/requirement/#preparing-reference-genomes","title":"Preparing Reference Genomes","text":"<p>The reference genome for the species of interest must be downloaded and indexed for alignment. STARsolo accepts the reference genomes prepared by cellranger. Therefore, one of the simplest ways is to download the reference genome from the cellranger download page.</p> <p>Given STAR index packaged by the cellranger download is outdated and will not be compatible with the latest version of STARsolo, we recommend indexing it using the latest version of STARsolo. For human and mouse, we provided examples below to prepare the reference genome. For other species, please follow the instructions provided by cellranger or STARsolo to prepare the reference genome. </p> <p>Please note that this indexing process will take A LOT OF TIME, typically a few to several hours.</p> Mouse <p>The recommended reference genome for mouse is GRCm39. </p> <pre><code>## download the reference genome package\ncurl -O \"https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-GRCm39-2024-A.tar.gz\"\n\n## uncompressed the tar file\ntar -xvf refdata-gex-GRCm39-2024-A.tar.gz\ncd refdata-gex-GRCm39-2024-A\n\n## uncompress GTF file\ngzip -d genes/genes.gtf.gz\n\n## index the reference genome\nSTARBIN=/path/to/STAR_2.7.11b/Linux_x86_64_static/STAR\n${STARBIN} --runMode genomeGenerate \\\n    --runThreadN 1 \\\n    --genomeDir ./star_2_7_11b \\\n    --genomeFastaFiles ./fasta/genome.fa \\\n    --genomeSAindexNbases 14 \\\n    --genomeChrBinNbits 18 \\\n    --genomeSAsparseD 3 \\\n    --limitGenomeGenerateRAM 17179869184 \\\n    --sjdbGTFfile ./genes/genes.gtf\n</code></pre> Human <p>The recommended reference genome for human is GRCh38.</p> <pre><code>## download the reference genome package\ncurl -O \"https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-GRCh38-2024-A.tar.gz\"\n\n## uncompressed the tar file\ntar -xvf refdata-gex-GRCh38-2024-A.tar.gz\ncd refdata-gex-GRCh38-2024-A\n\n## uncompress GTF file\ngzip -d genes/genes.gtf.gz\n\n## index the reference genome\nSTARBIN=/path/to/STAR_2.7.11b/Linux_x86_64_static/STAR\n${STARBIN} --runMode genomeGenerate \\\n    --runThreadN 1 \\\n    --genomeDir ./star_2_7_11b \\\n    --genomeFastaFiles ./fasta/genome.fa \\\n    --genomeSAindexNbases 14 \\\n    --genomeChrBinNbits 18 \\\n    --genomeSAsparseD 3 \\\n    --limitGenomeGenerateRAM 17179869184 \\\n    --sjdbGTFfile ./genes/genes.gtf\n</code></pre>"},{"location":"installation/requirement_for_plus/","title":"Additional Installations","text":"<p>Info</p> <p>The installations below are OPTIONAL and are ONLY necessary for who looking to utilize the additional functionalities. To solely utilize the main functionalities, skip this step.</p>"},{"location":"installation/requirement_for_plus/#install-the-historef-package","title":"Install the historef Package","text":"<p>Info</p> <p>Only required if you want to align your histology images with the spatial digital gene expression (SGE) matrix.</p> <p>Install the historef package in your Python environment. For the most recent version, please see its GitHub repository.</p> <pre><code>### activate your python environment\n### Both the $pyenv_dir and $pyenv_name were defined in Configuring Python Virtual Environment.\nsource ${pyenv_dir}/$pyenv_name/bin/activate\n\n### download the historef package\nwget -P ${smk_dir}/installation https://github.com/seqscope/historef/releases/download/v0.1.3/historef-0.1.3-py3-none-any.whl\n\n## install the historef package\npip install ${smk_dir}/installation/historef-0.1.3-py3-none-any.whl\n</code></pre>"},{"location":"installation/requirement_for_plus/#install-the-ficture-package","title":"Install the FICTURE Package","text":"<p>Info</p> <p>Only required if you want to apply the SGE matrix filtering, reformatting or segmentation functionalities.</p> <p>NovaScope has already included FICTURE as a submodule, but it is essential to install FICTURE and its dependencies into your Python virtual environment. For more details, please consult FICTURE's instructions.</p> <pre><code>## set the path to the python virtual environment directory\npyenv_dir=/path/to/python/virtual/environment/directory  ## provide the path of venv\npyenv_name=novascope_venv                                ## provide the name of the environment you created before\n\nsmk_dir=/path/to/the/novascope/directory\n\n## activate the python environment (every time you want to use the environment)\nsource ${pyenv_dir}/${pyenv_name}/bin/activate\n\n## install the required packages (need to be done only once)\npip install -r ${smk_dir}/submodules/ficture/requirements.txt\n\n## install FICTURE\npip install ficture\n</code></pre>"},{"location":"installation/slurm/","title":"Snakemake with SLURM","text":"<p>Tip</p> <p>We recommended to integrate SLURM scheduler with NovaScope, which can automate the process of submitting your jobs.</p> <p>Info</p> <p>Please be aware that Snakemake introduced significant updates for cluster configuration starting from version 8. Thus, we advise checking to verify your Snakemake version using <code>snakemake --version</code>. </p> <p>In NovaScope, we utilized a cluster configuration profile to define the details of the cluster and resources given its consistency and time-saving benefits. More details are provided below. Those files were crafted with inspiration from the smk-simple-slurm repository.</p>"},{"location":"installation/slurm/#a-cluster-configuration-file-for-snakemake-v7290","title":"A Cluster Configuration file for Snakemake v7.29.0","text":"<p>Create a <code>config.yaml</code> with the following settings. Please substitute the placeholders, which are marked with <code>&lt;&gt;</code>, to suit your specific case. Please see our example file at slurm/v7.29.0/config.yaml. </p> <pre><code>## Cluster Configuration\n## The following setting also aids in organizing log files by creating rule-specific subdirectories within the job's log directory, each holding its own output and error files.\ncluster:\n  mkdir -p logs/{rule}/ &amp;&amp;\n  sbatch\n    --job-name={rule}_{wildcards}\n    --output=logs/{rule}/{rule}___{wildcards}___%j.out\n    --error=logs/{rule}/{rule}___{wildcards}___%j.err\n    --account={resources.account}\n    --partition={resources.partition}\n    --mem={resources.mem}\n    --time={resources.time}\n    --cpus-per-task={threads}\n    --parsable\n    --nodes={resources.nodes}\n\n## Default Resources for Jobs\ndefault-resources:\n  - partition=&lt;your_default_partition&gt;    # replace &lt;your_default_partition&gt; with your actual partition name\n  - mem=&lt;default_memory_allocation&gt;       # replace &lt;default_memory_allocation&gt; with memory, e.g., \"4G\"\n  - time=&lt;default_time_limit&gt;             # replace &lt;default_time_limit&gt; with time, e.g., \"01:00:00\"\n  - nodes=&lt;default_number_of_nodes&gt;       # replace &lt;default_number_of_nodes&gt; with nodes, e.g., \"1\"\n  - account=&lt;default_account_information&gt; # replace &lt;default_account_information&gt; with your account info\n\n## General Snakemake Settings\njobs: &lt;max_number_of_jobs&gt;                  # replace &lt;max_number_of_jobs&gt; with your desired maximum number of concurrent jobs, e.g., 10\nlatency-wait: &lt;latency_seconds&gt;             # replace &lt;latency_seconds&gt; with the number of seconds to wait if job output is not present, e.g., 120\nlocal-cores: &lt;local_core_count&gt;             # replace &lt;local_core_count&gt; with the max number of cores to use locally, e.g., \"20\"\nrestart-times: &lt;restart_attempts&gt;           # replace &lt;restart_attempts&gt; with the number of times to retry failing jobs, e.g., \"0\" for no retries\nmax-jobs-per-second: &lt;job_submission_rate&gt;  # replace &lt;job_submission_rate&gt; with the limit on how many jobs can be submitted per second, e.g., \"20\"\nkeep-going: &lt;continue_after_failure&gt;        # replace &lt;continue_after_failure&gt; with True or False to indicate whether to continue executing other jobs after a failure\nrerun-incomplete: &lt;rerun_incomplete_jobs&gt;   # replace &lt;rerun_incomplete_jobs&gt; with True or False to decide if incomplete jobs should be rerun\nprintshellcmds: &lt;print_commands&gt;            # replace &lt;print_commands&gt; with True or False to specify if shell commands should be printed before execution\n\n## Scheduler Settings\n#scheduler: greedy      \n\n## Conda Environment Settings\nuse-conda: &lt;True_or_False&gt;               # enable use of Conda environments\nconda-frontend: conda                    # specify Conda as the package manager frontend\n</code></pre>"},{"location":"installation/slurm/#a-cluster-configuration-file-for-snakemake-v860","title":"A Cluster Configuration file for Snakemake v8.6.0","text":"<p>Please first install the Snakemake executor plugin \"<code>cluster-generic</code>\":</p> <pre><code>pip install snakemake-executor-plugin-cluster-generic\n</code></pre> <p>Then, create the cluster configuration file with below. Please substitute the placeholders, which were marked with <code>&lt;&gt;</code>, to suit your specific case. Please see our example file at slurm/v8.6.0/config.yaml. </p> <pre><code>## Cluster Configuration\n## The following setting also aids in organizing log files by creating rule-specific subdirectories within the job's log directory, each holding its own output and error files.\nexecutor: \"cluster-generic\"\ncluster-generic-submit-cmd: \"mkdir -p logs/{rule}/ &amp;&amp;\n  sbatch\n    --job-name={rule}_{wildcards} \\\n    --output=logs/{rule}/{rule}___{wildcards}___%j.out \\\n    --error=logs/{rule}/{rule}___{wildcards}___%j.err \\\n    --partition={resources.partition} \\\n    --mem={resources.mem} \\\n    --time={resources.time} \\\n    --cpus-per-task={threads} \\\n    --parsable \\\n    --nodes={resources.nodes} \"\n\n## Default Resources for Jobs\ndefault-resources:\n  - partition=&lt;your_default_partition&gt;    # replace &lt;your_default_partition&gt; with your actual partition name\n  - mem=&lt;default_memory_allocation&gt;       # replace &lt;default_memory_allocation&gt; with memory, e.g., \"4G\"\n  - time=&lt;default_time_limit&gt;             # replace &lt;default_time_limit&gt; with time, e.g., \"01:00:00\"\n  - nodes=&lt;default_number_of_nodes&gt;       # replace &lt;default_number_of_nodes&gt; with nodes, e.g., \"1\"\n  - account=&lt;default_account_information&gt; # replace &lt;default_account_information&gt; with your account info\n\n## General Snakemake Settings\njobs: &lt;max_number_of_jobs&gt;                  # replace &lt;max_number_of_jobs&gt; with your desired maximum number of concurrent jobs, e.g., 10\nlatency-wait: &lt;latency_seconds&gt;             # replace &lt;latency_seconds&gt; with the number of seconds to wait if job output is not present, e.g., 120\nlocal-cores: &lt;local_core_count&gt;             # replace &lt;local_core_count&gt; with the max number of cores to use locally, e.g., \"20\"\nrestart-times: &lt;restart_attempts&gt;           # replace &lt;restart_attempts&gt; with the number of times to retry failing jobs, e.g., \"0\" for no retries\nmax-jobs-per-second: &lt;job_submission_rate&gt;  # replace &lt;job_submission_rate&gt; with the limit on how many jobs can be submitted per second, e.g., \"20\"\nkeep-going: &lt;continue_after_failure&gt;        # replace &lt;continue_after_failure&gt; with True or False to indicate whether to continue executing other jobs after a failure\nrerun-incomplete: &lt;rerun_incomplete_jobs&gt;   # replace &lt;rerun_incomplete_jobs&gt; with True or False to decide if incomplete jobs should be rerun\nprintshellcmds: &lt;print_commands&gt;            # replace &lt;print_commands&gt; with True or False to specify if shell commands should be printed before execution\n\n## Conda Environment Settings\nsoftware-deployment-method: conda\n</code></pre>"},{"location":"installation/slurm/#additional-functions","title":"Additional functions","text":"<p>If you encounter situations where your jobs fail without any warnings, it is feasible to using a cluster status script to keep track of your jobs. See details here.</p>"},{"location":"quickstart/custom/","title":"Running with Your Own Data","text":"<p>If you want to prepare your own dataset to run the pipeline with Docker or Singularity, the process is similar to the examples provided, except that you will need to modify the <code>--configfile</code> parameter to your own version. </p>"},{"location":"quickstart/custom/#preparing-the-job-config-file","title":"Preparing the job config file","text":"<p>Typically, you may want to locate your config file in your working directory and specify it in the command. For example, if your config file is located at <code>${working_dir}/config_job.yaml</code>, assuming that the working directory is mounted to <code>/data</code> in the container as given in the example, you can run the pipeline with <code>--configfile /data/config_job.yaml</code> argument.</p> <p>The full instruction on how to prepare your job config file is provided in the Job Configuration section. If you are using NovaScope using Docker or Singularity container, here are some tips to modify your job config file:</p> <ul> <li>It would be easiest to start with the Shallow Liver Section Configuration File.</li> <li>We recommend placing the input FASTQ files in the <code>${working_dir}/input</code> directory and the output files in the <code>${working_dir}/output</code> directory, and mount the <code>${working_dir}</code> to <code>/data</code> in the container.</li> <li>Modify <code>env_yml</code> to the config file that already exists in the container: <code>/app/novascope/info/config_env_docker.yaml</code>, so that you do not have to set up your own environment file.</li> <li>Please see Job Configuration section to understand how to update the rest of the input parameters.</li> </ul>"},{"location":"quickstart/custom/#running-the-dockersingularity-container","title":"Running the Docker/Singularity container","text":"<p>You may perform a dry-run to test whether the NovaScope pipeline with your own data is working properly. </p> <p>For example, if you are running a Docker container,</p> <pre><code>## Test the NovaScope pipeline with dry-run\n## NOTE: make your to replace /path/to/working/dir/ with your working directory\ndocker run -it --rm -v /path/to/working/dir:/data hyunminkang/novascope \\\n    -s /app/novascope/NovaScope.smk \\\n    --rerun-incomplete -d data/output \\\n    --configfile /data/config_job.yaml \\\n    --dry-run -p\n</code></pre> <p>If you are running a Singularity container,</p> <pre><code>## Test the NovaScope pipeline with dry-run\n## NOTE: make your to replace /path/to/working/dir/ with your working directory\nsingularity exec --bind /path/to/working/dir:/data novascope_latest.sif \\\n    snakemake -s /app/novascope/NovaScope.smk \\\n    --rerun-incomplete -d data/output \\\n    --configfile /data/config_job.yaml \\\n    --dry-run -p\n</code></pre> <p>If the dry-run is successful, you may run the full pipeline by substituting <code>--dry-run</code> with <code>--cores [num-cpus]</code></p> <p>If your data contains human samples, you may need to download the GRCh38 reference files. You can download the reference files by running the following commands:</p> <pre><code>## NOTE: make your to replace /path/to/working/dir/ with your working directory\ncd /path/to/working/dir/\nwget https://zenodo.org/records/11181586/files/GRCh38_star_2_7_11b.tar.gz\ntar xzvf GRCh38_star_2_7_11b.tar.gz\n</code></pre>"},{"location":"quickstart/docker/","title":"Docker Example","text":"<p>Running NovaScope with pre-built docker image requires a system you can run docker on. Typically you need a machine (e.g. Ubuntu Desktop or AWS EC2) you have a root access to, with &gt;32GB memory and &gt;64GB disk space.</p> <p>It involves three main steps: (1) setting up docker in your system, (2) downloading example data and reference files, and (3) running the pipeline. We will assume that you have <code>/path/to/working/dir</code> as your working directory. We will use the minimal test run data as an example, but you may replace it with other datasets.</p>"},{"location":"quickstart/docker/#setting-up-docker-in-your-system","title":"Setting up docker in your system","text":"<p>If you are new to Docker, please refer to the Docker documentation for installation and basic usage. To ensure that Docker is installed in your system, you can run the following command:</p> <pre><code>## check the existence and version of docker\ndocker --version\n\n## check if a docker container can be run\ndocker run hello-world\n</code></pre> <p>If the above commands do not run, you need to install Docker in your system. Currently, our docker image is built for Intel/AMD x86_64 architecture. </p>"},{"location":"quickstart/docker/#download-example-data-and-reference-files","title":"Download example data and reference files","text":"<p>You may download the minimal test run data and STAR mouse reference index by running the following commands:</p> <pre><code>## change the directory to your working directory\n## NOTE: make your to replace /path/to/working/dir/ with your working directory\ncd /path/to/working/dir/\n\n## download the minimal test run data (takes 1-5 mins) \nwget https://zenodo.org/records/10835761/files/B08Csub_20240318_raw.tar.gz\ntar xzvf B08Csub_20240318_raw.tar.gz\n\n## download the STAR mouse reference index (take 10-20 mins)\nwget https://zenodo.org/records/11181586/files/GRCm39_star_2_7_11b.tar.gz\ntar xzvf GRCm39_star_2_7_11b.tar.gz\n</code></pre>"},{"location":"quickstart/docker/#running-the-novascope-pipeline-with-example-dataset","title":"Running the NovaScope pipeline with example dataset","text":"<p>You may perform a dry-run to test whether the NovaScope pipeline with the minimal test example data is working properly. </p> <pre><code>## Test the NovaScope pipeline with dry-run\n## NOTE: make your to replace /path/to/working/dir/ with your working directory\ndocker run -it --rm -v /path/to/working/dir:/data hyunminkang/novascope \\\n    -s /app/novascope/NovaScope.smk \\\n    --rerun-incomplete -d data/output \\\n    --configfile /app/novascope/testrun/minimal_test_run/config_job_docker.yaml \\\n    --dry-run -p\n</code></pre> <p>If the dry-run is successful, you may run the pipeline with the following command:</p> <pre><code>## Execute the NovaScope pipeline \n## NOTE: make your to replace /path/to/working/dir/ with your working directory\n## --cores 10 can be replaced with the number of cores you want to use\ndocker run -it --rm -v /path/to/working/dir:/data hyunminkang/novascope \\\n    -s /app/novascope/NovaScope.smk \\\n    --rerun-incomplete -d data/output \\\n    --configfile /app/novascope/testrun/minimal_test_run/config_job_docker.yaml \\\n    -p --cores 10\n</code></pre> <p>The pipeline will generate the output files in the <code>/path/to/working/dir/output</code> directory, typically in 10 minutes.</p> <p>To run NovaScope with different datasets, you will need to modify the Configuration File yourself and specify it as <code>--configfile</code> argument in the command. See detailed instructions in the Job Configuration section.</p>"},{"location":"quickstart/intro/","title":"Introduction","text":"<p>NovaScope is a sophisticated pipeline containing multiple steps for processing spatial transcriptomics data.  Installing individual software tools and setting up the pipeline for your specific environment requires a detailed understanding of your computational environment as well as the overall structure of the NovaScope pipeline.</p> <p>In this short tutorial, we will use the Docker and Singularity containers to facilitate the installation and execution of the NovaScope pipeline with minimal test examples. These examples will give you a basic understanding of the pipeline with minimal effort.</p> <p>However, to take  full advantage of various features offered by the NovaScope pipeline, such as systematic parallelization in HPC environment with SLURM, we strongly recommend that you install the pipeline in your computing environment rather than relying solely on the pre-built Docker image.  Please refer to the Installation Guide for detailed instructions on how to install the pipeline in your computing environment. The Basic Usage and Full Documentation sections provide more detailed instructions on how to run the pipeline with your own data and  computing environment.</p>"},{"location":"quickstart/singularity/","title":"Singularity Example","text":"<p>Running NovaScope with pre-built docker image through singularity requires a system that has Singularity installed. Unlike Docker, running singularity does not necessarily require a root permission and can be often found in HPC environment. We still recommend a system that has &gt;32GB memory and &gt;64GB disk space.</p> <p>Running NovaScope using singularity involves three main steps: (1) setting up singularity in your system, (2) downloading example data and reference files, and (3) running the pipeline. We will assume that you have <code>/path/to/working/dir</code> as your working directory. We will use the minimal test run data as an example, but you may replace it with other datasets.</p>"},{"location":"quickstart/singularity/#setting-up-singularity-in-your-system","title":"Setting up singularity in your system","text":"<p>If you are new to Singularity, please refer to the Singularity documentation for installation and basic usage. To ensure that singularity is installed in your system, you can run the following command:</p> <pre><code>## check the existence and version of singularity\nsingularity --version\n</code></pre> <p>In some systems, you may need to load the singularity module before running the above command.  For example, in the HPC environment, you may need to run the following command:</p> <pre><code>## load the singularity module\nmodule load singularity\n</code></pre> <p>If the above commands do not run, you need to install singularity in your system. Currently, our images are built for Intel/AMD x86_64 architecture. </p>"},{"location":"quickstart/singularity/#download-example-data-and-reference-files","title":"Download example data and reference files","text":"<p>You may download the minimal test run data and STAR mouse reference index by running the following commands:</p> <pre><code>## change the directory to your working directory\n## NOTE: make your to replace /path/to/working/dir/ with your working directory\ncd /path/to/working/dir/\n\n## download the minimal test run data (takes 1-5 mins) \nwget https://zenodo.org/records/10835761/files/B08Csub_20240318_raw.tar.gz\ntar xzvf B08Csub_20240318_raw.tar.gz\n\n## download the STAR mouse reference index (take 10-20 mins)\nwget https://zenodo.org/records/11181586/files/GRCm39_star_2_7_11b.tar.gz\ntar xzvf GRCm39_star_2_7_11b.tar.gz\n</code></pre>"},{"location":"quickstart/singularity/#pulling-the-docker-image-and-converting-it-to-singularity-image","title":"Pulling the docker image and converting it to singularity image","text":"<p>You will need to pull the docker image and convert it to a singularity image. You can do this by running the following command:</p> <pre><code>singularity pull docker://hyunminkang/novascope\n</code></pre> <p>If successful, this will create a file named <code>novascope_latest.sif</code> in your working directory.</p>"},{"location":"quickstart/singularity/#running-the-novascope-pipeline","title":"Running the NovaScope pipeline","text":"<p>You may perform a dry-run to test whether the NovaScope pipeline with the minimal test example data is working properly. </p> <pre><code>## Test the NovaScope pipeline with dry-run\n## NOTE: make your to replace /path/to/working/dir/ with your working directory\nsingularity exec --bind /path/to/working/dir:/data novascope_latest.sif \\\n    snakemake -s /app/novascope/NovaScope.smk \\\n    --rerun-incomplete -d data/output \\\n    --configfile /app/novascope/testrun/minimal_test_run/config_job_docker.yaml \\\n    --dry-run -p\n</code></pre> <p>If the dry-run is successful, you may run the pipeline with the following command:</p> <pre><code>## Execute the NovaScope pipeline \n## NOTE: make your to replace /path/to/working/dir/ with your working directory\n## --cores 10 can be replaced with the number of cores you want to use\nsingularity exec --bind /path/to/working/dir:/data novascope_latest.sif \\\n    snakemake -s /app/novascope/NovaScope.smk \\\n    --rerun-incomplete -d data/output \\\n    --configfile /app/novascope/testrun/minimal_test_run/config_job_docker.yaml \\\n    -p --cores 10\n</code></pre> <p>The pipeline will generate the output files in the <code>/path/to/working/dir/output</code> directory, typically in 10 minutes.</p> <p>To run NovaScope with different datasets, you will need to modify the Configuration File yourself and specify it as <code>--configfile</code> argument in the command. See detailed instructions in the Job Configuration section.</p>"}]}