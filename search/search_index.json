{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to NovaScope documentation","text":""},{"location":"#introduction","title":"Introduction","text":"<p>NovaScope is a Snakemake-based pipeline that processes spatial transcriptomics data generated from the Seq-Scope. Currently, it is tailored to process the spatial arrays generated from the Illumina NovaSeq 6000 platform.</p> <p>The pipeline is designed to process raw sequencing data (1st-seq and 2nd-seq), align reads to the reference genome, and produce spatial gene expression at the submicron resolution. The pipeline is designed to be modular and flexible, allowing users to customize the pipeline to their specific needs. </p> <p>The pipeline is designed to be run on a Unix-based high-performance computing (HPC) system, either locally or through the Slurm workload manager.</p> <p>NovaScope consists of primarily two steps as shown in the figure below.</p> <p>Figure 1: Overview of the NovaScope pipeline: Step 1 processes the 1st-seq FASTQ files to generate spatial barcode maps for each \"Chip\", a 10x6 array of tiles. Step 2 processes the 2nd-seq FASTQ files, aligns reads to the reference genome, and produces spatial gene expression at submicron resolution.  </p>"},{"location":"getting_started/access_data/","title":"Accessing Example Datasets","text":""},{"location":"getting_started/access_data/#dataset-overview","title":"Dataset Overview","text":"<p>There are three example datasets published with the NovaScope protocol. Each input dataset contains two types of FASTQ files: (a) 1st-seq (single-end) FASTQ file that contains spatial barcodes to construct a barcode map, and (b) 2nd-seq (paired-end) FASTQ files that contains spatial barcodes in Read 1, and cDNA sequences in Read 2. </p>"},{"location":"getting_started/access_data/#minimal-test-run-dataset","title":"Minimal Test Run Dataset","text":"<p>This is a small (1.14GB) test run dataset comprising of a subset of the (shallow) liver section data described in Shallow Liver Section Dataset. This dataset is meant to be used to test the sanity of the pipeline, without necessarily offering biologically meaningful interpretation of data. </p>"},{"location":"getting_started/access_data/#shallow-liver-section-dataset","title":"Shallow Liver Section Dataset","text":"<p>This dataset is a typical (23.7GB) example of Seq-Scope dataset that can be initially generated for a tissue section. Typically, the 2nd-seq FASTQ files contain 150-200M paired-end reads. This should be sufficient to examine the spatial distribution of the transcripts across the tissue, assess the quality of dataset, identify major cell types and marker genes, and perform basic pixel-level decoding of the spatial transcriptome. If the quality of the initial dataset look great, one may decide to sequence the library much more deeply to maximize the information content. (see Deep Liver Section Dataset for more details)</p>"},{"location":"getting_started/access_data/#deep-liver-section-dataset","title":"Deep Liver Section Dataset","text":"<p>If the initial examination of the shallow dataset looks promising, one can sequence the library much more deeply, to the level of saturating the library. A deeply sequenced dataset typically contains multiple pairs of FASTQ files, possibly across multiple sequencing runs. The deeply sequenced liver section dataset, available at https://doi.org/10.7302/tw62-4f97, has 7 pairs of FASTQ files (250GB) in addition to the shallow dataset.</p>"},{"location":"getting_started/access_data/#downloading-the-datasets","title":"Downloading the Datasets","text":"<p>Each of the three datasets have their own DOIs, which can be accessed using the URLs below.</p> <ul> <li>Minimal Test Run Dataset (1.14GB) : https://doi.org/10.5281/zenodo.10835761</li> </ul> <pre><code>## To download the tarball from Zenodo, you can use the following command\nwget \"https://zenodo.org/records/10835761/files/B08Csub_20240318_raw.tar.gz\"\n\n## uncompress the tarball using the following command:\nmkdir B08Ctest\ncd B08Ctest\ntar xzvf ../B08Csub_20240318_raw.tar.gz\n</code></pre> <ul> <li>Shallow Liver Section Dataset (23.7GB) : https://doi.org/10.5281/zenodo.10840696 </li> </ul> <pre><code>## To download the tarball from Zenodo, you can use the following command\n\n## create a directory to store the data\nmkdir B08Cshallow\ncd B08Cshallow\n\n## download the 1st-seq FASTQ file\nwget \"https://zenodo.org/records/10840696/files/9203-AP.L3.B08C.R1_001.fastq.gz\"\n\n## download the 2nd-seq FASTQ files (R1 and R2)\nwget \"https://zenodo.org/records/10840696/files/9748-YK-3_CGAGGCTG_S3_R1_001.fastq.gz\"\nwget \"https://zenodo.org/records/10840696/files/9748-YK-3_CGAGGCTG_S3_R2_001.fastq.gz\"\n\n## Additionally, you may want to download md5sum files \n## to verify the integrity of the downloaded files\n</code></pre> <ul> <li>Deep Liver Section Dataset (250GB) : Link to Deep Blue Data <ul> <li>Note that you need to use Globus to download the dataset.</li> <li>Note that this dataset contains only additional 2nd-seq FASTQ files in addition to the Shallow Liver Section Dataset, so you need to download the shallow dataset first. </li> </ul> </li> </ul>"},{"location":"getting_started/execute/","title":"Executing the NovaScope Pipeline","text":""},{"location":"getting_started/execute/#preliminary-steps","title":"Preliminary Steps","text":"<p>Before running the full pipeline, performing a sanity check by executing a dry run is highly recommended. A dry run verifies that your <code>config_job.yaml</code> is properly configured and outlines the necessary jobs to be executed. </p> <p>Additionally, you can create a rule graph that visually represents the structure of the workflow or a Directed Acyclic Graph (DAG) to view all jobs and their actual dependency structure.</p> <pre><code># paths\nsmk_dir=/path/to/the/novascope/directory\njob_dir=/path/to/the/job/directory              # The job directory should has the `config_job.yaml` file.\n\n## (recommended) start with a dry run\n## - view all information:\nsnakemake -s $smk_dir/NovaScope.smk --rerun-incomplete -d $job_dir --dry-run -p\n\n## - simply summarize the jobs to be executed without other information:\nsnakemake -s $smk_dir/NovaScope.smk --rerun-incomplete -d $job_dir --dry-run --quiet\n\n## (optional) visualization:\n## - (1) rulegraph\nsnakemake --rulegraph  -s $smk_dir/NovaScope.smk --rerun-incomplete -d $job_dir | dot -Tpdf &gt; rulegraph.pdf\n\n## - (2) DAG\nsnakemake --dag  -s $smk_dir/NovaScope.smk --rerun-incomplete -d $job_dir | dot -Tpdf &gt; dag.pdf\n</code></pre>"},{"location":"getting_started/execute/#execution-options","title":"Execution Options","text":""},{"location":"getting_started/execute/#option-a-local-execution","title":"Option A: Local Execution","text":"<p>If your computing environment does not require a job scheduler such as Slurm, you can run the pipeline locally. You will need to specify the number of cores.</p> <p>An example script is provided below. Make sure to replace the variables to relevant paths, the number of cores, and the time to wait for latency. The <code>--rerun-incomplete</code> enable the pipeline to re-run any jobs the output of which is identified as incomplete.</p> <pre><code>smk_dir=/path/to/the/novascope/directory\njob_dir=/path/to/the/job/directory              # The job directory should has the `config_job.yaml` file.\n\nNcores=&lt;number_of_cores&gt;                        # replace &lt;number_of_cores&gt; by the number of available CPU cores you wish to use\nwait_time=&lt;time_to_wait&gt;                        # Replace &lt;time_to_wait&gt; with a specific duration in seconds, e.g., 120. The pipeline pauses for the defined time awaiting an output file if not instantly accessible after a job, compensating for filesystem delay (default: 5).\n\nsnakemake --latency-wait $wait_time -s ${smk_dir}/NovaScope.smk -d $job_dir --cores $Ncores --rerun-incomplete \n</code></pre> <p>See the following examples to see how to execute the pipeline locally:</p> <ul> <li>Minimal Test Run</li> <li>Shallow Liver Section</li> <li>Deep Liver Section</li> </ul>"},{"location":"getting_started/execute/#option-b-slurm-using-a-master-job","title":"Option B: SLURM using a Master Job","text":"<p>If your computing environment expects to run jobs via a job scheduler such Slurm, a recommended approach to submit a 'Master Job' that oversees and manage the status of all other jobs. </p> <p>First, make sure you have the slurm configuration file available. The <code>--latency-wait</code> and <code>--rerun-incomplete</code> options are preset in the example slurm configuration file, eliminating the need for manual specification.</p> <p>Now you need to establish the master job. The primary role of this job is to monitor the progress of all tasks, handle job submissions based on dependencies and available resources. Thus, it requires minimal memory but an extended time limit. Its time limit should be longer than the total time required to complete all associated jobs. </p> <p>Create a file similar to the information below. Note that the details of the contents may vary based on your specific computing environment. </p> <pre><code>#!/bin/bash\n####  Job configuration\n#SBATCH --account=&lt;account_name&gt;               # Replace &lt;account_name&gt; with your account identifier\n#SBATCH --partition=&lt;partition_name&gt;           # Replace &lt;partition_name&gt; with your partition name\n#SBATCH --job-name=&lt;job_name&gt;                  # Replace &lt;job_name&gt; with a name for your job\n#SBATCH --nodes=1                              # Number of nodes, adjust as needed\n#SBATCH --ntasks-per-node=1                    # Number of tasks per node, adjust based on requirement\n#SBATCH --cpus-per-task=1                      # Number of CPUs per task, adjust as needed\n#SBATCH --mem-per-cpu=&lt;memory_allocation&gt;      # Memory per CPU, replace &lt;memory_allocation&gt; with value, e.g., \"2000m\"\n#SBATCH --time=&lt;time_limit&gt;                    # Job time limit, replace &lt;time_limit&gt; with value, e.g., \"72:00:00\"\n#SBATCH --mail-user=&lt;your_email&gt;               # Replace &lt;your_email&gt; with your email address\n#SBATCH --mail-type=END,FAIL,REQUEUE           # Notification types for job status\n#SBATCH --output=./logs/&lt;log_filename&gt;         # Replace &lt;log_filename&gt; with the log file name pattern\n\n# path\nsmk_dir=/path/to/the/novascope/directory\njob_dir=/path/to/the/job/directory                                   # The job directory should has the `config_job.yaml` file.\nslurm_params=\"--profile /path/to/the/slurm/configuration/directory\"  # The slurm configuration directory should have the slurm configuration file: `config.yaml`.\n\n# execute the NovaScope pipeline\nsnakemake $slurm_params -s ${smk_dir}/NovaScope.smk -d $job_dir \n</code></pre> <p>Specific examples prepared for the three datasets are provided below:</p> <ul> <li>Minimal Test Run</li> <li>Shallow Liver Section</li> <li>Deep Liver Section test runs.</li> </ul> <p>Then submit the master job through <code>sbatch</code>:</p> <pre><code>sbatch submit_HPC.job\n</code></pre>"},{"location":"getting_started/execute/#option-c-slurm-via-command-lines","title":"Option C: SLURM via Command Lines","text":"<p>For a small number of quick jobs, you can submit them with a single command line without submitting a master job through Slurm. </p> <p>This is similar to the local execution, but you need to specify the Slurm parameters. Ensure the slurm configuration file is ready before proceeding. The <code>--latency-wait</code> and <code>--rerun-incomplete</code> options are pre-configured in the example slurm file.</p> <p>It is important to remember that if you are logged out before all jobs have been submitted to Slurm, any remaining jobs, i.e., those haven't been submitted, will not be submitted.</p> <pre><code># path\nsmk_dir=/path/to/the/novascope/directory\njob_dir=/path/to/the/job/directory                                   # The job directory should has the `config_job.yaml` file.\nslurm_params=\"--profile /path/to/the/slurm/configuration/directory\"  # The slurm directory should have the configuration file: `config.yaml`.\n\n# execute the NovaScope pipeline\nsnakemake $slurm_params -s ${smk_dir}/NovaScope.smk -d $job_dir\n</code></pre>"},{"location":"getting_started/intro/","title":"Getting Started with NovaScope","text":""},{"location":"getting_started/intro/#introduction","title":"Introduction","text":"<p>This tutorial provides an instruction of running  NovaScope based on the  three example datasets  provided with the published protocol. </p> <p>Before downloading the example datasets, you must install NovaScope in your computing environment, and  set up your own config file. </p> <p>In this tutorial, we will provide guidance on (a) how to access the  example datasets, (b) how to set up your input configuration file, and (c) how to execute the NovaScope pipeline based on the prepared input files.</p>"},{"location":"getting_started/job_config/","title":"Configuring a NovaScope Run","text":""},{"location":"getting_started/job_config/#overview","title":"Overview","text":"<p>Once you have installed NovaScope and downloaded the input data, the next step is to configure a NovaScope run. This mainly involves preparing the input configuration files (in YAML) for the run.</p>"},{"location":"getting_started/job_config/#preparing-input-config-files","title":"Preparing Input Config Files","text":"<p>The pipeline requires to have <code>config_job.yaml</code> file in the working directory (indicated by <code>-d</code> or <code>--directory</code>) to specify all input files, output files, and parameters. </p> <p>For user's convenience, we provide separate example <code>config_job.yaml</code> files for the Minimal Test Run Dataset, Shallow Liver Section Dataset, and Deep Liver Section Dataset test runs.  </p> <p>The details of each item specified in the <code>config_job.yaml</code> is described below:</p>"},{"location":"getting_started/job_config/#a-template-of-the-config-file","title":"A Template of the Config File","text":"<p>Below is a template of the <code>config_job.yaml</code> file.  Mandatory fields are marked as \"REQUIRED FIELD\".</p> <pre><code>## Section to Specify Input Datta\ninput:\n  flowcell: &lt;flowcell_id&gt;                       ## REQUIRED FIELD (e.g. N3-HG5MC)\n  chip: &lt;section_chip_id&gt;                       ## REQUIRED FIELD (e.g. B08C)\n  species: &lt;species_info&gt;                       ## REQUIRED FIELD (e.g. \"mouse\")\n  lane: &lt;lane_id&gt;                               ## Optional. Auto-assigned based on section_chip_id's last letter if absent (A-&gt;1, B-&gt;2, C-&gt;3, D-&gt;4).\n  seq1st:                                       ## 1st-seq information\n    prefix: &lt;seq1st_id&gt;                         ## Optional. Defaults to \"L{lane}\" if absent.\n    fastq: &lt;path_to_seq1st_fastq_file&gt;          ## REQUIRED FIELD\n    layout: &lt;path_to_sbcd_layout&gt;               ## Optional. Default based on section_chip_id\n  seq2nd:                                       ## 2nd-seq information\n    - prefix: &lt;seq2st_pair1_id&gt;                 ## REQUIRED FIELD - for first pair of FASTQ files\n      fastq_R1: &lt;path_to_seq2nd_pair1_fastq_Read1_file&gt; ## REQUIRED FIELD - Read 1 FASTQ file\n      fastq_R2: &lt;path_to_seq2nd_pair1_fastq_Read2_file&gt; ## REQUIRED FIELD - Read 2 FASTQ file\n    - prefix: &lt;seq2st_pair2_id&gt;                 ## Optional - if there are &gt;1 pair of FASTQs\n      fastq_R1: &lt;path_to_seq2nd_pair2_fastq_Read1_file&gt;\n      fastq_R2: &lt;path_to_seq2nd_pair2_fastq_Read2_file&gt;\n    # ... (if there are more 2nd-seq FASTQ files)\n  label: &lt;seq2nd_version&gt;                       ## Optional. A version label (e.g. v1)\n  histology: &lt;path_to_the_input_histology_file&gt; ## Optional, only if histology alignment is needed.\n\n## Output\noutput: &lt;output_directory&gt;                      ## REQUIRED FIELD (e.g. /path/to/output/directory)\nrequest:                                        \n  - &lt;required_output1&gt;                          ## REQUIRED FIELD (e.g. sge-per-chip)\n  - &lt;required_output2&gt;                          ## Optionally, you can request multiple outputs\n  # ...\n\n## Environment\nenv_yml: &lt;path_to_config_env.yaml_file&gt;         ## If absent, the pipeline will check if a \"config_env.yaml\" file exists in the `info` subdirectory in the Novascope repository.\n\n## ================================================\n##\n##  Additional Fields:\n## \n##    The \"preprocess\" and \"histology\" parameters are included below, along side the default values.\n##    You only need to revise and enable the following parameters if you wish to utilize values different than the default.\n##\n## ================================================\n\n### UNCOMMENT RELEVANT LINES TO ENABLE THE ADDITIONAL PARAMETERS\n#preprocess:\n#  fastq2sbcd:\n#    format: DraI32          ## Example data uses DraI31, but DraI32 is a typical format.\n#\n#  sbcd2chip:                ## specify the parameters for sbcd2chip\n#    gap_row: 0.0517\n#    gap_col: 0.0048\n#    dup_maxnum: 1\n#    dup_maxdist: 1\n#\n#  smatch:                   ## specify the parameters for smatch\n#    skip_sbcd: 1            ## If absent, default skip_sbcd follows the fastq2sbcd format: 1 for DraI31 and 0 for DraI32.\n#    match_len: 27           ## Length of spatial barcode considered to be a perfect match.\n#\n#  align:                    ## specify the parameters for align (STARsolo)\n#    min_match_len: 30       ## A minimum number of matching bases.\n#    min_match_frac: 0.66    ## A minimum fraction of matching bases.\n#    len_sbcd: 30            ## Length of spatial barcode (in Read 1) to be copied to output FASTQ file (Read 1).\n#    len_umi: 9              ## Length of UMI barcode (in Read 2) to be copied to output FASTQ file (Read 1).\n#    len_r2: 101             ## Length of read 2 after trimming (including randomers).\n#    exist_action: overwrite ## Skip the action or overwrite the file if an intermediate or output file already exists. Options: \"skip\", and \"overwrite\".\n#    resource:               ## See the \"Detailed Description of Individual Fields\" below.\n#      assign_type: stdin\n#      stdin:\n#        partition: standard\n#        threads: 10\n#        memory: 70000m\n#\n#  dge2sdge:                 ## specify the parameters for dge2sdge\n#    layout: null            ## If absent, the layout file in the info/assets/layout_per_section_basis/layout.1x1.tsv will be used for RGB plots.\n#\n#  gene_visual: null         ## If you have a specific set of genes to visualize, specify the path to a file containing a list of gene names (one per line) here. By default, the top five genes with the highest expression are visualized.\n#\n#  visualization:            ## specify the parameters for visualization\n#    drawxy:\n#      coord_per_pixel: 1000\n#      intensity_per_obs: 50\n#      icol_x: 3\n#      icol_y: 4\n#\n#histology:                  ## specify the parameters for histology alignment using historef\n#    resolution: 10\n#    figtype: \"hne\"          ## Options: \"hne\", \"dapi\", and \"fl\".\n</code></pre>"},{"location":"getting_started/job_config/#detailed-description-of-individual-fields","title":"Detailed Description of Individual Fields","text":""},{"location":"getting_started/job_config/#input","title":"Input","text":"<ul> <li> <p><code>seq1st</code>:</p> <ul> <li><code>prefix</code>: The <code>prefix</code> will be used to organize the 1st-seq FASTQ files. Make sure the <code>prefix</code> parameter in the corresponding flowcell is unique.  </li> <li><code>layout</code>: A file to provide the layout of tiles in a chip with the following format. If absent,NovaScope will automatically look for the spatial barcode (sbcd) layout within the NovaScope repository at info/assets/layout_per_tile_basis, using the section chip ID for reference.   <pre><code>lane  tile  row  col  rowshift  colshift\n3     2556  1    1    0         0\n3     2456  2    1    0         0.1715\n</code></pre><ul> <li>lane: Lane IDs</li> <li>tile: Tile IDs </li> <li>row &amp; col: The layout position</li> <li>rowshift &amp; colshift: The gap information</li> </ul> </li> </ul> </li> <li> <p><code>seq2nd</code>: Every FASTQ pair associated with the input section chip should be supplied in <code>seq2nd</code>.  The <code>prefix</code> should be unique among all 2nd-seq FASTQ pairs, not just within this flowcell.</p> </li> </ul>"},{"location":"getting_started/job_config/#output","title":"Output","text":"<p>The output directory will be used to organize the input files and store output files. Please see the structure directory here.</p>"},{"location":"getting_started/job_config/#requests","title":"Requests","text":"<p>The pipeline interprets the requested output files via <code>request</code> and determines the execution flow. The <code>request</code> parameter should indicate the final output required, and all intermediary files contributing to the final output will be automatically generated (i.e., the dependencies between rules). For detailed insights into the excution flow, please consult the execution flow by request alongside the rulegraph. </p> <p>Below are the options with their output files and links to detailed output information.</p> Option Main Output Files Details <code>sbcd-per-flowcell</code> Spatial barcode map (per-tile basis) and Manifest file for a flowcell fastq2sbcd <code>sbcd-per-chip</code> Spatial barcode map for a section chip, Image of spatial barcode distribution sbcd2chip <code>smatch-per-chip</code> File with matched spatial barcodes, Image of matched barcode spatial distribution smatch <code>align-per-chip</code> Binary Alignment Map (BAM) file, Digital gene expression matrix (DGE) for genomic features align <code>sge-per-chip</code> Spatial digital gene expression matrix (SGE), Spatial distribution images for all transcripts and specific genes of interest. dge2sdge <code>hist-per-chip</code> Geotiff file for coordinate transformation between SGE and histology image, A Resized TIFF file historef"},{"location":"getting_started/job_config/#preprocess","title":"preprocess","text":"<p>More details for the parameters in <code>preprocess</code> field are provided in the NovaScope Walkthrough.</p> <ul> <li><code>align</code><ul> <li><code>resource</code>:  The <code>resource</code> parameters are only applicable for HPC users. <ul> <li><code>assign_type</code>: two available options are <code>\"stdin\"</code> (recommended) and <code>\"filesize\"</code>. The <code>stdin</code>, short for standard input, requires the user manually define resource to be used for alignment. The <code>\"filesize\"</code> will automatically allocate resource based on the total size of the input 2nd-seq FASTQ files and the available computing resources. Please find details and an example for each option below.</li> <li><code>\"stdin\"</code>: this field is required if <code>assign_type</code> is defined as <code>stdin</code>. Revise <code>partition</code>, <code>threads</code>, and <code>memory</code> in the following example to fit your case.     <pre><code>preprocess:\n#  ...\n  align:\n  #    ...\n    resource:\n      assign_type: stdin\n      stdin:\n        partition: standard\n        threads: 10\n        memory: 70000m\n</code></pre></li> <li><code>filesize</code>: If using <code>assign_type</code> is defined as <code>filesize</code>, provide details about the computing capabilities of all available nodes, including <code>partition</code>, the available number of CPUs(<code>max_n_cpus</code>), and the memory allocated per CPU (<code>mem_per_cpu</code>). The current resource allocation strategy operates on the following basis: 1) For input 2nd-seq FASTQ files with a combined size under 200GB, allocate 70GB of memory for alignment processes; 2) When the total file size ranges from 200GB to 400GB, memory allocation increases to 140GB; 3) For file sizes exceeding 400GB, 330GB of memory is allocated specifically for the alignment.     <pre><code>preprocess:\n#  ...\n   align:\n#   ...\n    resource:\n      assign_type: filesize\n      filesize:\n        - partition: standard\n          max_n_cpus: 20\n          mem_per_cpu: 7g\n        - partition: largemem\n          max_n_cpus: 10\n          mem_per_cpu: 25g\n</code></pre></li> </ul> </li> </ul> </li> </ul>"},{"location":"getting_started/output/","title":"Expected Output from NovaScope","text":""},{"location":"getting_started/output/#output-directory-structure","title":"Output Directory Structure","text":"<p>The directory passed through <code>output</code> paramter in the <code>config_job.yaml</code> will be organized as follows, </p> <pre><code>\u251c\u2500\u2500 align\n\u251c\u2500\u2500 histology\n\u251c\u2500\u2500 seq1st\n\u2514\u2500\u2500 seq2nd\n</code></pre>"},{"location":"getting_started/output/#seq1st","title":"seq1st","text":"<p>The seq1st directory is structured for organizing 1st sequencing FASTQ files and spatial barcode maps. It includes:</p> <ul> <li>A <code>fastqs</code> subdirectory for all input 1st sequencing FASTQ files via symlink.</li> <li>Two subdirectories for spatial barcode maps:<ul> <li><code>sbcds</code> for maps of individual tiles from the 1st sequencing,</li> <li><code>nbcds</code> for a map organized on a per-chip basis, used in later processing.</li> </ul> </li> </ul> <pre><code>\u2514\u2500\u2500 seq1st\n    \u2514\u2500\u2500 &lt;flowcell_ID&gt;\n        \u251c\u2500\u2500 fastqs\n        \u251c\u2500\u2500 nbcds\n        \u2514\u2500\u2500 sbcds\n</code></pre>"},{"location":"getting_started/output/#seq2nd","title":"seq2nd","text":"<p>The <code>seq2nd</code> directory is dedicated to managing all input 2nd sequencing FASTQ files via symlinks. The directory structure is as follows:</p> <pre><code>\u2514\u2500\u2500 seq2nd\n    \u251c\u2500\u2500 &lt;prefix1&gt;\n    |   \u251c\u2500\u2500 &lt;prefix1&gt;.R1.fastq.gz\n    |   \u2514\u2500\u2500 &lt;prefix1&gt;.R2.fastq.gz\n    \u2514\u2500\u2500 &lt;prefix2&gt;\n        \u251c\u2500\u2500 &lt;prefix2&gt;.R1.fastq.gz\n        \u2514\u2500\u2500 &lt;prefix2&gt;.R2.fastq.gz\n</code></pre>"},{"location":"getting_started/output/#histology","title":"histology","text":"<p>The <code>histology</code> directory is designated for holding all input histology files.</p>"},{"location":"getting_started/output/#align","title":"align","text":"<p>The <code>align</code> directory encompasses several subdirectories, including:  (1) <code>match</code>, which houses the outcomes of aligning second sequencing reads with spatial barcodes for the corresponding chip section;  (2) <code>bam</code>, where alignment outcomes such as the BAM file, summary metrics, and visualizations are stored;  (3) <code>sge</code>, containing a spatial gene expression matrix (SGE)  and its associated visualizations;  (4) <code>histology</code>, which stores histology images aligned with the spatial coordinates of the SGE.</p> <pre><code>align\n\u2514\u2500\u2500 &lt;flowcell_ID&gt;\n    \u2514\u2500\u2500 &lt;section_chip_ID&gt;\n     \u00a0\u00a0 \u251c\u2500\u2500 bam\n     \u00a0\u00a0 \u251c\u2500\u2500 histology\n     \u00a0\u00a0 \u251c\u2500\u2500 match\n     \u00a0\u00a0 \u2514\u2500\u2500 sge\n</code></pre>"},{"location":"getting_started/output/#downstream-analysis","title":"Downstream Analysis","text":"<p>The aligned sequenced reads can be directly used for tasks that require read-level information, such as allele-specific expression or somatic variant analysis. The SGE can also be analyzed with many software tools, such as Latent Dirichlet Allocation (LDA) and Seurat. </p> <p>An exemplary downstream analysis is provided at NovaScope-exemplary-downstream-analysis.</p>"},{"location":"home/documentation_overview/","title":"Documentation Overview","text":"<p>The current documentation of NovaScope include the following sections:</p> <p>Home:</p> <ul> <li>Documentation Overview: Summarizes the contents and structure of the NovaScope documentation.</li> <li>Workflow Structure: Describes NovaScope's workflow, including rules and their dependencies.</li> </ul> <p>Installation:</p> <ul> <li>Installing NovaScope: Details of installing required softwares and acquiring reference database.</li> <li>Environment Setup: Outlines how to prepare a configuration file for computing environment.</li> <li>Slurm: (Optional) Guidance on setting up a configuration for the SLURM job scheduler.</li> </ul> <p>Getting Started:</p> <ul> <li>Introduction: A quick introduction of using NovaScope with example datasets.</li> <li>Accessing Input Data: Information on accessing three provided example datasets.</li> <li>Job Configuration: Instructions for preparing a configuration file for a job.</li> <li>Execute NovaScope: Describes three ways for running NovaScope.</li> <li>Output: Explains the output directory structure and how to utilize the generated data.</li> </ul> <p>NovaScope Walkthrough: * A Rule Execution Guide: Essential concepts and rule execution flows by <code>request</code>. * Specific Rule Instructions: Detailed instructions for all rules.</p>"},{"location":"home/workflow_structure/","title":"Workflow Structure","text":"<p>The workflow of NovaScope can be visualized in the following rule graph.</p> <p>Figure 2: The overall flow and dependencies between rules: Each node in the graph represents a rule within your Snakemake workflow. Each arrow among nodes stands for the rule dependency among rules, with the direction that points from prerequisite rules to a dependent rule. The prerequisite rules must be executed before the dependent rule can start.</p>"},{"location":"installation/env_setup/","title":"Setting up a Environment YAML File","text":"<p>NovaScope requires a YAML file to configure the environment. This file is used to specify the paths to the required tools, reference databases, and Python environment. To create your own <code>config_env.yaml</code> file for the environment setup, you may copy from our example available in our GitHub repository.</p> <p>Below is a brief description of all the items in the YAML file. Replace the placeholders with your specific input variables to customize it according to your needs, and prepare your own <code>config_env.yaml</code>.</p>"},{"location":"installation/env_setup/#tools","title":"Tools","text":"<p>For tools that are not explicitly defined, the pipeline will automatically check if they are installed and include them in the system path for use. This allows the pipeline to utilize these tools without needing manual configuration for each one.</p> <pre><code>tools:\n  spatula: /path/to/spatula/bin/spatula                     ## Default: \"spatula\"\n  samtools: /path/to/samtools/samtools                      ## Default: \"samtools\"\n  star: /path/to/STAR_2_7_11b/bin/Linux_x86_64_static/STAR  ## Default: \"STAR\"\n</code></pre> <ul> <li><code>samtools</code>: For users in High-Performance Computing (HPC) environments with <code>samtools</code> installed, it's feasible to use <code>envmodules</code> (see Environment Modules) to load <code>samtools</code> rather than defining its path here.</li> </ul>"},{"location":"installation/env_setup/#environment-modules","title":"Environment Modules","text":"<p>For HPC users, use the <code>envmodules</code> section to load the required software tools as modules. If a tool is not listed in the <code>envmodules</code> section, the pipeline will assume it's installed system-wide. For local executions, you may remove this section if running the pipeline on your local machine.</p> <p>Please specify the version information. </p> <pre><code>envmodules:\n  python: \"python/&lt;version_information&gt;\"\n  gcc: \"gcc/&lt;version_information&gt;\"\n  gdal: \"gdal/&lt;version_information&gt;\"\n  imagemagick: \"imagemagick/&lt;version_information&gt;\"\n  # snakemake: \"snakemake/&lt;version_information&gt;\"\n  # samtools: \"Bioinformatics &amp;&amp; samtools\"\n</code></pre> <ul> <li><code>python</code>: If your Python environment was set up using a Python version accessed through a module, your environment depends on certain shared files from that module. Therefore, you must add the <code>python: \"python/&lt;version_information&gt;\"</code>  in the <code>envmodules</code> section to load the same module you initially used to establish your environment. But if you set up with a locally installed Python (not using <code>module load</code>), comment out or remove the module line <code>python: \"python/&lt;version_information&gt;\"</code>.</li> <li><code>samtools</code>: Using <code>envmodules</code> to load <code>samtools</code> can be an alternative to specifying its path in <code>tools</code>. The given example is designed for instances where <code>samtools</code> is integrated into the <code>Bioinformatics</code> module system, which necessitates loading the <code>Bioinformatics</code> module prior to loading <code>samtools</code>. In this case, provide all modules that required to be loaded in the correct order, joint by <code>&amp;&amp;</code>.</li> </ul>"},{"location":"installation/env_setup/#reference-genome-index","title":"Reference Genome Index","text":"<p>Please list every reference database used for alignment here. The reference data can be obtained via the cellranger download page. Example instructions to build STAR index from the reference file is described in the Requirements section.</p> <p>Please ensure the reference genome indices correspond to the species of your input data. </p> <pre><code>ref:\n  align:\n    mouse: \"/path/to/refdata-gex-GRCm39-2024-A/star_2.7_11b\"\n    human: \"/path/to/refdata-gex-GRCh39-2024-A/star_2.7_11b\"\n   #...\n</code></pre>"},{"location":"installation/env_setup/#python-environment","title":"Python Environment","text":"<p>You also need to specify the path of python virtual environment by modifying the following line.</p> <pre><code>pyenv: \"/path/to/python/virtual/env\"\n</code></pre>"},{"location":"installation/requirement/","title":"Installing NovaScope","text":"<p>Installing NovaScope involves multiple steps. This document provides instructions on how to install the necessary software tools and obtain reference datasets.</p>"},{"location":"installation/requirement/#installing-snakemake","title":"Installing Snakemake","text":"<p>Snakemake orchestrates the workflow of NovaScope pipeline. We recommend installing Snakemake using conda and/or mamba. For detailed installation instructions of these tools, please refer to the official Snakemake documentation. </p>"},{"location":"installation/requirement/#checking-snakemake-installation","title":"Checking Snakemake Installation","text":"<p>If you are unsure whether Snakemake is installed in your system or not, you can check by running the following command:</p> <pre><code>snakemake --version\n</code></pre> <p>In some systems that supports <code>module</code>, you may be able to load the <code>snakemake</code> module using the following command:</p> <pre><code>## check if snakemake is available as a module\nmodule avail snakemake\n\n## load the available module (specify the version if necessary)\nmodule load snakemake\n</code></pre> <p>NovaScope has been tested for compatibility with Snakemake v7.29.0 and v8.6.0.</p>"},{"location":"installation/requirement/#installing-snakemake-using-conda-and-mamba","title":"Installing Snakemake Using Conda and Mamba","text":"<p>If you need to install Snakemake, below is a simplified sequence of instruction. Please refer to official Snakemake documentation for more detailed instructions.</p> <pre><code>## download miniconda\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\n\n## install miniconda\nbash Miniconda3-latest-Linux-x86_64.sh\n## Follow the on-screen instructions to complete the installation. \n\n## Activate the Miniconda installation:\n## IMPORTANT: change /path/to/miniconda to the path you installed miniconda\neval \"$(/path/to/miniconda3/bin/conda shell.bash hook)\"\n\n## If you included conda initialization in .bashrc the above line can be replaced with\n## source ~/.bashrc\n\n## create a new conda environment\nconda create -n snakemake-env python=3.9\n\n## activate the new environment\nconda activate snakemake-env\n\n## install mamba in the conda environment\nconda install mamba -n snakemake-env\n\n## activate the environment to ensure mamba is correctly set up\nconda activate snakemake-env\n\n## install snakemake using mamba\nmamba install snakemake\n\n## verify the installation of snakemake\nsnakemake --version\n</code></pre>"},{"location":"installation/requirement/#configuring-python-virtual-environment","title":"Configuring Python Virtual Environment","text":"<p>We recommend creating a new Python environment for NovaScope using the following steps. If you already have an existing Python environment all required packages (see pyenv_req.txt), you may skip this step. </p> <p>You may create a new Python environment using the following commands:</p> <pre><code>## First, we recommend activating conda/mamba environment before setting up venv, using:\n# eval \"$(/path/to/miniconda3/bin/conda shell.bash hook)\"\n# conda activate snakemake-env\n##\n## set the path to the python virtual environment directory\npyenv_dir=/path/to/python/virtual/environment/directory  ## provide the path of venv\n## pyenv_dir=./venvs   ## uncomment this line if you want to create virtual environment locally\npyenv_name=novascope_venv\nsmk_dir=/path/to/the/novascope/directory\n\n## create the python virtual environment (need to be done only once)\nmkdir -p ${pyenv_dir}\ncd ${pyenv_dir}\npython -m venv ${pyenv_name}\n\n## activate the python environment (every time you want to use the environment)\nsource ${pyenv_name}/bin/activate\n\n## install the required packages (need to be done only once)\npip install -r ${smk_dir}/installation/pyenv_req.txt\n</code></pre>"},{"location":"installation/requirement/#installing-other-dependent-tools","title":"Installing Other Dependent Tools","text":"<p>NovaScope depends on a number of software tools, detailed below. The versions specified for each software tool have been verified for compatibility with our pipeline, though other versions may also be compatible.</p> <ul> <li>STARsolo (v2.7.11b)</li> <li>samtools (v1.13; v1.14; v1.19)</li> <li>spatula (v0.1.0)</li> <li>Python (v3.9.12, v3.10, or v3.12.2)</li> <li>ImageMagick (7.1.0-25.lua and 7.1.1-30)</li> <li>GDAL (v3.5.1) (Required for histology alignments)</li> </ul> <p>We provide an example work log documenting the installation of the aforementioned software tools.</p>"},{"location":"installation/requirement/#installing-novascope_1","title":"Installing NovaScope","text":"<p>To install NovaScope, clone the repository from GitHub using the following command:</p> <pre><code>git clone https://github.com/seqscope/NovaScope.git\n</code></pre>"},{"location":"installation/requirement/#preparing-reference-genomes","title":"Preparing Reference Genomes","text":"<p>The reference genome for the species of interest must be downloaded and indexed for alignment. STARsolo accepts the reference genomes prepared by cellranger, therefore, one of the simplest way is to download the reference genome from the cellranger download page.</p> <p>The recommended reference genome for mouse is GRCm39.</p> <p>However, the STAR index packaged by the cellranger download is outdated and will not be compatible with the latest version of STARsolo. Therefore, we recommend indexing it using the latest version of STARsolo. </p> <p>Note that this process will take A LOT OF TIME, typically a few to several hours.</p> <pre><code>## download the reference genome package\ncurl -O \"https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-GRCm39-2024-A.tar.gz\"\n\n## uncompressed the tar file\ntar -xvf refdata-gex-GRCm39-2024-A.tar.gz\ncd refdata-gex-GRCm39-2024-A\n\n## uncompress GTF file\ngzip -d genes/genes.gtf.gz\n\n## index the reference genome\nSTARBIN=/path/to/STAR_2.7.11b/Linux_x86_64_static/STAR\n${STARBIN} --runMode genomeGenerate \\\n    --runThreadN 1 \\\n    --genomeDir ./star_2_7_11b \\\n    --genomeFastaFiles ./fasta/genome.fa \\\n    --genomeSAindexNbases 14 \\\n    --genomeChrBinNbits 18 \\\n    --genomeSAsparseD 3 \\\n    --limitGenomeGenerateRAM 17179869184 \\\n    --sjdbGTFfile ./genes/genes.gtf\n</code></pre> <p>The recommended reference genome for human is GRCh38.</p> <pre><code>## download the reference genome package\ncurl -O \"https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-GRCh38-2024-A.tar.gz\"\n\n## uncompressed the tar file\ntar -xvf refdata-gex-GRCh38-2024-A.tar.gz\ncd refdata-gex-GRCh38-2024-A\n\n## uncompress GTF file\ngzip -d genes/genes.gtf.gz\n\n## index the reference genome\nSTARBIN=/path/to/STAR_2.7.11b/Linux_x86_64_static/STAR\n${STARBIN} --runMode genomeGenerate \\\n    --runThreadN 1 \\\n    --genomeDir ./star_2_7_11b \\\n    --genomeFastaFiles ./fasta/genome.fa \\\n    --genomeSAindexNbases 14 \\\n    --genomeChrBinNbits 18 \\\n    --genomeSAsparseD 3 \\\n    --limitGenomeGenerateRAM 17179869184 \\\n    --sjdbGTFfile ./genes/genes.gtf\n</code></pre> <p>For other species, you may follow the instructions provided by cellranger or STARsolo to prepare the reference genome.</p>"},{"location":"installation/requirement/#optional-install-the-historef-package-from-the-whl-file","title":"(Optional) Install the historef Package from the whl File","text":"<p>If you want to align your histology images with the spatial gene expression data, you may install the historef package from the whl file. Below is an example instruction to download historef's latest version at document creation. To access the most recent version, please see its GitHub repository.</p> <pre><code>## activate the python environment\nsource ${pyenv_dir}/$pyenv_name/bin/activate\n\n### download the historef package\nwget -P ${smk_dir}/installation https://github.com/seqscope/historef/releases/download/v0.1.1/historef-0.1.1-py3-none-any.whl\n\n## install the historef package\npip install ${smk_dir}/installation/historef-0.1.1-py3-none-any.whl\n</code></pre>"},{"location":"installation/slurm/","title":"Snakemake with Slurm","text":"<p>It is recommended to integrate SLURM scheduler with Snakemake, which can automate the process of submitting your jobs.</p> <p>Please be aware that Snakemake introduced significant updates for cluster configuration starting from version 8. Thus, we advise checking to verify your Snakemake version using <code>snakemake --version</code>. </p> <p>In NovaScope, we utilized a cluster configuration profile to define the details of the cluster and resources given its consistency and time-saving benefits. More details are provided below. Those files were crafted with inspiration from the smk-simple-slurm repository.</p>"},{"location":"installation/slurm/#a-cluster-configuration-file-for-snakemake-v7290","title":"A Cluster Configuration file for Snakemake v7.29.0","text":"<p>Create a <code>config.yaml</code> with the following settings. Please substitute the placeholders below, marked with <code>&lt;&gt;</code>, to suit your specific case. Please see our example file at slurm/v7.29.0/config.yaml. </p> <pre><code>## Cluster Configuration\n## The following setting also aids in organizing log files by creating rule-specific subdirectories within the job's log directory, each holding its own output and error files.\ncluster:\n  mkdir -p logs/{rule}/ &amp;&amp;\n  sbatch\n    --job-name={rule}_{wildcards}\n    --output=logs/{rule}/{rule}___{wildcards}___%j.out\n    --error=logs/{rule}/{rule}___{wildcards}___%j.err\n    --account={resources.account}\n    --partition={resources.partition}\n    --mem={resources.mem}\n    --time={resources.time}\n    --cpus-per-task={threads}\n    --parsable\n    --nodes={resources.nodes}\n\n## Default Resources for Jobs\ndefault-resources:\n  - partition=&lt;your_default_partition&gt;    # replace &lt;your_default_partition&gt; with your actual partition name\n  - mem=&lt;default_memory_allocation&gt;       # replace &lt;default_memory_allocation&gt; with memory, e.g., \"4G\"\n  - time=&lt;default_time_limit&gt;             # replace &lt;default_time_limit&gt; with time, e.g., \"01:00:00\"\n  - nodes=&lt;default_number_of_nodes&gt;       # replace &lt;default_number_of_nodes&gt; with nodes, e.g., \"1\"\n  - account=&lt;default_account_information&gt; # replace &lt;default_account_information&gt; with your account info\n\n## General Snakemake Settings\njobs: &lt;max_number_of_jobs&gt;                  # replace &lt;max_number_of_jobs&gt; with your desired maximum number of concurrent jobs, e.g., 10\nlatency-wait: &lt;latency_seconds&gt;             # replace &lt;latency_seconds&gt; with the number of seconds to wait if job output is not present, e.g., 120\nlocal-cores: &lt;local_core_count&gt;             # replace &lt;local_core_count&gt; with the max number of cores to use locally, e.g., \"20\"\nrestart-times: &lt;restart_attempts&gt;           # replace &lt;restart_attempts&gt; with the number of times to retry failing jobs, e.g., \"0\" for no retries\nmax-jobs-per-second: &lt;job_submission_rate&gt;  # replace &lt;job_submission_rate&gt; with the limit on how many jobs can be submitted per second, e.g., \"20\"\nkeep-going: &lt;continue_after_failure&gt;        # replace &lt;continue_after_failure&gt; with True or False to indicate whether to continue executing other jobs after a failure\nrerun-incomplete: &lt;rerun_incomplete_jobs&gt;   # replace &lt;rerun_incomplete_jobs&gt; with True or False to decide if incomplete jobs should be rerun\nprintshellcmds: &lt;print_commands&gt;            # replace &lt;print_commands&gt; with True or False to specify if shell commands should be printed before execution\n\n## Scheduler Settings\n#scheduler: greedy      \n\n## Conda Environment Settings\nuse-conda: &lt;True_or_False&gt;               # enable use of Conda environments\nconda-frontend: conda                    # specify Conda as the package manager frontend\n</code></pre>"},{"location":"installation/slurm/#a-cluster-configuration-file-for-snakemake-v860","title":"A Cluster Configuration file for Snakemake v8.6.0","text":"<p>Please first install the Snakemake executor plugin \"cluster-generic\":</p> <pre><code>pip install snakemake-executor-plugin-cluster-generic\n</code></pre> <p>Then, create the cluster configuration file with below. Please substitute the placeholders below, marked with <code>&lt;&gt;</code>, to suit your specific case. Please see our example file at slurm/v8.6.0/config.yaml. </p> <pre><code>## Cluster Configuration\n## The following setting also aids in organizing log files by creating rule-specific subdirectories within the job's log directory, each holding its own output and error files.\nexecutor: \"cluster-generic\"\ncluster-generic-submit-cmd: \"mkdir -p logs/{rule}/ &amp;&amp;\n  sbatch\n    --job-name={rule}_{wildcards} \\\n    --output=logs/{rule}/{rule}___{wildcards}___%j.out \\\n    --error=logs/{rule}/{rule}___{wildcards}___%j.err \\\n    --partition={resources.partition} \\\n    --mem={resources.mem} \\\n    --time={resources.time} \\\n    --cpus-per-task={threads} \\\n    --parsable \\\n    --nodes={resources.nodes} \"\n\n## Default Resources for Jobs\ndefault-resources:\n  - partition=&lt;your_default_partition&gt;    # replace &lt;your_default_partition&gt; with your actual partition name\n  - mem=&lt;default_memory_allocation&gt;       # replace &lt;default_memory_allocation&gt; with memory, e.g., \"4G\"\n  - time=&lt;default_time_limit&gt;             # replace &lt;default_time_limit&gt; with time, e.g., \"01:00:00\"\n  - nodes=&lt;default_number_of_nodes&gt;       # replace &lt;default_number_of_nodes&gt; with nodes, e.g., \"1\"\n  - account=&lt;default_account_information&gt; # replace &lt;default_account_information&gt; with your account info\n\n## General Snakemake Settings\njobs: &lt;max_number_of_jobs&gt;                  # replace &lt;max_number_of_jobs&gt; with your desired maximum number of concurrent jobs, e.g., 10\nlatency-wait: &lt;latency_seconds&gt;             # replace &lt;latency_seconds&gt; with the number of seconds to wait if job output is not present, e.g., 120\nlocal-cores: &lt;local_core_count&gt;             # replace &lt;local_core_count&gt; with the max number of cores to use locally, e.g., \"20\"\nrestart-times: &lt;restart_attempts&gt;           # replace &lt;restart_attempts&gt; with the number of times to retry failing jobs, e.g., \"0\" for no retries\nmax-jobs-per-second: &lt;job_submission_rate&gt;  # replace &lt;job_submission_rate&gt; with the limit on how many jobs can be submitted per second, e.g., \"20\"\nkeep-going: &lt;continue_after_failure&gt;        # replace &lt;continue_after_failure&gt; with True or False to indicate whether to continue executing other jobs after a failure\nrerun-incomplete: &lt;rerun_incomplete_jobs&gt;   # replace &lt;rerun_incomplete_jobs&gt; with True or False to decide if incomplete jobs should be rerun\nprintshellcmds: &lt;print_commands&gt;            # replace &lt;print_commands&gt; with True or False to specify if shell commands should be printed before execution\n\n## Conda Environment Settings\nsoftware-deployment-method: conda\n</code></pre>"},{"location":"installation/slurm/#additional-functions","title":"Additional functions","text":"<p>If you encounter situations where your jobs fail without any warnings, it is feasible to using a cluster status script to keep track of your jobs. See details here.</p>"},{"location":"walkthrough/intro/","title":"Introduction","text":"<p>This Walkthrough section serves as a comprehensive overview of NovaScope's functionality, featuring both a rule execution guide and specific rule instructions.</p> <p>The rule execution guide outlines essential concepts for operating NovaScope and offers a glimpse of the execution flows for various <code>request</code> options.</p> <p>Meanwhile, the specific rule instructions provide detailed information for each rule, including its purpose, inputs and outputs, tips for reviewing output, parameters, dependencies, and relevant code snippets. The output completes with descriptions, naming conventions, file formats, and visualisation for images. Both file format and visualization are demonstrated using results of the Shallow Liver Section Dataset.</p>"},{"location":"walkthrough/execution_guide/core_concepts/","title":"Core Concepts","text":"<p>Before the execution flow by <code>request</code>, below outlines essential concepts for working with NovaScope.</p>"},{"location":"walkthrough/execution_guide/core_concepts/#rule-dependencies","title":"Rule Dependencies","text":"<p>The rule dependencies are determined based on the input and output files specified in the rules. For example, if Rule <code>sbcd2chip</code> requires the output of Rule <code>fastq2sbcd</code> as input, the Rule <code>fastq2sbcd</code> serves as a prerequisite rule to Rule <code>sbcd2chip</code>. </p>"},{"location":"walkthrough/execution_guide/core_concepts/#execution-dynamics","title":"Execution Dynamics","text":"<p>The execution of rules within NovaScope is governed by several key factors, outlined as follows:</p> <ul> <li> <p>Specified Final Output Files: The execution of rules is directly influenced by the final output files requested by the user, as defined by the <code>Request</code> field in the job configuration file. For instance, if the output of a rule (referred to as <code>Rule X</code>) is indicated as the final output file, then <code>Rule X</code> will be executed.</p> </li> <li> <p>Rule Dependencies and Availability of Intermediate Files: NovaScope initiates a systematic evaluation, starting with <code>Rule X</code>, to ascertain the presence of its required input files. If any inputs are missing, NovaScope iteratively identifies and executes the necessary precursor rules to generate these missing inputs, thus ensuring <code>Rule X</code> has everything it needs to proceed.</p> </li> <li> <p>User-Defined Execution Options: Snakemake provides a suite of command-line arguments that allow users to tailor the execution process of the pipeline. Below includes a selection of frequently utilized execution options. For all available execution options and their functionalities, please consult the official Snakemake documentation.</p> <ul> <li><code>--rerun-incomplete</code> and <code>--ignore-incomplete</code>: These options dictate whether to rerun or ignore jobs that started but did not complete successfully in previous attempts.</li> <li><code>--restart-times</code>: This option sets the maximum number of attempts to restart a failing job before it is considered unsuccessful.</li> <li><code>--forceall</code>, <code>-F</code>: This option compels the execution of all rules, irrespective of their current completion status.</li> </ul> </li> </ul>"},{"location":"walkthrough/execution_guide/core_concepts/#rulegraph","title":"Rulegraph","text":"<p>A rulegraph visually maps the rules to be executed alongside their dependencies. </p> <ul> <li>Components: A rulegraph represents each rule as a node, with directed edges showing how the output of one rule serves as the input for another, establishing a clear path of data flow and execution order. </li> <li>Rule Status: Solid lines depict rules set to be executed, while dotted lines indicate rules that will be skipped, as their outputs are already up to date. </li> </ul> <p>By demonstrating the workflow's structure, highlighting the sequence in which tasks are performed and how they interconnect, a rulegraph help understand the entire process from start to finish.</p>"},{"location":"walkthrough/execution_guide/rule_execution/","title":"Execution Flow by Request","text":"<p>This page provides an overview of the rule execution flow tailored to different <code>request</code> specified in the job configuration file of NovaScope. </p> <p>Each <code>request</code> option triggers a specific set of rules. Thus, below provides a rulegraph for each <code>request</code> option to outline the triggered rules and their interdependencies, detailing distinct processing paths. It's important to note that these visual guides are constructed from a baseline scenario where only the initial input 1st-seq and 2nd-seq FASTQ files are present, with no prior processing or intermediate files generated.</p>"},{"location":"walkthrough/execution_guide/rule_execution/#request-sbcd-per-flowcell","title":"Request <code>\"sbcd-per-flowcell\"</code>","text":"<ul> <li> <p>Description: The <code>\"sbcd-per-flowcell\"</code> option initiates the generation of a spatial barcode map specific to a flow cell. Consequently, NovaScope triggers the execution of Rule <code>fastq2sbcd</code>.</p> </li> <li> <p>Rule Graph:</p> </li> </ul>"},{"location":"walkthrough/execution_guide/rule_execution/#request-sbcd-per-chip","title":"Request <code>\"sbcd-per-chip\"</code>","text":"<ul> <li> <p>Description: The <code>\"sbcd-per-chip\"</code> option requests a spatial barcode map specific to a given section chip and a plot of the distribution of spatial barcodes, triggering the execution of Rule <code>sbcd2chip</code> and its prerequisite rule: <code>fastq2sbcd</code>.</p> </li> <li> <p>Rule Graph:</p> </li> </ul>"},{"location":"walkthrough/execution_guide/rule_execution/#request-smatch-per-chip","title":"Request <code>\"smatch-per-chip\"</code>","text":"<ul> <li> <p>Description: For each pair of input 2nd-seq FASTQ files associated with a given chip, the <code>\"smatch-per-chip\"</code> option demands two files, including a file of spatial barcodes matched to the 2nd-seq reads alongside its summary metrics, and an image depicting the spatial distribution of those matched barcodes. This request prompts the execution of Rule <code>smatch</code> and its prerequisite rules: <code>sbcd2chip</code> and <code>fastq2sbcd</code>.</p> </li> <li> <p>Rule Graph:</p> </li> </ul>"},{"location":"walkthrough/execution_guide/rule_execution/#request-align-per-chip","title":"Request <code>\"align-per-chip\"</code>","text":"<ul> <li> <p>Description: The <code>\"align-per-chip\"</code> option request a Binary Alignment Map (BAM) from the alignment as well as the digital gene expression matrices (DGEs) for Gene, GeneFull, splice junctions (SJ), and Velocyto. It provokes the execution of Rule <code>align</code> and its prerequisite rules including <code>smatch</code>, <code>sbcd2chip</code>, and <code>fastq2sbcd</code>.</p> </li> <li> <p>Rule Graph:</p> </li> </ul>"},{"location":"walkthrough/execution_guide/rule_execution/#request-sge-per-chip","title":"Request <code>\"sge-per-chip\"</code>","text":"<ul> <li> <p>Description: The <code>\"sge-per-chip\"</code> option inquires: 1) a spatial digital gene expression matrix (SGE) encompassing all genomic features with two plots visualizing the distribution of the aligned spatial barcodes; 2) visualization for genes of interest provided in the job configuration file. It requests the execution of Rule <code>dge2sdge</code> and <code>gene_visual</code>, alongside the prerequisite rules: <code>align</code>, <code>smatch</code>, <code>sbcd2chip</code>, and <code>fastq2sbcd</code>.</p> </li> <li> <p>Rule Graph:</p> </li> </ul>"},{"location":"walkthrough/rules/align/","title":"Rule <code>align</code>","text":""},{"location":"walkthrough/rules/align/#purpose","title":"Purpose","text":"<p>The purpose of the <code>align</code> rule is to map the reads from 2nd-seq FASTQ files to the reference genome, focusing on a per-chip approach. For a chip associated with multiple pairs of 2nd-seq FASTQ files, NovaScope executes the <code>align</code> rule once utilizing all file pairs.</p> <p>Specifically, the process involves 1) combining all FASTQ files from 2nd-seq that are related to this chip, 2) discarding any 2nd-seq reads from that do not possess a spatial barcode sequence (HDMI) identified in 1st-seq, 3) mapping 2nd-seq reads to the reference genome utilizing STARsolo.</p>"},{"location":"walkthrough/rules/align/#input-files","title":"Input Files","text":"<ul> <li> <p>2nd-seq FASTQ file All pairs of 2nd-seq FASTQ files that are associated to the given chip are designed as input.</p> </li> <li> <p>Matched Spatial Barcode Files Matched Spatial barcode files for all pairs of 2nd-seq FASTQ files, which are produced by Rule <code>smatch</code>.</p> </li> </ul>"},{"location":"walkthrough/rules/align/#output-files","title":"Output Files","text":"<p>The rule generates the following output in the specified directory path: <pre><code>&lt;output_directory&gt;/align/&lt;flowcell_id&gt;/&lt;chip_id&gt;/bam/&lt;species&gt;_&lt;seq2nd_version&gt;\n</code></pre></p>"},{"location":"walkthrough/rules/align/#1-a-binary-alignment-map-bam-file","title":"(1) A Binary Alignment Map (BAM) File","text":"<p>Description: A Binary Alignment Map (BAM) file contains the aligned reads, sorted by genomic coordinates. The BAM file is accompanied by a BAM index (BAI) file.</p> <p>File Naming Convention:</p> <ul> <li>The BAM file: <code>sttoolsAligned.sortedByCoord.out.bam</code></li> <li>The BAI file: <code>sttoolsAligned.sortedByCoord.out.bam.bai</code></li> </ul> <p>File Format: For detailed information on the file formats for BAM and BAI files, please refer to the Format Specification provided by Samtools.</p>"},{"location":"walkthrough/rules/align/#2-alignment-summary-metrics","title":"(2) Alignment summary metrics","text":"<p>Description: A table file containing metrics such as the total number of input reads, average length of input reads, and summary statistics for unique, multi-mapping, unmapped, and chimeric reads.</p> <p>File Naming Convention: <code>sttoolsLog.final.out</code></p> <p>File Format: <pre><code>                                 Started job on |       Apr 01 18:32:36\n                             Started mapping on |       Apr 01 18:33:47\n                                    Finished on |       Apr 01 18:51:55\n       Mapping speed, Million of reads per hour |       275.83\n\n                          Number of input reads |       83363295\n                      Average input read length |       68\n                                    UNIQUE READS:\n                   Uniquely mapped reads number |       44728786\n                        Uniquely mapped reads % |       53.66%\n                          Average mapped length |       86.51\n                       Number of splices: Total |       4221113\n            Number of splices: Annotated (sjdb) |       4108506\n                       Number of splices: GT/AG |       4174922\n                       Number of splices: GC/AG |       13282\n                       Number of splices: AT/AC |       581\n               Number of splices: Non-canonical |       32328\n                      Mismatch rate per base, % |       0.92%\n                         Deletion rate per base |       0.03%\n                        Deletion average length |       1.56\n                        Insertion rate per base |       0.01%\n                       Insertion average length |       1.20\n                             MULTI-MAPPING READS:\n        Number of reads mapped to multiple loci |       9853625\n             % of reads mapped to multiple loci |       11.82%\n        Number of reads mapped to too many loci |       1330676\n             % of reads mapped to too many loci |       1.60%\n                                  UNMAPPED READS:\n  Number of reads unmapped: too many mismatches |       0\n       % of reads unmapped: too many mismatches |       0.00%\n            Number of reads unmapped: too short |       4764703\n                 % of reads unmapped: too short |       5.72%\n                Number of reads unmapped: other |       22685505\n                     % of reads unmapped: other |       27.21%\n                                  CHIMERIC READS:\n                       Number of chimeric reads |       0\n                            % of chimeric reads |       0.00%\n</code></pre></p>"},{"location":"walkthrough/rules/align/#3-digital-gene-expression-matrices-dges","title":"(3) Digital Gene Expression Matrices (DGEs)","text":"<p>Description: A digital gene expression matrix (DGE) is generated for each genomic feature, including Gene, GeneFull, splice junctions (SJ), and Velocyto. The DGE for Gene counts reads match the gene transcript while the DGE for GeneFull counts all reads overlapping the exons and introns of the gene.</p> <p>File Naming Convention: For each genomic feature, a DGE, which is composed of <code>barcodes.tsv.gz</code>, <code>features.tsv.gz</code>, and <code>matrix.mtx.gz</code>, is stored in a directory named after the genomic feature.</p> <p>File Format:</p> <ul> <li> <p><code>barcodes.tsv.gz</code>: A single-column file with Unix line endings and no header, where each row lists a barcode. <pre><code>AAAAAAAATAGTTCTGCTAGCTGGTAAGCT\nAAAAAAAGTGATCAGAGGTGATATTATGCT\nAAAAAAAGTTCGCACTATACGAACAGGGAT\n</code></pre></p> </li> <li> <p><code>features.tsv.gz</code>: Each row includes the following three columns without header: feature ID (column 1), feature name (column 2), and type of feature (column 3). <pre><code>ENSMUSG00000100764  Gm29155 Gene Expression\nENSMUSG00000100635  Gm29157 Gene Expression\nENSMUSG00000100480  Gm29156 Gene Expression\n</code></pre></p> </li> <li> <p><code>matrix.tsv.gz</code>: A compressed sparse matrix file format storing non-zero gene expression values across spatial locations or barcodes in spatial transcriptomics data. <pre><code>%%MatrixMarket matrix coordinate integer general\n%\n33989 17641021 17801209\n9677 1 1\n20305 2 1\n23800 2 1\n</code></pre></p> <ul> <li><code>Header</code>: Initial lines form the header, declaring the matrix's adherence to the Market Matrix (MTX) format, outlining its traits. This section may include comments (lines beginning with <code>%</code>) for extra metadata, all marked by a \u201c%\u201d.</li> <li><code>Dimensions</code>: Following the header, the first line details the matrix dimensions: the count of rows (features), columns (barcodes), and non-zero entries.</li> <li><code>Data Entries</code>: Post-dimensions, subsequent lines enumerate non-zero entries in triplet form: row index (feature index), column index (barcode index), and value (expression level).</li> </ul> </li> </ul>"},{"location":"walkthrough/rules/align/#output-guidelines","title":"Output Guidelines","text":"<p>It is suggested to review the summary metrics to confirm the total read count, the percentage of reads aligned to genomes and genes, library saturation, the count of aligned spatial barcodes, and the count of unique transcripts.</p>"},{"location":"walkthrough/rules/align/#parameters","title":"Parameters","text":"<p>The following parameter in the job configuration file will be applied in this rule.</p> <pre><code>preprocess:\n  smatch:                   \n    skip_sbcd: 1            \n    match_len: 27           \n  align:                    \n     min_match_len: 30      \n     min_match_frac: 0.66   \n     len_sbcd: 30            \n     len_umi: 9              \n     len_r2: 101             \n     exist_action: overwrite\n     resource:               \n       assign_type: stdin\n       stdin:\n         partition: standard\n         threads: 10\n         memory: 70000m\n</code></pre> <ul> <li> <p>Reformat FASTQ Paramaters</p> <p>Parameters in <code>smatch</code> and three parameters in <code>align</code> (including <code>len_sbcd</code>, <code>len_umi</code>, and <code>len_r2</code>) are used to pass values to the <code>reformat-fastqs</code> function in spatula. Below, for each parameter, the corresponding parameter in spatula, description, and the default value in NovaScope are provided.</p> Parameter <code>spatula</code> parameter Description Default Value <code>skip_sbcd</code> <code>--skip-sbcd</code> The number of initial bases to omit from the read. 1 <code>match_len</code> <code>--match-len</code> The length of the spatial barcode to be considered as a perfectmatch. 27 <code>len_sbcd</code> <code>--len_sbcd</code> The length of the spatial barcode sequence to be copied in Read 1 30 <code>len_umi</code> <code>--len_umi</code> The length of the UMI sequence (randomer) to be copied from Read 2 (beginning) to Read 1 (after spatial barcode) 9 <code>len_r2</code> <code>--len_r2</code> The length of Read 2 sequences to be trimmed 101 <ul> <li><code>skip_sbcd</code>: This is useful if the 1st-seq spatial barcode lacks sufficient bases. When absent in the job configuration file, NovaScope determines <code>skip_sbcd</code> following the <code>format</code> in <code>fastq2sbcd</code>: 1 for DraI31 and 0 for DraI32.</li> </ul> </li> <li> <p>Alignment Paramaters</p> <p>Four parameters in <code>align</code> (including <code>len_sbcd</code>, <code>len_umi</code>, <code>min_match_len</code>, and <code>min_match_frac</code>) are used to pass values to STARsolo. Below, for each parameter, the corresponding parameter in STARsolo, description, and the default value in NovaScope are provided.</p> Parameter <code>STARsolo</code> parameter Description Default Value <code>len_sbcd</code> <code>--soloCBlen</code> The cell barcode length 30 <code>--soloUMIstart</code> Defined as <code>len_sbcd + 1</code>, this indicates UMI sequence (randomer) start base. 31 <code>len_umi</code> <code>--soloUMIlen</code> The length of UMI sequence (randomer) start base. 9 <code>min_match_len</code> <code>--outFilterMatchNmin</code> An alignment is only output if the count of matched bases &gt;= this value. 30 <code>min_match_frac</code> <code>--outFilterMatchNminOverLread</code> Similar to <code>min_match_len</code>, normalized to the read length 0.66 </li> <li> <p>The <code>exist_action</code> Parameter</p> <p>The <code>exist_action</code> parameter within <code>align</code> provides two choices for handling existing intermediate or output files: \"<code>skip</code>\" tells NovaScope to bypass these files, whereas \"<code>overwrite</code>\" instructs NovaScope to replace them.</p> </li> <li> <p>The <code>resource</code> Parameter</p> <p>The <code>resource</code> parameters, specific to HPC users, determine the partitions, CPU count, and memory allocation for the alignment process. Details for the <code>resource</code> parameters in <code>align</code> are provided in the <code>preprocess</code> parameters in Job Configuration.</p> </li> </ul>"},{"location":"walkthrough/rules/align/#dependencies","title":"Dependencies","text":"<p>Rule <code>align</code> requires the matched spatial barcode files from Rule <code>smatch</code> generates. Hence, if the input files are not available, <code>align</code> relies on the successful completion of <code>smatch</code> for proper operation. See an overview of the rule dependencies in the Workflow Structure.</p>"},{"location":"walkthrough/rules/align/#code-snippet","title":"Code Snippet","text":"<p>The code for this rule is provided in a04_align.smk</p>"},{"location":"walkthrough/rules/dge2sdge/","title":"Rule <code>dge2sdge</code>:","text":""},{"location":"walkthrough/rules/dge2sdge/#purpose","title":"Purpose","text":"<p>The <code>dge2sdge</code> generates a spatial digital gene expression (SGE) matrix using the digital gene expression matrix (DGE) from alignment and spatial maps.</p>"},{"location":"walkthrough/rules/dge2sdge/#input-files","title":"Input Files","text":"<ul> <li>Per-Chip Spatial Barcode Map and Manifest File Required input files include the spatial barcode map and manifest file for the chip of interest, which are created by the <code>sbcd2chip</code> rule.</li> <li>Per-Chip Matched Spatial Barcode Files It also requires matched spatial barcode files that contains spatial barcodes matched to the 2nd-seq reads. Those files are generated by the <code>smatch</code> rule.</li> <li>DGEs DGEs for each genomic feature, including Gene, GeneFull, splice junctions (SJ), and Velocyto, are produced by the <code>align</code> rule.</li> </ul>"},{"location":"walkthrough/rules/dge2sdge/#output-files","title":"Output Files","text":"<p>The rule generates the following output in the specified directory path: <pre><code>&lt;output_directory&gt;/align/&lt;flowcell_id&gt;/&lt;chip_id&gt;/sge/&lt;species&gt;_&lt;seq2nd_version&gt;\n</code></pre></p>"},{"location":"walkthrough/rules/dge2sdge/#1-spatial-digital-gene-expression-matrix-sge","title":"(1) Spatial Digital Gene Expression Matrix (SGE)","text":"<p>Description: A spatial digital gene expression matrix (SGE) is generated, which contains all available genomic feature,</p> <p>File Naming Convention: The SGE is composed of <code>barcodes.tsv.gz</code>, <code>features.tsv.gz</code>, and <code>matrix.mtx.gz</code>.</p> <p>File Format:</p> <ul> <li> <p><code>barcodes.tsv.gz</code>: <pre><code>AAAAAAGGTACCCGCAGTGCGGACAAACGA  1   1   1   1   1214343 1498113 1,1,1,0,0\nAAAACAGGAGATTCAGAATGCAAAAATGAA  2   2   1   1   1029766 1669474 0,1,0,1,0\nAAAACTTGTCGAGCTCAGTGACGCGGGCTT  3   3   1   1   1366819 1170486 2,2,1,0,1\nAAAAGCGGTACAGCGTACTCCTATAAGAGT  4   4   1   1   1302024 1519190 6,6,5,0,1\nAAAAGGAATAAATGACCTCACGGATAACGT  5   5   1   1   1099465 2041759 1,2,1,1,0\n</code></pre></p> <ul> <li>Column 1: sorted spatial barcodes</li> <li>Column 2: 1-based integer index of the spatial barcode</li> <li>Column 3: 1-based integer index from the full barcode that is in the STARsolo output</li> <li>Column 4: Lane ID, which is defined as <code>1</code>.</li> <li>Column 5: Tile ID, which is defined as <code>1</code>.</li> <li>Column 6: X-coordinate within the chip (global X-coordinate).</li> <li>Column 7: Y-coordinate within the chip (global Y-coordinate).</li> <li>Column 8: Five comma-separated numbers denote the count per spatial barcode for each genomic feature, in the order of Gene, GeneFull, Spliced, Unspliced, and Ambiguous.</li> </ul> </li> <li> <p><code>features.tsv.gz</code>: <pre><code>ENSMUSG00000100764  Gm29155 1   2,2,1,0,1\nENSMUSG00000100635  Gm29157 2   0,0,0,0,0\nENSMUSG00000100480  Gm29156 3   0,0,0,0,0\nENSMUSG00000051285  Pcmtd1  4   164,38,35,3,0\nENSMUSG00000097797  Gm26901 5   0,0,0,0,0\n</code></pre></p> <ul> <li>Column 1: Gene Ensemble ID</li> <li>Column 2: Gene symbol</li> <li>Column 3: 1-based integer index which will be used in matrix.mtx.gz</li> <li>Column 4: Five comma-separated numbers denote the count per gene for each genomic feature, in the order of Gene, GeneFull, Spliced, Unspliced, and Ambiguous.</li> </ul> </li> <li> <p><code>matrix.mtx.gz</code>: <pre><code>%%MatrixMarket matrix coordinate integer general\n%\n33989 1197304 2488321\n5743 1 1 1 1 0 0\n6002 2 0 1 0 1 0\n7279 3 1 1 1 0 0\n7691 3 1 1 0 0 1\n2982 4 1 1 0 0 1\n</code></pre></p> <ul> <li><code>Header</code>: Initial lines form the header, declaring the matrix's adherence to the Market Matrix (MTX) format, outlining its traits. This may include comments (lines beginning with <code>%</code>) for extra metadata, all marked by a \u201c%\u201d.</li> <li><code>Dimensions</code>: Following the header, the first line details the matrix dimensions: the count of rows (features), columns (barcodes), and non-zero entries.</li> <li><code>Data Entries</code>: Post-dimensions, subsequent lines enumerate non-zero entries in seven columns: row index (feature index), column index (barcode index), and five values (expression levels) corresponds to Gene, GeneFull, Spliced, Unspliced, and Ambiguous.</li> </ul> </li> </ul>"},{"location":"walkthrough/rules/dge2sdge/#2-an-sge-image","title":"(2) An \"sge\" image","text":"<p>Description: The \"sge\" image illustrates the distribution of spatial barcodes aligned to the reference genome, with exon-aligned transcripts colored red, unspliced transcripts green, and mitochondrial transcripts blue.</p> <p>File Naming Convention: <pre><code>&lt;flowcell_id&gt;.&lt;chip_id&gt;.&lt;species&gt;_&lt;seq2nd_version&gt;.gene_full_mito.png\n</code></pre></p> <p>File Visualization:</p>"},{"location":"walkthrough/rules/dge2sdge/#3-a-comprehensive-view-of-sbcd-smatch-and-sge-images","title":"(3) A Comprehensive View of \"sbcd\", \"smatch\", and \"sge\" Images","text":"<p>Description: A side-by-side presentation of three images: the \"sbcd\" image from <code>sbcd2chip</code>, the \"smatch\" image from <code>smatch</code>, and the \"sge\" image generated by the current rule.</p> <p>File Naming Convention: <pre><code>&lt;flowcell_id&gt;.&lt;chip_id&gt;.&lt;species&gt;_&lt;seq2nd_version&gt;.sge_match_sbcd.png\n</code></pre></p> <p>File Visualization:</p>"},{"location":"walkthrough/rules/dge2sdge/#output-guidelines","title":"Output Guidelines","text":"<p>It is suggested to review the \"sge\" image along with the composite image displaying \"sbcd\", \"smatch\", and \"sge\" images together, to confirm: 1) that the \"sge\" image's spatial distribution of aligned transcripts corresponds with the tissue area, and 2) there is coherence among the \"smatch\", and \"sge\" images.</p>"},{"location":"walkthrough/rules/dge2sdge/#parameters","title":"Parameters","text":"<pre><code>  dge2sdge:\n    layout: null\n</code></pre> <ul> <li>The <code>layout</code> Parameter The applies as the layout for the RGB plots. When absent, NovaScope use the predefined layout file.</li> </ul>"},{"location":"walkthrough/rules/dge2sdge/#dependencies","title":"Dependencies","text":"<p>Given the input from Rule <code>sbcd2chip</code>, <code>smatch</code>, and <code>align</code> serve as the necessary input for <code>dge2sdge</code>. This linkage ensures Rule <code>dge2sdge</code> can only execute after <code>sbcd2chip</code>, <code>smatch</code>, and <code>align</code> have successfully completed their operations. See an overview of the rule dependencies in the Workflow Structure.</p>"},{"location":"walkthrough/rules/dge2sdge/#code-snippet","title":"Code Snippet","text":"<p>The code for this rule is provided in <code>a05_dge2sdge.smk</code>.</p>"},{"location":"walkthrough/rules/fastq2sbcd/","title":"Rule <code>fastq2sbcd</code>","text":""},{"location":"walkthrough/rules/fastq2sbcd/#purpose","title":"Purpose","text":"<p>The <code>fastq2sbcd</code> rule aims to generate a spatial barcode map per-tile basis for an input 1st-seq FASTQ file.</p>"},{"location":"walkthrough/rules/fastq2sbcd/#input-files","title":"Input Files","text":"<p>The only input file required by <code>fastq2sbcd</code> is the 1st-seq FASTQ file. Ensure the raw FASTQ files are correctly formatted and listed in the job configuration file.</p>"},{"location":"walkthrough/rules/fastq2sbcd/#output-files","title":"Output Files","text":"<p>The rule generates the following output in the specified directory path:  <pre><code>&lt;output_directory&gt;/seq1st/&lt;flowcell_id&gt;/sbcds/&lt;seq1st_id&gt;\n</code></pre></p>"},{"location":"walkthrough/rules/fastq2sbcd/#1-per-tile-spatial-barcode-maps","title":"(1) Per-Tile Spatial Barcode Maps","text":"<p>Description: The spatial barcode map for each tile is stored in a zipped, tab-separated file. These files map the barcodes to their coordinates within the tile, facilitating easier matching with 2nd-Seq sequences through reverse-complemented barcodes.</p> <p>File Naming Convention:  <code>&lt;lane_id&gt;_&lt;tile_id&gt;.sbcds.sorted.tsv.gz</code></p> <p>File Format: The format of the spatial barcode map is outlined below with an example:</p> <pre><code>AAAAAAAAAAAAGCGACCGGGTAATATATGT 3   2456    1036    35446   1\nAAAAAAGGTACCCGCAGTGCGGACAAACGAA 3   2456    23448   29731   1\nAAAAAGACGAGTAAAAGTGACTGTTAATTAC 3   2456    29794   1799    1\n</code></pre> <ul> <li>Column 1: Spatial barcode sequence (HDMI, typically 32 base pairs).</li> <li>Column 2: Lane ID.</li> <li>Column 3: Tile ID.</li> <li>Column 4: X-coordinate within the tile (local X-coordinate).</li> <li>Column 5: Y-coordinate within the tile (local Y-coordinate).</li> <li>Column 6: Count of occurrences for each spatial barcode.</li> </ul>"},{"location":"walkthrough/rules/fastq2sbcd/#2-flow-cell-manifest","title":"(2) Flow Cell Manifest","text":"<p>Description: The manifest file provides summary statistics for each tile within the input FASTQ file, with each tile's statistics presented in a separate row.</p> <p>File Naming Convention: <code>manifest.tsv</code> </p> <p>File Format:</p> <pre><code>id      filepath                        barcodes    matches mismatches  xmin    xmax    ymin    ymax\n3_2456  3_2456.sbcds.sorted.tsv.gz      3460541     3377518 83023       1027    32949   1000    37059\n3_2556  3_2556.sbcds.sorted.tsv.gz      3416413     3334054 82359       1036    32958   1000    37059\n</code></pre> <ul> <li><code>id</code>: The <code>id</code> is composed of <code>&lt;lane_id&gt;_&lt;tile_id&gt;</code>.</li> <li><code>filepath</code>: The file name is the corresponding spatial barcode map.</li> <li><code>barcodes</code>: The number of barcodes in the tile.</li> <li><code>matches</code>: The number of barcodes match to the expected pattern.</li> <li><code>mismatches</code>: The number of barcodes don't match to the expected pattern.</li> <li><code>xmin</code>: The minimum X-coordinate across all barcodes within the tile (i.e., mimimum local X-coordinate).</li> <li><code>xmax</code>: The maximum X-coordinate across all barcodes within the tile (i.e., maximum local X-coordinate).</li> <li><code>ymin</code>: The minimum Y-coordinate across all barcodes within the tile (i.e., mimimum local Y-coordinate).</li> <li><code>ymax</code>: The maximum Y-coordinate across all barcodes within the tile (i.e., maximum local Y-coordinate).</li> </ul>"},{"location":"walkthrough/rules/fastq2sbcd/#output-guidelines","title":"Output Guidelines","text":"<p>For accuracy purposes, it's recommended to examine the <code>manifest.tsv</code> file to verify:</p> <ol> <li>A full lane typically comprises 936 tiles, with each tile having 3 million or more reads;</li> <li>The majority of reads are expected to align with the anticipated HDMI patterns.</li> </ol>"},{"location":"walkthrough/rules/fastq2sbcd/#parameters","title":"Parameters","text":"<p>The following parameter in the job configuration file will be applied in this rule. </p> <pre><code>preprocess:\n  fastq2sbcd:\n    format: DraI32 \n</code></pre> <ul> <li>The <code>format</code> Parameter This parameter specifies the HDMI-oligo seed library used. The default setting is DraI32, which corresponds to HDMI32-DraI. Please see details for the seed HDMI-oligo library in the original publication of SeqScope.</li> </ul>"},{"location":"walkthrough/rules/fastq2sbcd/#dependencies","title":"Dependencies","text":"<p>Rule <code>fastq2sbcd</code> operates independently without dependencies on preceding rules. An overview of the rule dependencies are provided in the Workflow Structure.</p>"},{"location":"walkthrough/rules/fastq2sbcd/#code-snippet","title":"Code Snippet","text":"<p>The code for this rule is provided in <code>a01_fastq2sbcd.smk</code>.</p>"},{"location":"walkthrough/rules/historef/","title":"Rule <code>historef</code>","text":""},{"location":"walkthrough/rules/historef/#purpose","title":"Purpose","text":"<p>The goal of <code>historef</code> rule is to match the histology image with the spatial coordinates of the spatial digital gene expression matrix (SGE). This is achieved by aligning fiducial markers observable in both the histology image and the composite image of \"sbcd\", \"smatch\", and \"sge\" images.</p>"},{"location":"walkthrough/rules/historef/#input-files","title":"Input Files","text":"<ul> <li> <p>A histology image Th histology image with fiducial markers is required. The <code>historef</code> identifies fiducial marks by detecting the brightness in the input histology image, so it is crucial that fiducial markers are the brightest area in the histology image.</p> </li> <li> <p>The composite image The composite image, which shows \"sbcd\", \"smatch\", and \"sge\" images side-by-side, will also be applied to <code>historef</code>.</p> </li> </ul>"},{"location":"walkthrough/rules/historef/#output-files","title":"Output Files","text":"<p>The rule generates the following output in the specified directory path: <pre><code>&lt;output_directory&gt;/align/&lt;flowcell_id&gt;/&lt;chip_id&gt;/histology/&lt;species&gt;_&lt;seq2nd_version&gt;\n</code></pre></p>"},{"location":"walkthrough/rules/historef/#1-a-referenced-histology-file","title":"(1) A referenced Histology File","text":"<p>Description: The referenced histology file, which is in GeoTIFFformat, allows the coordinate transformation between the SGE matrix and the input histology image.</p> <p>File Naming Convention:</p> <pre><code>&lt;histology_resolution&gt;X&lt;flowcell_abbreviation&gt;-&lt;chip_id&gt;-&lt;species&gt;-&lt;histology_figtype&gt;.tif\"\n</code></pre> <ul> <li>The <code>histology_resolution</code> and <code>histology_figtype</code> are derived from the <code>resolution</code> and <code>figtype</code> fields within the <code>histology</code> section of the job configuration file.</li> <li>The <code>flowcell_abbreviation</code> is derived by splitting the <code>flowcell_id</code>, which is sourced from the <code>flowcell</code> field in <code>input</code> section of the job configuration file, by \"-\" and taking the first part.</li> </ul> <p>File Visualization:</p> <p>The image displayed above only serves an initial glimpse into the results but has been substantially reduced in size and is presented in PNG format.</p> <p>For an in-depth examination, access the full-size referenced histology file within the <code>B08Cshallow_20240319_SGE_withHE.tar.gz</code> tarball.</p>"},{"location":"walkthrough/rules/historef/#2-a-re-sized-referenced-histology-file","title":"(2) A Re-sized Referenced Histology File","text":"<p>Description: An TIFF file shares the identical dimensions with both the \"smatch\" image and the \"sge\" image, acilitating the comparison of consistency between the histology file and these images.</p> <p>File Naming Convention:</p> <pre><code>&lt;histology_resolution&gt;X&lt;flowcell_abbreviation&gt;-&lt;chip_id&gt;-&lt;species&gt;-&lt;histology_figtype&gt;-fit.tif\"\n</code></pre> <ul> <li>The <code>histology_resolution</code> and <code>histology_figtype</code> are derived from the <code>resolution</code> and <code>figtype</code> fields within the <code>histology</code> section of the job configuration file.</li> <li>The <code>flowcell_abbreviation</code> is derived by splitting the <code>flowcell_id</code>, which is sourced from the <code>flowcell</code> field in <code>input</code> section of the job configuration file, by \"-\" and taking the first part.</li> </ul> <p>File Visualization:</p> <p>The full-size TIFF is provided in the <code>B08Cshallow_20240319_SGE_withHE.tar.gz</code>.</p>"},{"location":"walkthrough/rules/historef/#output-guidelines","title":"Output Guidelines","text":"<p>To verify the accuracy of the alignment, it is recommended to compare the re-sized referenced histology file against the \"smatch\" image and the \"sge\" image, ensuring a precise match with the histology images. A clear visibility of fiducial marks in both images indicates an accurate match with submicrometer resolution upon overlay. If the fiducial marks are insufficiently visible or aligned incorrectly, manual adjustment of the histology images is required.</p>"},{"location":"walkthrough/rules/historef/#parameters","title":"Parameters","text":"<p>The following parameter in the job configuration file will be applied in this rule.</p> <pre><code>histology:\n    resolution: 10\n    figtype: \"hne\"\n</code></pre> <ul> <li>The <code>histology</code> Parameters     The <code>resolution</code> and <code>figtype</code> indicates the resolution and type of the input histology file. The <code>historef</code> currently support the following types:<ul> <li><code>\"hne\"</code>: Hematoxylin and Eosin (H&amp;E) stained histology images;</li> <li><code>\"dapi\"</code>: DAPI or 4',6-diamidino-2-phenylindole stained histology images;</li> <li><code>\"fl\"</code>: Fluorescence stained histology images.</li> </ul> </li> </ul>"},{"location":"walkthrough/rules/historef/#dependencies","title":"Dependencies","text":"<p>Rule <code>historef</code> commences only after Rule <code>dge2sdge</code> has successfully executed. An overview of the rule dependencies are provided in the Workflow Structure.</p>"},{"location":"walkthrough/rules/historef/#code-snippet","title":"Code Snippet","text":"<p>The code for this rule is provided in b02_historef.smk</p>"},{"location":"walkthrough/rules/sbcd2chip/","title":"Rule <code>sbcd2chip</code>","text":""},{"location":"walkthrough/rules/sbcd2chip/#purpose","title":"Purpose","text":"<p>The <code>sbcd2chip</code> rule is designed to create a spatial barcode map for a chip section of interest. It achieves this by merging the spatial maps of all tiles corresponding to the chip, guided by a spatial barcode layout file.</p>"},{"location":"walkthrough/rules/sbcd2chip/#input-files","title":"Input Files","text":"<ul> <li> <p>Per-Tile Spatial Barcode Maps &amp; Flow Cell Manifest Required inputs are the spatial barcode maps for each tile associated with the chip of interest and the manifest file for the corresponding flow cell. Both inputs are generated by the <code>fastq2sbcd</code> rule.</p> </li> <li> <p>A Spatial Barcode Layout file It is optional to provide a specific spatial barcode layout file for the chip via the job configuration file. If absent, NovaScope will use the spatial barcode layout provided by the NovaScope repository.</p> </li> </ul>"},{"location":"walkthrough/rules/sbcd2chip/#output-files","title":"Output Files","text":"<p>The rule generates the following output in the specified directory path:  <pre><code>&lt;output_directory&gt;/seq1st/&lt;flowcell_id&gt;/nbcds/&lt;seq1st_id&gt;\n</code></pre></p>"},{"location":"walkthrough/rules/sbcd2chip/#1-per-chip-spatial-barcode-map","title":"(1) Per-Chip Spatial Barcode Map","text":"<p>Description: This is a compressed, tab-delimited file mapping barcodes to global spatial coordinates on the chip, with duplicate barcodes removed. Note that only one spatial barcode map is produced for a chip, both lane ID and tile ID are set to <code>1</code>.</p> <p>File Naming Convention: <code>1_1.sbcds.sorted.tsv.gz</code></p> <p>File Format: </p> <pre><code>AAAAAAAAAAAAGCGACCGGGTAATATATGT 1   1   1413111 2277603 1\nAAAAAACATAAGAAAGATCCAAATGACGGTC 1   1   871865  383588  1\nAAAAAAGGTACCCGCAGTGCGGACAAACGAA 1   1   1214343 1498113 1\n</code></pre> <ul> <li>Column 1: Spatial barcode sequence (HDMI, typically 32 base pairs).</li> <li>Column 2: Lane ID, which is defined as <code>1</code>.</li> <li>Column 3: Tile ID, which is defined as <code>1</code>.</li> <li>Column 4: X-coordinate within the chip (global X-coordinate).</li> <li>Column 5: Y-coordinate within the chip (global Y-coordinate).</li> <li>Column 6: Count of occurrences for each spatial barcode.</li> </ul>"},{"location":"walkthrough/rules/sbcd2chip/#2-per-chip-manifest-file","title":"(2) Per-Chip Manifest File","text":"<p>Description: The manifest file offers summary statistics for the chip of interest. </p> <p>File Naming Convention: <code>manifest.tsv</code> </p> <p>File Format:  <pre><code>id   filepath                 barcodes  matches  mismatches  xmin  xmax     ymin  ymax\n1_1  1_1.sbcds.sorted.tsv.gz  5962994   5962994  0           0     1469211  0     2277916\n</code></pre></p> <ul> <li><code>id</code>: The <code>id</code> is composed of <code>&lt;lane_id&gt;_&lt;tile_id&gt;</code>. Given only one spatial barcode map is created for a chip, the id is designed as <code>1_1</code>.</li> <li><code>filepath</code>: The file name is the corresponding spatial barcode map.</li> <li><code>barcodes</code>: The number of barcodes in the chip.</li> <li><code>matches</code>: The number of barcodes match to the expected pattern.</li> <li><code>mismatches</code>: The number of barcodes do not match to the expected pattern.</li> <li><code>xmin</code>: The minimum x-coordinate in nanometers across all barcodes in the chip (i.e., minimum global X-coordinate).</li> <li><code>xmax</code>: The maximum x-coordinate in nanometers across all barcodes in the chip (i.e., maximum global X-coordinate).</li> <li><code>ymin</code>: The minimum y-coordinate in nanometers across all barcodes in the chip (i.e., minimum global Y-coordinate).</li> <li><code>ymax</code>: The maximum y-coordinate in nanometers across all barcodes in the chip (i.e., maximum global Y-coordinate).</li> </ul>"},{"location":"walkthrough/rules/sbcd2chip/#3-an-sbcd-image","title":"(3) An \"sbcd\" Image","text":"<p>Description: An image to show the distribution of the spatial coordinates of the barcodes, alongside the fiducial marks.</p> <p>File Naming Convention: <code>1_1.sbcds.sorted.png</code> </p> <p>File Visualization:</p>"},{"location":"walkthrough/rules/sbcd2chip/#4-a-summary-for-duplicate-barcodes","title":"(4) A Summary for Duplicate Barcodes","text":"<p>Description:  Each duplicate barcode reports its count and the maximum distance between duplicates, provided it falls within the <code>dup_maxdist</code> threshold.</p> <p>File Naming Convention: <code>dupstats.tsv.gz</code></p>"},{"location":"walkthrough/rules/sbcd2chip/#output-guidelines","title":"Output Guidelines","text":"<p>Recommended review steps: 1. Examine <code>manifest.tsv</code> to ensure there are a sufficient number of matched barcodes, and all mismatched barcodes are removed. 2. Inspect <code>1_1.sbcds.sorted.png</code> to verify that fiducial marks appear empty and align with other fiducial marks both horizontally and vertically.</p>"},{"location":"walkthrough/rules/sbcd2chip/#parameters","title":"Parameters","text":"<p>The following parameter in the job configuration file will be applied in this rule. </p> <pre><code>preprocess:\n  sbcd2chip:\n    gap_row: 0.0517\n    gap_col: 0.0048\n    dup_maxnum: 1\n    dup_maxdist: 1\n  visualization:\n    drawxy:\n      coord_per_pixel: 1000\n      intensity_per_obs: 50\n      icol_x: 3\n      icol_y: 4\n</code></pre> <ul> <li> <p>The <code>sbcd2chip</code> Parameters     Those parameters are used to pass values to the <code>combine_sbcds</code> function in spatula. Below, for each parameter, the corresponding parameters in spatula, description, and the default value in NovaScope are provided.</p> Parameter <code>spatula</code> parameter Description Default Value <code>gap_row</code> <code>--rowgap</code> Extra gap between rows, based on tile height, for spatial adjustment. 0.0517 <code>gap_col</code> <code>--colgap</code> Additional gap between columns, based on tile width, for spatial adjustment. 0.0048 <code>dup_maxnum</code> <code>--max-dup</code> Allowable duplicate count for each barcode, within <code>dup_maxdist</code>. 1 <code>dup_maxdist</code> <code>--max-dup-dist-nm</code> Max distance for duplicates, in nanometers. 1000 </li> <li> <p>The <code>visualization</code> Parameters     Those are parameters for the <code>draw-xy</code> function in spatula.</p> Parameter <code>spatula</code> parameter Description Default Value <code>coord_per_pixel</code> <code>--coord-per-pixel</code> Coordinates per pixel, as a divisor of input coordinate. 1000 <code>intensity_per_obs</code> <code>--intensity-per-obs</code> Intensity of points per pixel, max 255. 50 <code>icol_x</code> <code>--icol-x</code> (0-based) index of X coordinate in input TSV. 3 <code>icol_y</code> <code>--icol-y</code> (0-based) index of Y coordinate in input TSV. 4 </li> </ul>"},{"location":"walkthrough/rules/sbcd2chip/#dependencies","title":"Dependencies","text":"<p>Rule <code>sbcd2chip</code> is designed to process data that Rule <code>fastq2sbcd</code> generates. Therefore, if the input files are not available, <code>sbcd2chip</code> depends on the successful execution of <code>fastq2sbcd</code> to function correctly. An overview of the rule dependencies are provided in the Workflow Structure.</p>"},{"location":"walkthrough/rules/sbcd2chip/#code-snippet","title":"Code Snippet","text":"<p>The code for this rule is provided in a02_sbcd2chip.smk</p>"},{"location":"walkthrough/rules/smatch/","title":"Rule <code>smatch</code>","text":""},{"location":"walkthrough/rules/smatch/#purpose","title":"Purpose","text":"<p>The <code>smatch</code> rule examines that for a pair of 2nd-seq FASTQ files, if spatial barcode sequence (HDMI) in read 1 are found in the spatial barcodes map for this chip section. The <code>smatch</code> functions on a per-pair basis for 2nd-seq FASTQ files. This means that for a given chip of interest, which is associated with multiple pairs of 2nd-seq FASTQ files, NovaScope executes <code>smatch</code> for each pair in parallel.</p>"},{"location":"walkthrough/rules/smatch/#input-files","title":"Input Files","text":"<ul> <li> <p>Per-Chip Spatial Barcode Maps &amp; Manifest File Required input files include the spatial barcode map and manifest file for the chip of interest, which are created by the <code>sbcd2chip</code> rule.</p> </li> <li> <p>The 2nd-seq FASTQ files Required input files also include the read 1 file for a pair of 2nd-seq FASTQ files.</p> </li> </ul>"},{"location":"walkthrough/rules/smatch/#output-files","title":"Output Files","text":"<p>The following files are generated for each pair of 2nd-seq FASTQ files in the specified directory path below:</p> <pre><code>&lt;output_directory&gt;/align/&lt;flowcell_id&gt;/&lt;chip_id&gt;/match\n</code></pre>"},{"location":"walkthrough/rules/smatch/#1-a-matched-spatial-barcode-file","title":"(1) A Matched Spatial Barcode File","text":"<p>Description: A compressed, tab-delimited file containing spatial barcodes matched to the 2nd-seq reads.</p> <p>File Naming Convention: <code>&lt;seq2st_pair_id&gt;.R1.match.sorted.uniq.tsv.gz</code></p> <p>File Format:</p> <pre><code>AAAAAAAATAGTTCTGCTAGCTGGTAAGCTA  1  1  7124822  2910007  1  6\nAAAAAAAGTGATCAGAGGTGATATTATGCTT  1  1  7382402  2721048  1  6\nAAAAAAAGTTCGCACTATACGAACAGGGATC  1  1  8634969  2843056  1  1\n</code></pre> <ul> <li>Column 1: Spatial barcode sequence</li> <li>Column 2: Lane ID, which is defined as <code>1</code>.</li> <li>Column 3: Tile ID, which is defined as <code>1</code>.</li> <li>Column 4: X-coordinate within the chip (global X-coordinate).</li> <li>Column 5: Y-coordinate within the chip (global Y-coordinate).</li> <li>Column 6: Number of bases that do not match the expected pattern defined by the format (0 is a perfect match).</li> <li>Column 7: Number of occurrences in the 2nd-seq FASTQ read 1 file.</li> </ul>"},{"location":"walkthrough/rules/smatch/#2-a-smatch-image","title":"(2) A \"smatch\" Image","text":"<p>Description: An image depicting the spatial coordinate distribution of the matched barcodes.</p> <p>File Naming Convention: <code>&lt;seq2st_pair_id&gt;.R1.match.png</code></p> <p>File Visualization:</p>"},{"location":"walkthrough/rules/smatch/#3-an-overall-summary-of-matching-results","title":"(3) An Overall Summary of Matching Results","text":"<p>Description: A summary of the count and fraction of 2nd-seq reads based on the matching results.</p> <p>File Naming Convention: <code>&lt;seq2st_pair_id&gt;.R1.summary.tsv</code></p> <p>File Format:</p> <pre><code>Type        Reads      Fraction\nTotal       163383382  1.00000\nMiss        80020087   0.48977\nMatch       83363295   0.51023\nUnique      17641021   0.10797\nDup(Exact)  65722274   0.40226\n</code></pre> <ul> <li><code>Type</code> : The type of statistics, including the following values:<ul> <li><code>Total</code> : All reads in the 2nd-seq FASTQ file.</li> <li><code>Miss</code> : Reads that do not contain matching spatial barcodes.</li> <li><code>Match</code> : Reads that match with a spatial barcode.</li> <li><code>Unique</code> : Unique spatial barcodes that has matches.</li> <li><code>Dup(Exact)</code> : Duplicate barcodes calculated as Match - Unique.</li> </ul> </li> <li><code>Reads</code> : The number of reads or barcodes that match the type.</li> <li><code>Fraction</code> : The fraction of the reads (among all reads) that match the type.</li> </ul>"},{"location":"walkthrough/rules/smatch/#4-a-summary-of-matched-and-unique-barcodes","title":"(4) A Summary of Matched and Unique Barcodes","text":"<p>Description: A tab-delimited file containing the number of matched and unique spatial barcodes.</p> <p>File Naming Convention: <code>&lt;seq2st_pair_id&gt;.R1.counts.tsv</code></p> <p>File Format:</p> <pre><code>id   filepath                 barcodes   matches   unique\n1_1  1_1.sbcds.sorted.tsv.gz  175135683  83363295  17641021\n</code></pre> <ul> <li><code>id</code>: The <code>id</code> is composed of <code>&lt;lane_id&gt;_&lt;tile_id&gt;</code>. Given only one spatial barcode map is created for a chip, the id is designed as <code>1_1</code>.</li> <li><code>filepath</code>: The file name is the corresponding spatial barcode map.</li> <li><code>barcodes</code>: The number of spatial barcodes in the chip.</li> <li><code>matches</code>: The number of barcodes match to the expected pattern.</li> <li><code>unique</code>: The number of unique barcodes match to the expected pattern.</li> </ul>"},{"location":"walkthrough/rules/smatch/#output-guidelines","title":"Output Guidelines","text":"<p>Suggested review steps:</p> <ol> <li>Examine summary files to verify that the matched barcode rate isn't low rate, such as &lt; 5%. A low matching rate might indicate a possible sample swap.</li> <li>Inspect the \"smatch\" image for an even distribution of matched barcodes across the tissue area. An unexpected pattern may suggest issues with experimental procedures, like unsuccessful tissue permeabilization.</li> </ol>"},{"location":"walkthrough/rules/smatch/#parameters","title":"Parameters","text":"<p>The following parameter in the job configuration file will be applied in this rule.</p> <pre><code>preprocess:\n  smatch:                  \n    skip_sbcd: 1            \n    match_len: 27           \n  visualization:\n    drawxy:\n      coord_per_pixel: 1000\n      intensity_per_obs: 50\n      icol_x: 3\n      icol_y:\n</code></pre> <ul> <li> <p>The <code>smatch</code> Parameters</p> <p>Parameters for <code>smatch</code>, used to pass values to the <code>match-sbcds</code> function in spatula. Below, for each parameter, the corresponding parameter in spatula, description, and the default value in NovaScope are provided.</p> Parameter <code>spatula</code> parameter Description Default Value <code>skip_sbcd</code> <code>--skip-sbcd</code> The number of initial bases to omit from the read.* 1 <code>match_len</code> <code>--match-len</code> The length of the spatial barcode to be considered as a perfectmatch. 27 <ul> <li><code>skip_sbcd</code>: This is useful if the 1st-seq spatial barcode lacks sufficient bases. When it is absent, NovaScope determines <code>skip_sbcd</code> following the <code>format</code> of <code>fastq2sbcd</code>: 1 for DraI31 and 0 for DraI32.</li> </ul> </li> <li> <p>The <code>visualization</code> Parameters</p> <p>Parameters for the <code>visualization</code> step, provided to the <code>draw-xy</code> function in spatula.</p> Parameter <code>spatula</code> parameter Description Default Value <code>coord_per_pixel</code> <code>--coord-per-pixel</code> Coordinates per pixel, as a divisor of input coordinate. 1000 <code>intensity_per_obs</code> <code>--intensity-per-obs</code> Intensity of points per pixel, max 255. 50 <code>icol_x</code> <code>--icol-x</code> (0-based) index of X coordinate in input TSV. 3 <code>icol_y</code> <code>--icol-y</code> (0-based) index of Y coordinate in input TSV. 4 </li> </ul>"},{"location":"walkthrough/rules/smatch/#dependencies","title":"Dependencies","text":"<p>The <code>sbcd2chip</code> requires the successful execution of <code>sbcd2chip</code> to operate as intended. An overview of the rule dependencies are provided in the Workflow Structure.</p>"},{"location":"walkthrough/rules/smatch/#code-snippet","title":"Code Snippet","text":"<p>The code for this rule is provided in a03_smatch.smk</p>"}]}